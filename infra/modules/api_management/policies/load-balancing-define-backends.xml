<fragment>
    <!-- Getting the main variable where we keep the list of backends. The cache is specific to the current API to avoid cross-contamination. -->
    <cache-lookup-value key="@("listBackends-" + context.Api.Id)" variable-name="listBackends" />
    <!-- If we can't find the variable, initialize it -->
    <choose>
        <when condition="@(context.Variables.ContainsKey("listBackends") == false)">
            <set-variable name="openai-load-balancing-backends" value="{{openai-load-balancing-backends}}" />
            <set-variable name="listBackends" value="@{
                // -------------------------------------------------
                // ------- Explanation of backend properties -------
                // -------------------------------------------------
                // "backend-id":   Your backend id
                // "priority":     Lower value means higher priority over other backends. 
                //                 If you have more than one Priority 1 backends, they will always be used instead
                //                 of Priority 2 or higher. Higher values backends will only be used if your lower values (top priority) are all throttling.
                // "isThrottling": Indicates if this endpoint is returning 429 (Too many requests) currently
                // "retryAfter":   We use it to know when to mark this endpoint as healthy again after we received a 429 response

                JArray backends = new JArray();

                var contents = (string)context.Variables["openai-load-balancing-backends"];
                var minifiedJson = contents.Replace("\n", "").Replace("\r", "").Replace("\\", "");

                var parsedJson = JArray.Parse(minifiedJson);

                foreach(var backend in parsedJson)
                {
                    backends.Add(new JObject()
                    {
                        { "backend-id", backend["backend-id"] },
                        { "priority", backend["priority"]},
                        { "isThrottling", false }, 
                        { "retryAfter", DateTime.MinValue } 
                    });
                }

                return backends;   
            }" />
            <!-- And store the variable into cache again -->
            <cache-store-value key="@("listBackends-" + context.Api.Id)" value="@((JArray)context.Variables["listBackends"])" duration="60" />
        </when>
    </choose>
</fragment>