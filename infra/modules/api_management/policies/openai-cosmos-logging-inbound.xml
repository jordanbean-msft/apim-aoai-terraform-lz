<fragment>
	<authentication-managed-identity resource="{{cosmosdb-scope}}" output-token-variable-name="msi-access-token" ignore-error="false" client-id="{{user-assigned-identity-client-id}}" />
	<set-variable name="requestBody" value="@{
        var result = JObject.Parse(context.Request.Body.As&lt;string&gt;(preserveContent: true));
        return result;
    }" />
	<set-variable name="isStreaming" value="@{
        var result = (JObject)context.Variables["requestBody"];
        return result.ContainsKey("stream") && result["stream"].Value<bool>();
    }" />
	<send-one-way-request mode="new">
		<set-url>{{cosmosdb-document-endpoint}}</set-url>
		<set-method>POST</set-method>
		<set-header name="Authorization" exists-action="override">
			<value>@("type=aad&amp;ver=1.0&amp;sig=" + context.Variables["msi-access-token"])</value>
		</set-header>
		<set-header name="x-ms-version" exists-action="override">
			<value>2018-12-31</value>
		</set-header>
		<set-header name="x-ms-documentdb-partitionkey" exists-action="override">
			<value>
                @{
                    var result = $"[\"{context.Variables["partition-key"]}\"]";
                    return result;
                }
            </value>
		</set-header>
		<set-header name="Content-Type" exists-action="override">
			<value>application/json</value>
		</set-header>
		<set-header name="x-correlation-id" exists-action="override">
			<value>@((string)context.Variables["correlation-id"])</value>
		</set-header>
		<set-body>@{
            var result = (JObject)context.Variables["requestBody"];

            var returnObject = new JObject();

            if(context.Variables.TryGetValue("app-id", out var appId)) {
                returnObject.Add(new JProperty("id", appId + "|" + context.RequestId + "|inbound"));
            }
            
            if(context.Variables.TryGetValue("partition-key", out var pk)) {
                returnObject.Add(new JProperty("pk", pk));
            }
            
            returnObject.Add(new JProperty("requestId", context.RequestId));
            returnObject.Add(new JProperty("timestamp", context.Timestamp));
            returnObject.Add(new JProperty("ocpApimSubscriptionKey", context.Subscription.Key));
            returnObject.Add(new JProperty("direction", "inbound"));
            
            if(context.Variables.TryGetValue("correlation-id", out var correlationId)) {
                returnObject.Add(new JProperty("xCorrelationId", correlationId));
            }
            
            returnObject.Add(new JProperty("appId", appId));
            
            returnObject.Add(new JProperty("body", result));

            if(context.Request.OriginalUrl.Path.EndsWith("/completions")) {
                returnObject.Add(new JProperty("model", result["model"]));
            } else {
                string pattern = @"deployments\/([^\/]+)\/embeddings";
                Match match = Regex.Match(context.Request.OriginalUrl.Path, pattern);

                returnObject.Add(new JProperty("model", match.Groups[1].Value));
            }

            return returnObject.ToString();
        }
        </set-body>
	</send-one-way-request>
</fragment>