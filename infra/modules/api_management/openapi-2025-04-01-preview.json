{
    "openapi": "3.0.1",
    "info": {
        "title": "test",
        "description": "Azure OpenAI APIs for completions and search",
        "version": "1.0"
    },
    "servers": [
        {
            "url": "https://apim-bccqbxmqgjkfo.azure-api.net/test"
        }
    ],
    "paths": {
        "/deployments/{deployment-id}/completions": {
            "post": {
                "summary": "Creates a completion for the provided prompt, parameters and chosen model.",
                "description": "Creates a completion for the provided prompt, parameters and chosen model.",
                "operationId": "Completions_Create",
                "parameters": [
                    {
                        "name": "deployment-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Deployment id of the model which was deployed.",
                            "example": "davinci"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createCompletionRequest"
                            },
                            "example": {
                                "prompt": "Negate the following sentence.The price for bubblegum increased on thursday.\n\n Negated Sentence:",
                                "max_tokens": 50
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "apim-request-id": {
                                "description": "Request ID for troubleshooting purposes",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/createCompletionResponse"
                                },
                                "example": {
                                    "model": "davinci",
                                    "object": "text_completion",
                                    "id": "cmpl-4509KAos68kxOqpE2uYGw81j6m7uo",
                                    "created": 1637097562,
                                    "choices": [
                                        {
                                            "index": 0,
                                            "text": "The price for bubblegum decreased on thursday.",
                                            "logprobs": null,
                                            "finish_reason": "stop"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Service unavailable",
                        "headers": {
                            "apim-request-id": {
                                "description": "Request ID for troubleshooting purposes",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                },
                                "example": {
                                    "error": {
                                        "param": "string",
                                        "type": "string",
                                        "inner_error": {
                                            "code": "ResponsibleAIPolicyViolation",
                                            "content_filter_results": {
                                                "sexual": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "violence": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "hate": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "self_harm": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "profanity": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "custom_blocklists": {
                                                    "filtered": true,
                                                    "details": [
                                                        {
                                                            "filtered": true,
                                                            "id": "string"
                                                        }
                                                    ]
                                                },
                                                "error": {
                                                    "code": "string",
                                                    "message": "string"
                                                },
                                                "jailbreak": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "indirect_attack": {
                                                    "filtered": true,
                                                    "detected": true
                                                }
                                            }
                                        },
                                        "code": "string",
                                        "message": "string"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Service unavailable",
                        "headers": {
                            "apim-request-id": {
                                "description": "Request ID for troubleshooting purposes",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                },
                                "example": {
                                    "error": {
                                        "param": "string",
                                        "type": "string",
                                        "inner_error": {
                                            "code": "ResponsibleAIPolicyViolation",
                                            "content_filter_results": {
                                                "sexual": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "violence": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "hate": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "self_harm": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "profanity": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "custom_blocklists": {
                                                    "filtered": true,
                                                    "details": [
                                                        {
                                                            "filtered": true,
                                                            "id": "string"
                                                        }
                                                    ]
                                                },
                                                "error": {
                                                    "code": "string",
                                                    "message": "string"
                                                },
                                                "jailbreak": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "indirect_attack": {
                                                    "filtered": true,
                                                    "detected": true
                                                }
                                            }
                                        },
                                        "code": "string",
                                        "message": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deployments/{deployment-id}/embeddings": {
            "post": {
                "summary": "Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.",
                "description": "Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.",
                "operationId": "embeddings_create",
                "parameters": [
                    {
                        "name": "deployment-id",
                        "in": "path",
                        "description": "The deployment id of the model which was deployed.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "ada-search-index-v1"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "input"
                                ],
                                "type": "object",
                                "properties": {
                                    "input": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "default": "",
                                                "nullable": true,
                                                "example": "This is a test."
                                            },
                                            {
                                                "maxItems": 2048,
                                                "minItems": 1,
                                                "type": "array",
                                                "items": {
                                                    "minLength": 1,
                                                    "type": "string",
                                                    "example": "This is a test."
                                                }
                                            }
                                        ],
                                        "description": "Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less."
                                    },
                                    "user": {
                                        "type": "string",
                                        "description": "A unique identifier representing your end-user, which can help monitoring and detecting abuse."
                                    },
                                    "input_type": {
                                        "type": "string",
                                        "description": "input type of embedding search to use",
                                        "example": "query"
                                    },
                                    "encoding_format": {
                                        "type": "string",
                                        "description": "The format to return the embeddings in. Can be either `float` or `base64`. Defaults to `float`.",
                                        "nullable": true,
                                        "example": "float"
                                    },
                                    "dimensions": {
                                        "type": "integer",
                                        "description": "The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.",
                                        "nullable": true,
                                        "example": 1
                                    }
                                }
                            },
                            "example": {
                                "input": {},
                                "user": "string",
                                "input_type": "query",
                                "encoding_format": "float",
                                "dimensions": 1
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "required": [
                                        "object",
                                        "model",
                                        "data",
                                        "usage"
                                    ],
                                    "type": "object",
                                    "properties": {
                                        "object": {
                                            "type": "string"
                                        },
                                        "model": {
                                            "type": "string"
                                        },
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "required": [
                                                    "index",
                                                    "object",
                                                    "embedding"
                                                ],
                                                "type": "object",
                                                "properties": {
                                                    "index": {
                                                        "type": "integer"
                                                    },
                                                    "object": {
                                                        "type": "string"
                                                    },
                                                    "embedding": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "number"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "usage": {
                                            "required": [
                                                "prompt_tokens",
                                                "total_tokens"
                                            ],
                                            "type": "object",
                                            "properties": {
                                                "prompt_tokens": {
                                                    "type": "integer"
                                                },
                                                "total_tokens": {
                                                    "type": "integer"
                                                }
                                            }
                                        }
                                    }
                                },
                                "example": {
                                    "object": "string",
                                    "model": "string",
                                    "data": [
                                        {
                                            "index": 0,
                                            "object": "string",
                                            "embedding": [
                                                0
                                            ]
                                        }
                                    ],
                                    "usage": {
                                        "prompt_tokens": 0,
                                        "total_tokens": 0
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deployments/{deployment-id}/chat/completions": {
            "post": {
                "summary": "Creates a completion for the chat message",
                "description": "Creates a completion for the chat message",
                "operationId": "ChatCompletions_Create",
                "parameters": [
                    {
                        "name": "deployment-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Deployment id of the model which was deployed."
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createChatCompletionRequest"
                            },
                            "example": {
                                "temperature": 1,
                                "top_p": 1,
                                "stream": false,
                                "stop": null,
                                "max_tokens": 0,
                                "max_completion_tokens": 0,
                                "presence_penalty": 0,
                                "frequency_penalty": 0,
                                "logit_bias": null,
                                "store": true,
                                "metadata": {},
                                "user": "user-1234",
                                "messages": [
                                    {
                                        "content": {},
                                        "role": "developer",
                                        "name": "string"
                                    }
                                ],
                                "data_sources": [
                                    {
                                        "type": "azure_search"
                                    }
                                ],
                                "reasoning_effort": "medium",
                                "logprobs": false,
                                "top_logprobs": 0,
                                "n": 1,
                                "modalities": [
                                    "text"
                                ],
                                "prediction": {
                                    "type": "content",
                                    "content": {}
                                },
                                "audio": {
                                    "voice": "alloy",
                                    "format": "wav"
                                },
                                "parallel_tool_calls": true,
                                "response_format": {
                                    "type": "text"
                                },
                                "seed": 0,
                                "stream_options": null,
                                "tools": [
                                    {
                                        "type": "function",
                                        "function": {
                                            "description": "string",
                                            "name": "string",
                                            "parameters": {},
                                            "strict": false
                                        }
                                    }
                                ],
                                "tool_choice": {},
                                "function_call": {},
                                "functions": [
                                    {
                                        "description": "string",
                                        "name": "string",
                                        "parameters": {}
                                    }
                                ],
                                "user_security_context": {
                                    "application_name": "string",
                                    "end_user_id": "string",
                                    "end_user_tenant_id": "string",
                                    "source_ip": "string"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "apim-request-id": {
                                "description": "Request ID for troubleshooting purposes",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/createChatCompletionResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/createChatCompletionStreamResponse"
                                        }
                                    ]
                                },
                                "example": {
                                    "id": "string",
                                    "prompt_filter_results": [
                                        {
                                            "prompt_index": 0,
                                            "content_filter_results": {
                                                "sexual": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "violence": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "hate": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "self_harm": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "profanity": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "custom_blocklists": {
                                                    "filtered": true,
                                                    "details": [
                                                        {
                                                            "filtered": true,
                                                            "id": "string"
                                                        }
                                                    ]
                                                },
                                                "error": {
                                                    "code": "string",
                                                    "message": "string"
                                                },
                                                "jailbreak": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "indirect_attack": {
                                                    "filtered": true,
                                                    "detected": true
                                                }
                                            }
                                        }
                                    ],
                                    "choices": [
                                        {
                                            "finish_reason": "stop",
                                            "index": 0,
                                            "message": {
                                                "role": "assistant",
                                                "refusal": "string",
                                                "content": "string",
                                                "tool_calls": [
                                                    {
                                                        "id": "string",
                                                        "type": "function",
                                                        "function": {
                                                            "name": "string",
                                                            "arguments": "string"
                                                        }
                                                    }
                                                ],
                                                "function_call": {
                                                    "name": "string",
                                                    "arguments": "string"
                                                },
                                                "audio": {
                                                    "id": "string",
                                                    "expires_at": 0,
                                                    "data": "string",
                                                    "transcript": "string"
                                                },
                                                "context": {
                                                    "citations": [
                                                        {
                                                            "content": "string",
                                                            "title": "string",
                                                            "url": "string",
                                                            "filepath": "string",
                                                            "chunk_id": "string",
                                                            "rerank_score": 0
                                                        }
                                                    ],
                                                    "intent": "string",
                                                    "all_retrieved_documents": [
                                                        {
                                                            "content": "string",
                                                            "title": "string",
                                                            "url": "string",
                                                            "filepath": "string",
                                                            "chunk_id": "string",
                                                            "rerank_score": 0,
                                                            "search_queries": [
                                                                "string"
                                                            ],
                                                            "data_source_index": 0,
                                                            "original_search_score": 0,
                                                            "filter_reason": "score"
                                                        }
                                                    ]
                                                }
                                            },
                                            "content_filter_results": {
                                                "sexual": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "violence": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "hate": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "self_harm": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "profanity": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "custom_blocklists": {
                                                    "filtered": true,
                                                    "details": [
                                                        {
                                                            "filtered": true,
                                                            "id": "string"
                                                        }
                                                    ]
                                                },
                                                "error": {
                                                    "code": "string",
                                                    "message": "string"
                                                },
                                                "protected_material_text": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "protected_material_code": {
                                                    "filtered": true,
                                                    "detected": true,
                                                    "citation": {
                                                        "URL": "string",
                                                        "license": "string"
                                                    }
                                                },
                                                "ungrounded_material": {
                                                    "filtered": true,
                                                    "detected": true,
                                                    "details": [
                                                        {
                                                            "completion_start_offset": 0,
                                                            "completion_end_offset": 0
                                                        }
                                                    ]
                                                }
                                            },
                                            "logprobs": {
                                                "content": [
                                                    {
                                                        "token": "string",
                                                        "logprob": 0,
                                                        "bytes": [
                                                            0
                                                        ],
                                                        "top_logprobs": [
                                                            {
                                                                "token": "string",
                                                                "logprob": 0,
                                                                "bytes": [
                                                                    0
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "refusal": [
                                                    {
                                                        "token": "string",
                                                        "logprob": 0,
                                                        "bytes": [
                                                            0
                                                        ],
                                                        "top_logprobs": [
                                                            {
                                                                "token": "string",
                                                                "logprob": 0,
                                                                "bytes": [
                                                                    0
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    ],
                                    "created": 0,
                                    "model": "string",
                                    "system_fingerprint": "string",
                                    "object": "chat.completion",
                                    "usage": {
                                        "prompt_tokens": 0,
                                        "completion_tokens": 0,
                                        "total_tokens": 0,
                                        "prompt_tokens_details": {
                                            "audio_tokens": 0,
                                            "cached_tokens": 0
                                        },
                                        "completion_tokens_details": {
                                            "accepted_prediction_tokens": 0,
                                            "audio_tokens": 0,
                                            "reasoning_tokens": 0,
                                            "rejected_prediction_tokens": 0
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Service unavailable",
                        "headers": {
                            "apim-request-id": {
                                "description": "Request ID for troubleshooting purposes",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                },
                                "example": {
                                    "error": {
                                        "param": "string",
                                        "type": "string",
                                        "inner_error": {
                                            "code": "ResponsibleAIPolicyViolation",
                                            "content_filter_results": {
                                                "sexual": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "violence": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "hate": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "self_harm": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "profanity": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "custom_blocklists": {
                                                    "filtered": true,
                                                    "details": [
                                                        {
                                                            "filtered": true,
                                                            "id": "string"
                                                        }
                                                    ]
                                                },
                                                "error": {
                                                    "code": "string",
                                                    "message": "string"
                                                },
                                                "jailbreak": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "indirect_attack": {
                                                    "filtered": true,
                                                    "detected": true
                                                }
                                            }
                                        },
                                        "code": "string",
                                        "message": "string"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Service unavailable",
                        "headers": {
                            "apim-request-id": {
                                "description": "Request ID for troubleshooting purposes",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                },
                                "example": {
                                    "error": {
                                        "param": "string",
                                        "type": "string",
                                        "inner_error": {
                                            "code": "ResponsibleAIPolicyViolation",
                                            "content_filter_results": {
                                                "sexual": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "violence": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "hate": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "self_harm": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "profanity": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "custom_blocklists": {
                                                    "filtered": true,
                                                    "details": [
                                                        {
                                                            "filtered": true,
                                                            "id": "string"
                                                        }
                                                    ]
                                                },
                                                "error": {
                                                    "code": "string",
                                                    "message": "string"
                                                },
                                                "jailbreak": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "indirect_attack": {
                                                    "filtered": true,
                                                    "detected": true
                                                }
                                            }
                                        },
                                        "code": "string",
                                        "message": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deployments/{deployment-id}/audio/transcriptions": {
            "post": {
                "summary": "Transcribes audio into the input language.",
                "description": "Transcribes audio into the input language.",
                "operationId": "Transcriptions_Create",
                "parameters": [
                    {
                        "name": "deployment-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Deployment id of the whisper model.",
                            "example": "whisper"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file"
                                ],
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "The audio file object to transcribe.",
                                        "format": "binary"
                                    },
                                    "prompt": {
                                        "type": "string",
                                        "description": "An optional text to guide the model's style or continue a previous audio segment. The prompt should match the audio language."
                                    },
                                    "response_format": {
                                        "$ref": "#/components/schemas/audioResponseFormat"
                                    },
                                    "temperature": {
                                        "type": "number",
                                        "description": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit.",
                                        "default": 0
                                    },
                                    "language": {
                                        "type": "string",
                                        "description": "The language of the input audio. Supplying the input language in ISO-639-1 format will improve accuracy and latency."
                                    },
                                    "timestamp_granularities[]": {
                                        "type": "array",
                                        "description": "The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.",
                                        "default": "[\n  \"segment\"\n]"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/audioResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/audioVerboseResponse"
                                        }
                                    ]
                                },
                                "example": {
                                    "text": "string"
                                }
                            },
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "description": "Transcribed text in the output format (when response_format was one of text, vtt or srt)."
                                },
                                "examples": {
                                    "default": {
                                        "value": null
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deployments/{deployment-id}/audio/translations": {
            "post": {
                "summary": "Transcribes and translates input audio into English text.",
                "description": "Transcribes and translates input audio into English text.",
                "operationId": "Translations_Create",
                "parameters": [
                    {
                        "name": "deployment-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Deployment id of the whisper model which was deployed.",
                            "example": "whisper"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "file"
                                ],
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "The audio file to translate.",
                                        "format": "binary"
                                    },
                                    "prompt": {
                                        "type": "string",
                                        "description": "An optional text to guide the model's style or continue a previous audio segment. The prompt should be in English."
                                    },
                                    "response_format": {
                                        "$ref": "#/components/schemas/audioResponseFormat"
                                    },
                                    "temperature": {
                                        "type": "number",
                                        "description": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit.",
                                        "default": 0
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/audioResponse"
                                        },
                                        {
                                            "$ref": "#/components/schemas/audioVerboseResponse"
                                        }
                                    ]
                                },
                                "example": {
                                    "text": "string"
                                }
                            },
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "description": "Transcribed text in the output format (when response_format was one of text, vtt or srt)."
                                },
                                "examples": {
                                    "default": {
                                        "value": null
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deployments/{deployment-id}/audio/speech": {
            "post": {
                "summary": "Generates audio from the input text.",
                "description": "Generates audio from the input text.",
                "operationId": "Speech_Create",
                "parameters": [
                    {
                        "name": "deployment-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Deployment id of the tts model which was deployed.",
                            "example": "tts-1"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "input",
                                    "voice"
                                ],
                                "properties": {
                                    "input": {
                                        "type": "string",
                                        "description": "The text to synthesize audio for. The maximum length is 4096 characters."
                                    },
                                    "voice": {
                                        "enum": [
                                            "alloy",
                                            "echo",
                                            "fable",
                                            "onyx",
                                            "nova",
                                            "shimmer"
                                        ],
                                        "type": "string",
                                        "description": "The voice to use for speech synthesis."
                                    },
                                    "response_format": {
                                        "enum": [
                                            "mp3",
                                            "opus",
                                            "aac",
                                            "flac",
                                            "wav",
                                            "pcm"
                                        ],
                                        "type": "string",
                                        "description": "The format to synthesize the audio in."
                                    },
                                    "speed": {
                                        "type": "number",
                                        "description": "The speed of the synthesize audio. Select a value from `0.25` to `4.0`. `1.0` is the default.",
                                        "default": 1
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                },
                                "examples": {
                                    "default": {
                                        "value": null
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deployments/{deployment-id}/images/generations": {
            "post": {
                "summary": "Generates a batch of images from a text caption on a given DALLE or gpt-image-1 model deployment",
                "description": "Generates a batch of images from a text caption on a given DALLE or gpt-image-1 model deployment",
                "operationId": "ImageGenerations_Create",
                "parameters": [
                    {
                        "name": "deployment-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Deployment id of the gpt-image-1 model which was deployed.",
                            "example": "gpt-image-1-deployment"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/imageGenerationsRequest"
                            },
                            "example": {
                                "prompt": "a corgi in a field",
                                "background": "auto",
                                "n": 1,
                                "output_compression": 100,
                                "output_format": "png",
                                "quality": "auto",
                                "response_format": "url",
                                "size": "auto",
                                "style": "vivid",
                                "user": "user123456"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/generateImagesResponse"
                                },
                                "example": {
                                    "created": "1676540381",
                                    "data": [
                                        {
                                            "url": "https://www.contoso.com",
                                            "b64_json": "string",
                                            "content_filter_results": {
                                                "sexual": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "violence": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "hate": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "self_harm": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                }
                                            },
                                            "revised_prompt": "string",
                                            "prompt_filter_results": {
                                                "sexual": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "violence": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "hate": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "self_harm": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "profanity": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "jailbreak": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "custom_blocklists": {
                                                    "filtered": true,
                                                    "details": [
                                                        {
                                                            "filtered": true,
                                                            "id": "string"
                                                        }
                                                    ]
                                                }
                                            }
                                        }
                                    ],
                                    "usage": {
                                        "total_tokens": 100,
                                        "input_tokens": 50,
                                        "output_tokens": 50,
                                        "input_tokens_details": {
                                            "text_tokens": 10,
                                            "image_tokens": 40
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "An error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/dalleErrorResponse"
                                },
                                "example": {
                                    "error": {
                                        "param": "string",
                                        "type": "string",
                                        "inner_error": {
                                            "code": "ResponsibleAIPolicyViolation",
                                            "content_filter_results": {
                                                "sexual": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "violence": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "hate": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "self_harm": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "profanity": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "jailbreak": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "custom_blocklists": {
                                                    "filtered": true,
                                                    "details": [
                                                        {
                                                            "filtered": true,
                                                            "id": "string"
                                                        }
                                                    ]
                                                }
                                            },
                                            "revised_prompt": "string"
                                        },
                                        "code": "string",
                                        "message": "string"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/dalleErrorResponse"
                                },
                                "example": {
                                    "error": {
                                        "param": "string",
                                        "type": "string",
                                        "inner_error": {
                                            "code": "ResponsibleAIPolicyViolation",
                                            "content_filter_results": {
                                                "sexual": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "violence": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "hate": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "self_harm": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "profanity": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "jailbreak": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "custom_blocklists": {
                                                    "filtered": true,
                                                    "details": [
                                                        {
                                                            "filtered": true,
                                                            "id": "string"
                                                        }
                                                    ]
                                                }
                                            },
                                            "revised_prompt": "string"
                                        },
                                        "code": "string",
                                        "message": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/deployments/{deployment-id}/images/edits": {
            "post": {
                "summary": "Edits an image from a text caption on a given gpt-image-1 model deployment",
                "description": "Edits an image from a text caption on a given gpt-image-1 model deployment",
                "operationId": "ImageGenerations_Edit",
                "parameters": [
                    {
                        "name": "deployment-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Deployment id of the gpt-image-1 model which was deployed.",
                            "example": "gpt-image-1-deployment"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/imageEditsRequest"
                            },
                            "example": {
                                "image": {},
                                "prompt": "a corgi in a field",
                                "mask": "string",
                                "n": 1,
                                "quality": "auto",
                                "response_format": "url",
                                "size": "auto",
                                "user": "user123456"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Ok",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/generateImagesResponse"
                                },
                                "example": {
                                    "created": "1676540381",
                                    "data": [
                                        {
                                            "url": "https://www.contoso.com",
                                            "b64_json": "string",
                                            "content_filter_results": {
                                                "sexual": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "violence": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "hate": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "self_harm": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                }
                                            },
                                            "revised_prompt": "string",
                                            "prompt_filter_results": {
                                                "sexual": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "violence": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "hate": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "self_harm": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "profanity": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "jailbreak": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "custom_blocklists": {
                                                    "filtered": true,
                                                    "details": [
                                                        {
                                                            "filtered": true,
                                                            "id": "string"
                                                        }
                                                    ]
                                                }
                                            }
                                        }
                                    ],
                                    "usage": {
                                        "total_tokens": 100,
                                        "input_tokens": 50,
                                        "output_tokens": 50,
                                        "input_tokens_details": {
                                            "text_tokens": 10,
                                            "image_tokens": 40
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "An error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/dalleErrorResponse"
                                },
                                "example": {
                                    "error": {
                                        "param": "string",
                                        "type": "string",
                                        "inner_error": {
                                            "code": "ResponsibleAIPolicyViolation",
                                            "content_filter_results": {
                                                "sexual": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "violence": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "hate": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "self_harm": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "profanity": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "jailbreak": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "custom_blocklists": {
                                                    "filtered": true,
                                                    "details": [
                                                        {
                                                            "filtered": true,
                                                            "id": "string"
                                                        }
                                                    ]
                                                }
                                            },
                                            "revised_prompt": "string"
                                        },
                                        "code": "string",
                                        "message": "string"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "An error occurred.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/dalleErrorResponse"
                                },
                                "example": {
                                    "error": {
                                        "param": "string",
                                        "type": "string",
                                        "inner_error": {
                                            "code": "ResponsibleAIPolicyViolation",
                                            "content_filter_results": {
                                                "sexual": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "violence": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "hate": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "self_harm": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "profanity": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "jailbreak": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "custom_blocklists": {
                                                    "filtered": true,
                                                    "details": [
                                                        {
                                                            "filtered": true,
                                                            "id": "string"
                                                        }
                                                    ]
                                                }
                                            },
                                            "revised_prompt": "string"
                                        },
                                        "code": "string",
                                        "message": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/assistants": {
            "get": {
                "tags": [
                    "Assistants"
                ],
                "summary": "Returns a list of assistants.",
                "description": "Returns a list of assistants.",
                "operationId": "List_Assistants",
                "parameters": [
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
                        "schema": {
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string",
                            "default": "desc",
                            "x-ms-enum": {
                                "name": "ListAssistantsOrder",
                                "modelAsString": true,
                                "values": [
                                    {
                                        "value": "asc",
                                        "description": "Order results in ascending order"
                                    },
                                    {
                                        "value": "desc",
                                        "description": "Order results in descending order"
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/listAssistantsResponse"
                                },
                                "example": {
                                    "object": "list",
                                    "data": [
                                        {
                                            "id": "string",
                                            "object": "assistant",
                                            "created_at": 0,
                                            "name": "string",
                                            "description": "string",
                                            "model": "string",
                                            "instructions": "string",
                                            "tools": [
                                                {
                                                    "type": "code_interpreter"
                                                }
                                            ],
                                            "tool_resources": {
                                                "code_interpreter": {
                                                    "file_ids": [
                                                        "string"
                                                    ]
                                                },
                                                "file_search": {
                                                    "vector_store_ids": [
                                                        "string"
                                                    ]
                                                }
                                            },
                                            "metadata": {},
                                            "temperature": 1,
                                            "top_p": 1,
                                            "response_format": {}
                                        }
                                    ],
                                    "first_id": "string",
                                    "last_id": "string",
                                    "has_more": false
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Assistants"
                ],
                "summary": "Create an assistant with a model and instructions.",
                "description": "Create an assistant with a model and instructions.",
                "operationId": "Create_Assistant",
                "parameters": [
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createAssistantRequest"
                            },
                            "example": {
                                "model": {},
                                "name": "string",
                                "description": "string",
                                "instructions": "string",
                                "tools": [
                                    {
                                        "type": "code_interpreter"
                                    }
                                ],
                                "tool_resources": {
                                    "code_interpreter": {
                                        "file_ids": [
                                            "string"
                                        ]
                                    },
                                    "file_search": {
                                        "vector_store_ids": [
                                            "string"
                                        ],
                                        "vector_stores": [
                                            {
                                                "file_ids": [
                                                    "string"
                                                ],
                                                "chunking_strategy": {
                                                    "type": "auto"
                                                },
                                                "metadata": {}
                                            }
                                        ]
                                    }
                                },
                                "metadata": {},
                                "temperature": 1,
                                "top_p": 1,
                                "response_format": {}
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/assistantObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "assistant",
                                    "created_at": 0,
                                    "name": "string",
                                    "description": "string",
                                    "model": "string",
                                    "instructions": "string",
                                    "tools": [
                                        {
                                            "type": "code_interpreter"
                                        }
                                    ],
                                    "tool_resources": {
                                        "code_interpreter": {
                                            "file_ids": [
                                                "string"
                                            ]
                                        },
                                        "file_search": {
                                            "vector_store_ids": [
                                                "string"
                                            ]
                                        }
                                    },
                                    "metadata": {},
                                    "temperature": 1,
                                    "top_p": 1,
                                    "response_format": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/assistants/{assistant_id}": {
            "get": {
                "tags": [
                    "Assistants"
                ],
                "summary": "Retrieves an assistant.",
                "description": "Retrieves an assistant.",
                "operationId": "Get_Assistant",
                "parameters": [
                    {
                        "name": "assistant_id",
                        "in": "path",
                        "description": "The ID of the assistant to retrieve.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/assistantObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "assistant",
                                    "created_at": 0,
                                    "name": "string",
                                    "description": "string",
                                    "model": "string",
                                    "instructions": "string",
                                    "tools": [
                                        {
                                            "type": "code_interpreter"
                                        }
                                    ],
                                    "tool_resources": {
                                        "code_interpreter": {
                                            "file_ids": [
                                                "string"
                                            ]
                                        },
                                        "file_search": {
                                            "vector_store_ids": [
                                                "string"
                                            ]
                                        }
                                    },
                                    "metadata": {},
                                    "temperature": 1,
                                    "top_p": 1,
                                    "response_format": {}
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Assistant"
                ],
                "summary": "Modifies an assistant.",
                "description": "Modifies an assistant.",
                "operationId": "Modify_Assistant",
                "parameters": [
                    {
                        "name": "assistant_id",
                        "in": "path",
                        "description": "The ID of the assistant to modify.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/modifyAssistantRequest"
                            },
                            "example": {
                                "model": {},
                                "name": "string",
                                "description": "string",
                                "instructions": "string",
                                "tools": [
                                    {
                                        "type": "code_interpreter"
                                    }
                                ],
                                "tool_resources": {
                                    "code_interpreter": {
                                        "file_ids": [
                                            "string"
                                        ]
                                    },
                                    "file_search": {
                                        "vector_store_ids": [
                                            "string"
                                        ]
                                    }
                                },
                                "metadata": {},
                                "temperature": 1,
                                "top_p": 1,
                                "response_format": {}
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/assistantObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "assistant",
                                    "created_at": 0,
                                    "name": "string",
                                    "description": "string",
                                    "model": "string",
                                    "instructions": "string",
                                    "tools": [
                                        {
                                            "type": "code_interpreter"
                                        }
                                    ],
                                    "tool_resources": {
                                        "code_interpreter": {
                                            "file_ids": [
                                                "string"
                                            ]
                                        },
                                        "file_search": {
                                            "vector_store_ids": [
                                                "string"
                                            ]
                                        }
                                    },
                                    "metadata": {},
                                    "temperature": 1,
                                    "top_p": 1,
                                    "response_format": {}
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Assistants"
                ],
                "summary": "Delete an assistant.",
                "description": "Delete an assistant.",
                "operationId": "Delete_Assistant",
                "parameters": [
                    {
                        "name": "assistant_id",
                        "in": "path",
                        "description": "The ID of the assistant to delete.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/deleteAssistantResponse"
                                },
                                "example": {
                                    "id": "string",
                                    "deleted": true,
                                    "object": "assistant.deleted"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/threads": {
            "post": {
                "tags": [
                    "Assistants"
                ],
                "summary": "Create a thread.",
                "description": "Create a thread.",
                "operationId": "Create_Thread",
                "parameters": [
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createThreadRequest"
                            },
                            "example": {
                                "messages": [
                                    {
                                        "role": "user",
                                        "content": "string",
                                        "attachments": [
                                            {
                                                "file_id": "string",
                                                "tools": [
                                                    {
                                                        "type": "code_interpreter"
                                                    }
                                                ]
                                            }
                                        ],
                                        "metadata": {}
                                    }
                                ],
                                "tool_resources": {
                                    "code_interpreter": {
                                        "file_ids": [
                                            "string"
                                        ]
                                    },
                                    "file_search": {
                                        "vector_store_ids": [
                                            "string"
                                        ],
                                        "vector_stores": [
                                            {
                                                "file_ids": [
                                                    "string"
                                                ],
                                                "chunking_strategy": {
                                                    "type": "auto"
                                                },
                                                "metadata": {}
                                            }
                                        ]
                                    }
                                },
                                "metadata": {}
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/threadObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "thread",
                                    "created_at": 0,
                                    "tool_resources": {
                                        "code_interpreter": {
                                            "file_ids": [
                                                "string"
                                            ]
                                        },
                                        "file_search": {
                                            "vector_store_ids": [
                                                "string"
                                            ]
                                        }
                                    },
                                    "metadata": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/threads/{thread_id}": {
            "get": {
                "tags": [
                    "Assistants"
                ],
                "summary": "Retrieves a thread.",
                "description": "Retrieves a thread.",
                "operationId": "Get_Thread",
                "parameters": [
                    {
                        "name": "thread_id",
                        "in": "path",
                        "description": "The ID of the thread to retrieve.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/threadObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "thread",
                                    "created_at": 0,
                                    "tool_resources": {
                                        "code_interpreter": {
                                            "file_ids": [
                                                "string"
                                            ]
                                        },
                                        "file_search": {
                                            "vector_store_ids": [
                                                "string"
                                            ]
                                        }
                                    },
                                    "metadata": {}
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Assistants"
                ],
                "summary": "Modifies a thread.",
                "description": "Modifies a thread.",
                "operationId": "Modify_Thread",
                "parameters": [
                    {
                        "name": "thread_id",
                        "in": "path",
                        "description": "The ID of the thread to modify. Only the `metadata` can be modified.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/modifyThreadRequest"
                            },
                            "example": {
                                "tool_resources": {
                                    "code_interpreter": {
                                        "file_ids": [
                                            "string"
                                        ]
                                    },
                                    "file_search": {
                                        "vector_store_ids": [
                                            "string"
                                        ]
                                    }
                                },
                                "metadata": {}
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/threadObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "thread",
                                    "created_at": 0,
                                    "tool_resources": {
                                        "code_interpreter": {
                                            "file_ids": [
                                                "string"
                                            ]
                                        },
                                        "file_search": {
                                            "vector_store_ids": [
                                                "string"
                                            ]
                                        }
                                    },
                                    "metadata": {}
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Assistants"
                ],
                "summary": "Delete a thread.",
                "description": "Delete a thread.",
                "operationId": "Delete_Thread",
                "parameters": [
                    {
                        "name": "thread_id",
                        "in": "path",
                        "description": "The ID of the thread to delete.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/deleteThreadResponse"
                                },
                                "example": {
                                    "id": "string",
                                    "deleted": true,
                                    "object": "thread.deleted"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/threads/{thread_id}/messages": {
            "get": {
                "tags": [
                    "Assistants"
                ],
                "summary": "Returns a list of messages for a given thread.",
                "description": "Returns a list of messages for a given thread.",
                "operationId": "List_Messages",
                "parameters": [
                    {
                        "name": "thread_id",
                        "in": "path",
                        "description": "The ID of the [thread](/docs/api-reference/threads) the messages belong to.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
                        "schema": {
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string",
                            "default": "desc",
                            "x-ms-enum": {
                                "name": "ListMessagesOrder",
                                "modelAsString": true,
                                "values": [
                                    {
                                        "value": "asc",
                                        "description": "Order results in ascending order"
                                    },
                                    {
                                        "value": "desc",
                                        "description": "Order results in descending order"
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "in": "query",
                        "description": "Filter messages by the run ID that generated them.\n",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/listMessagesResponse"
                                },
                                "example": {
                                    "object": "list",
                                    "data": [
                                        {
                                            "id": "string",
                                            "object": "thread.message",
                                            "created_at": 0,
                                            "thread_id": "string",
                                            "status": "in_progress",
                                            "incomplete_details": {
                                                "reason": "content_filter"
                                            },
                                            "completed_at": 0,
                                            "incomplete_at": 0,
                                            "role": "user",
                                            "content": [
                                                {
                                                    "type": "image_file",
                                                    "image_file": {
                                                        "file_id": "string"
                                                    }
                                                }
                                            ],
                                            "assistant_id": "string",
                                            "run_id": "string",
                                            "attachments": [
                                                {
                                                    "file_id": "string",
                                                    "tools": [
                                                        {
                                                            "type": "code_interpreter"
                                                        }
                                                    ]
                                                }
                                            ],
                                            "metadata": {}
                                        }
                                    ],
                                    "first_id": "string",
                                    "last_id": "string",
                                    "has_more": false
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Assistants"
                ],
                "summary": "Create a message.",
                "description": "Create a message.",
                "operationId": "Create_Message",
                "parameters": [
                    {
                        "name": "thread_id",
                        "in": "path",
                        "description": "The ID of the [thread](/docs/api-reference/threads) to create a message for.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createMessageRequest"
                            },
                            "example": {
                                "role": "user",
                                "content": "string",
                                "attachments": [
                                    {
                                        "file_id": "string",
                                        "tools": [
                                            {
                                                "type": "code_interpreter"
                                            }
                                        ]
                                    }
                                ],
                                "metadata": {}
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/messageObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "thread.message",
                                    "created_at": 0,
                                    "thread_id": "string",
                                    "status": "in_progress",
                                    "incomplete_details": {
                                        "reason": "content_filter"
                                    },
                                    "completed_at": 0,
                                    "incomplete_at": 0,
                                    "role": "user",
                                    "content": [
                                        {
                                            "type": "image_file",
                                            "image_file": {
                                                "file_id": "string"
                                            }
                                        }
                                    ],
                                    "assistant_id": "string",
                                    "run_id": "string",
                                    "attachments": [
                                        {
                                            "file_id": "string",
                                            "tools": [
                                                {
                                                    "type": "code_interpreter"
                                                }
                                            ]
                                        }
                                    ],
                                    "metadata": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/threads/{thread_id}/messages/{message_id}": {
            "get": {
                "tags": [
                    "Assistants"
                ],
                "summary": "Retrieve a message.",
                "description": "Retrieve a message.",
                "operationId": "Get_Message",
                "parameters": [
                    {
                        "name": "thread_id",
                        "in": "path",
                        "description": "The ID of the [thread](/docs/api-reference/threads) to which this message belongs.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "message_id",
                        "in": "path",
                        "description": "The ID of the message to retrieve.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/messageObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "thread.message",
                                    "created_at": 0,
                                    "thread_id": "string",
                                    "status": "in_progress",
                                    "incomplete_details": {
                                        "reason": "content_filter"
                                    },
                                    "completed_at": 0,
                                    "incomplete_at": 0,
                                    "role": "user",
                                    "content": [
                                        {
                                            "type": "image_file",
                                            "image_file": {
                                                "file_id": "string"
                                            }
                                        }
                                    ],
                                    "assistant_id": "string",
                                    "run_id": "string",
                                    "attachments": [
                                        {
                                            "file_id": "string",
                                            "tools": [
                                                {
                                                    "type": "code_interpreter"
                                                }
                                            ]
                                        }
                                    ],
                                    "metadata": {}
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Assistants"
                ],
                "summary": "Modifies a message.",
                "description": "Modifies a message.",
                "operationId": "Modify_Message",
                "parameters": [
                    {
                        "name": "thread_id",
                        "in": "path",
                        "description": "The ID of the thread to which this message belongs.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "message_id",
                        "in": "path",
                        "description": "The ID of the message to modify.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/modifyMessageRequest"
                            },
                            "example": {
                                "metadata": {}
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/messageObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "thread.message",
                                    "created_at": 0,
                                    "thread_id": "string",
                                    "status": "in_progress",
                                    "incomplete_details": {
                                        "reason": "content_filter"
                                    },
                                    "completed_at": 0,
                                    "incomplete_at": 0,
                                    "role": "user",
                                    "content": [
                                        {
                                            "type": "image_file",
                                            "image_file": {
                                                "file_id": "string"
                                            }
                                        }
                                    ],
                                    "assistant_id": "string",
                                    "run_id": "string",
                                    "attachments": [
                                        {
                                            "file_id": "string",
                                            "tools": [
                                                {
                                                    "type": "code_interpreter"
                                                }
                                            ]
                                        }
                                    ],
                                    "metadata": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/threads/runs": {
            "post": {
                "tags": [
                    "Assistants"
                ],
                "summary": "Create a thread and run it in one request.",
                "description": "Create a thread and run it in one request.",
                "operationId": "Create_Thread_And_Run",
                "parameters": [
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createThreadAndRunRequest"
                            },
                            "example": {
                                "assistant_id": "string",
                                "thread": {
                                    "messages": [
                                        {
                                            "role": "user",
                                            "content": "string",
                                            "attachments": [
                                                {
                                                    "file_id": "string",
                                                    "tools": [
                                                        {
                                                            "type": "code_interpreter"
                                                        }
                                                    ]
                                                }
                                            ],
                                            "metadata": {}
                                        }
                                    ],
                                    "tool_resources": {
                                        "code_interpreter": {
                                            "file_ids": [
                                                "string"
                                            ]
                                        },
                                        "file_search": {
                                            "vector_store_ids": [
                                                "string"
                                            ],
                                            "vector_stores": [
                                                {
                                                    "file_ids": [
                                                        "string"
                                                    ],
                                                    "chunking_strategy": {
                                                        "type": "auto"
                                                    },
                                                    "metadata": {}
                                                }
                                            ]
                                        }
                                    },
                                    "metadata": {}
                                },
                                "model": "string",
                                "instructions": "string",
                                "tools": [
                                    {
                                        "type": "code_interpreter"
                                    }
                                ],
                                "tool_resources": {
                                    "code_interpreter": {
                                        "file_ids": [
                                            "string"
                                        ]
                                    },
                                    "file_search": {
                                        "vector_store_ids": [
                                            "string"
                                        ]
                                    }
                                },
                                "metadata": {},
                                "temperature": 1,
                                "top_p": 1,
                                "stream": true,
                                "stream_options": null,
                                "max_prompt_tokens": 0,
                                "max_completion_tokens": 0,
                                "truncation_strategy": {
                                    "type": "auto",
                                    "last_messages": 0
                                },
                                "tool_choice": {},
                                "parallel_tool_calls": true,
                                "response_format": {}
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/runObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "thread.run",
                                    "created_at": 0,
                                    "thread_id": "string",
                                    "assistant_id": "string",
                                    "status": "queued",
                                    "required_action": {
                                        "type": "submit_tool_outputs",
                                        "submit_tool_outputs": {
                                            "tool_calls": [
                                                {
                                                    "id": "string",
                                                    "type": "function",
                                                    "function": {
                                                        "name": "string",
                                                        "arguments": "string"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    "last_error": {
                                        "code": "server_error",
                                        "message": "string"
                                    },
                                    "expires_at": 0,
                                    "started_at": 0,
                                    "cancelled_at": 0,
                                    "failed_at": 0,
                                    "completed_at": 0,
                                    "incomplete_details": {
                                        "reason": "max_completion_tokens"
                                    },
                                    "model": "string",
                                    "instructions": "string",
                                    "tools": [
                                        {
                                            "type": "code_interpreter"
                                        }
                                    ],
                                    "metadata": {},
                                    "usage": {
                                        "completion_tokens": 0,
                                        "prompt_tokens": 0,
                                        "total_tokens": 0
                                    },
                                    "temperature": 0,
                                    "top_p": 0,
                                    "max_prompt_tokens": 0,
                                    "max_completion_tokens": 0,
                                    "truncation_strategy": {
                                        "type": "auto",
                                        "last_messages": 0
                                    },
                                    "tool_choice": {},
                                    "parallel_tool_calls": true,
                                    "response_format": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/threads/{thread_id}/runs": {
            "get": {
                "tags": [
                    "Assistants"
                ],
                "summary": "Returns a list of runs belonging to a thread.",
                "description": "Returns a list of runs belonging to a thread.",
                "operationId": "List_Runs",
                "parameters": [
                    {
                        "name": "thread_id",
                        "in": "path",
                        "description": "The ID of the thread the run belongs to.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
                        "schema": {
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string",
                            "default": "desc",
                            "x-ms-enum": {
                                "name": "ListRunsOrder",
                                "modelAsString": true,
                                "values": [
                                    {
                                        "value": "asc",
                                        "description": "Order results in ascending order"
                                    },
                                    {
                                        "value": "desc",
                                        "description": "Order results in descending order"
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/listRunsResponse"
                                },
                                "example": {
                                    "object": "list",
                                    "data": [
                                        {
                                            "id": "string",
                                            "object": "thread.run",
                                            "created_at": 0,
                                            "thread_id": "string",
                                            "assistant_id": "string",
                                            "status": "queued",
                                            "required_action": {
                                                "type": "submit_tool_outputs",
                                                "submit_tool_outputs": {
                                                    "tool_calls": [
                                                        {
                                                            "id": "string",
                                                            "type": "function",
                                                            "function": {
                                                                "name": "string",
                                                                "arguments": "string"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            "last_error": {
                                                "code": "server_error",
                                                "message": "string"
                                            },
                                            "expires_at": 0,
                                            "started_at": 0,
                                            "cancelled_at": 0,
                                            "failed_at": 0,
                                            "completed_at": 0,
                                            "incomplete_details": {
                                                "reason": "max_completion_tokens"
                                            },
                                            "model": "string",
                                            "instructions": "string",
                                            "tools": [
                                                {
                                                    "type": "code_interpreter"
                                                }
                                            ],
                                            "metadata": {},
                                            "usage": {
                                                "completion_tokens": 0,
                                                "prompt_tokens": 0,
                                                "total_tokens": 0
                                            },
                                            "temperature": 0,
                                            "top_p": 0,
                                            "max_prompt_tokens": 0,
                                            "max_completion_tokens": 0,
                                            "truncation_strategy": {
                                                "type": "auto",
                                                "last_messages": 0
                                            },
                                            "tool_choice": {},
                                            "parallel_tool_calls": true,
                                            "response_format": {}
                                        }
                                    ],
                                    "first_id": "string",
                                    "last_id": "string",
                                    "has_more": false
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Assistants"
                ],
                "summary": "Create a run.",
                "description": "Create a run.",
                "operationId": "Create_Run",
                "parameters": [
                    {
                        "name": "thread_id",
                        "in": "path",
                        "description": "The ID of the thread to run.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    },
                    {
                        "name": "include[]",
                        "in": "query",
                        "description": "A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "step_details.tool_calls[*].file_search.results[*].content"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "Include",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "step_details.tool_calls[*].file_search.results[*].content"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createRunRequest"
                            },
                            "example": {
                                "assistant_id": "string",
                                "model": "string",
                                "instructions": "string",
                                "additional_instructions": "string",
                                "additional_messages": [
                                    {
                                        "role": "user",
                                        "content": "string",
                                        "attachments": [
                                            {
                                                "file_id": "string",
                                                "tools": [
                                                    {
                                                        "type": "code_interpreter"
                                                    }
                                                ]
                                            }
                                        ],
                                        "metadata": {}
                                    }
                                ],
                                "tools": [
                                    {
                                        "type": "code_interpreter"
                                    }
                                ],
                                "metadata": {},
                                "temperature": 1,
                                "top_p": 1,
                                "stream": true,
                                "max_prompt_tokens": 0,
                                "max_completion_tokens": 0,
                                "truncation_strategy": {
                                    "type": "auto",
                                    "last_messages": 0
                                },
                                "tool_choice": {},
                                "parallel_tool_calls": true,
                                "response_format": {}
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/runObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "thread.run",
                                    "created_at": 0,
                                    "thread_id": "string",
                                    "assistant_id": "string",
                                    "status": "queued",
                                    "required_action": {
                                        "type": "submit_tool_outputs",
                                        "submit_tool_outputs": {
                                            "tool_calls": [
                                                {
                                                    "id": "string",
                                                    "type": "function",
                                                    "function": {
                                                        "name": "string",
                                                        "arguments": "string"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    "last_error": {
                                        "code": "server_error",
                                        "message": "string"
                                    },
                                    "expires_at": 0,
                                    "started_at": 0,
                                    "cancelled_at": 0,
                                    "failed_at": 0,
                                    "completed_at": 0,
                                    "incomplete_details": {
                                        "reason": "max_completion_tokens"
                                    },
                                    "model": "string",
                                    "instructions": "string",
                                    "tools": [
                                        {
                                            "type": "code_interpreter"
                                        }
                                    ],
                                    "metadata": {},
                                    "usage": {
                                        "completion_tokens": 0,
                                        "prompt_tokens": 0,
                                        "total_tokens": 0
                                    },
                                    "temperature": 0,
                                    "top_p": 0,
                                    "max_prompt_tokens": 0,
                                    "max_completion_tokens": 0,
                                    "truncation_strategy": {
                                        "type": "auto",
                                        "last_messages": 0
                                    },
                                    "tool_choice": {},
                                    "parallel_tool_calls": true,
                                    "response_format": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/threads/{thread_id}/runs/{run_id}": {
            "get": {
                "tags": [
                    "Assistants"
                ],
                "summary": "Retrieves a run.",
                "description": "Retrieves a run.",
                "operationId": "Get_Run",
                "parameters": [
                    {
                        "name": "thread_id",
                        "in": "path",
                        "description": "The ID of the [thread](/docs/api-reference/threads) that was run.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "in": "path",
                        "description": "The ID of the run to retrieve.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/runObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "thread.run",
                                    "created_at": 0,
                                    "thread_id": "string",
                                    "assistant_id": "string",
                                    "status": "queued",
                                    "required_action": {
                                        "type": "submit_tool_outputs",
                                        "submit_tool_outputs": {
                                            "tool_calls": [
                                                {
                                                    "id": "string",
                                                    "type": "function",
                                                    "function": {
                                                        "name": "string",
                                                        "arguments": "string"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    "last_error": {
                                        "code": "server_error",
                                        "message": "string"
                                    },
                                    "expires_at": 0,
                                    "started_at": 0,
                                    "cancelled_at": 0,
                                    "failed_at": 0,
                                    "completed_at": 0,
                                    "incomplete_details": {
                                        "reason": "max_completion_tokens"
                                    },
                                    "model": "string",
                                    "instructions": "string",
                                    "tools": [
                                        {
                                            "type": "code_interpreter"
                                        }
                                    ],
                                    "metadata": {},
                                    "usage": {
                                        "completion_tokens": 0,
                                        "prompt_tokens": 0,
                                        "total_tokens": 0
                                    },
                                    "temperature": 0,
                                    "top_p": 0,
                                    "max_prompt_tokens": 0,
                                    "max_completion_tokens": 0,
                                    "truncation_strategy": {
                                        "type": "auto",
                                        "last_messages": 0
                                    },
                                    "tool_choice": {},
                                    "parallel_tool_calls": true,
                                    "response_format": {}
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Assistants"
                ],
                "summary": "Modifies a run.",
                "description": "Modifies a run.",
                "operationId": "Modify_Run",
                "parameters": [
                    {
                        "name": "thread_id",
                        "in": "path",
                        "description": "The ID of the [thread](/docs/api-reference/threads) that was run.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "in": "path",
                        "description": "The ID of the run to modify.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/modifyRunRequest"
                            },
                            "example": {
                                "metadata": {}
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/runObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "thread.run",
                                    "created_at": 0,
                                    "thread_id": "string",
                                    "assistant_id": "string",
                                    "status": "queued",
                                    "required_action": {
                                        "type": "submit_tool_outputs",
                                        "submit_tool_outputs": {
                                            "tool_calls": [
                                                {
                                                    "id": "string",
                                                    "type": "function",
                                                    "function": {
                                                        "name": "string",
                                                        "arguments": "string"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    "last_error": {
                                        "code": "server_error",
                                        "message": "string"
                                    },
                                    "expires_at": 0,
                                    "started_at": 0,
                                    "cancelled_at": 0,
                                    "failed_at": 0,
                                    "completed_at": 0,
                                    "incomplete_details": {
                                        "reason": "max_completion_tokens"
                                    },
                                    "model": "string",
                                    "instructions": "string",
                                    "tools": [
                                        {
                                            "type": "code_interpreter"
                                        }
                                    ],
                                    "metadata": {},
                                    "usage": {
                                        "completion_tokens": 0,
                                        "prompt_tokens": 0,
                                        "total_tokens": 0
                                    },
                                    "temperature": 0,
                                    "top_p": 0,
                                    "max_prompt_tokens": 0,
                                    "max_completion_tokens": 0,
                                    "truncation_strategy": {
                                        "type": "auto",
                                        "last_messages": 0
                                    },
                                    "tool_choice": {},
                                    "parallel_tool_calls": true,
                                    "response_format": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/threads/{thread_id}/runs/{run_id}/submit_tool_outputs": {
            "post": {
                "tags": [
                    "Assistants"
                ],
                "summary": "When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.\n",
                "description": "When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.\n",
                "operationId": "Submit_Tool_Outputs_To_Run",
                "parameters": [
                    {
                        "name": "thread_id",
                        "in": "path",
                        "description": "The ID of the [thread](/docs/api-reference/threads) to which this run belongs.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "in": "path",
                        "description": "The ID of the run that requires the tool output submission.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/submitToolOutputsRunRequest"
                            },
                            "example": {
                                "tool_outputs": [
                                    {
                                        "tool_call_id": "string",
                                        "output": "string"
                                    }
                                ],
                                "stream": true
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/runObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "thread.run",
                                    "created_at": 0,
                                    "thread_id": "string",
                                    "assistant_id": "string",
                                    "status": "queued",
                                    "required_action": {
                                        "type": "submit_tool_outputs",
                                        "submit_tool_outputs": {
                                            "tool_calls": [
                                                {
                                                    "id": "string",
                                                    "type": "function",
                                                    "function": {
                                                        "name": "string",
                                                        "arguments": "string"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    "last_error": {
                                        "code": "server_error",
                                        "message": "string"
                                    },
                                    "expires_at": 0,
                                    "started_at": 0,
                                    "cancelled_at": 0,
                                    "failed_at": 0,
                                    "completed_at": 0,
                                    "incomplete_details": {
                                        "reason": "max_completion_tokens"
                                    },
                                    "model": "string",
                                    "instructions": "string",
                                    "tools": [
                                        {
                                            "type": "code_interpreter"
                                        }
                                    ],
                                    "metadata": {},
                                    "usage": {
                                        "completion_tokens": 0,
                                        "prompt_tokens": 0,
                                        "total_tokens": 0
                                    },
                                    "temperature": 0,
                                    "top_p": 0,
                                    "max_prompt_tokens": 0,
                                    "max_completion_tokens": 0,
                                    "truncation_strategy": {
                                        "type": "auto",
                                        "last_messages": 0
                                    },
                                    "tool_choice": {},
                                    "parallel_tool_calls": true,
                                    "response_format": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/threads/{thread_id}/runs/{run_id}/cancel": {
            "post": {
                "tags": [
                    "Assistants"
                ],
                "summary": "Cancels a run that is `in_progress`.",
                "description": "Cancels a run that is `in_progress`.",
                "operationId": "Cancel_Run",
                "parameters": [
                    {
                        "name": "thread_id",
                        "in": "path",
                        "description": "The ID of the thread to which this run belongs.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "in": "path",
                        "description": "The ID of the run to cancel.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/runObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "thread.run",
                                    "created_at": 0,
                                    "thread_id": "string",
                                    "assistant_id": "string",
                                    "status": "queued",
                                    "required_action": {
                                        "type": "submit_tool_outputs",
                                        "submit_tool_outputs": {
                                            "tool_calls": [
                                                {
                                                    "id": "string",
                                                    "type": "function",
                                                    "function": {
                                                        "name": "string",
                                                        "arguments": "string"
                                                    }
                                                }
                                            ]
                                        }
                                    },
                                    "last_error": {
                                        "code": "server_error",
                                        "message": "string"
                                    },
                                    "expires_at": 0,
                                    "started_at": 0,
                                    "cancelled_at": 0,
                                    "failed_at": 0,
                                    "completed_at": 0,
                                    "incomplete_details": {
                                        "reason": "max_completion_tokens"
                                    },
                                    "model": "string",
                                    "instructions": "string",
                                    "tools": [
                                        {
                                            "type": "code_interpreter"
                                        }
                                    ],
                                    "metadata": {},
                                    "usage": {
                                        "completion_tokens": 0,
                                        "prompt_tokens": 0,
                                        "total_tokens": 0
                                    },
                                    "temperature": 0,
                                    "top_p": 0,
                                    "max_prompt_tokens": 0,
                                    "max_completion_tokens": 0,
                                    "truncation_strategy": {
                                        "type": "auto",
                                        "last_messages": 0
                                    },
                                    "tool_choice": {},
                                    "parallel_tool_calls": true,
                                    "response_format": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/threads/{thread_id}/runs/{run_id}/steps": {
            "get": {
                "tags": [
                    "Assistants"
                ],
                "summary": "Returns a list of run steps belonging to a run.",
                "description": "Returns a list of run steps belonging to a run.",
                "operationId": "List_Run_Steps",
                "parameters": [
                    {
                        "name": "thread_id",
                        "in": "path",
                        "description": "The ID of the thread the run and run steps belong to.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "in": "path",
                        "description": "The ID of the run the run steps belong to.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
                        "schema": {
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string",
                            "default": "desc",
                            "x-ms-enum": {
                                "name": "ListRunStepsOrder",
                                "modelAsString": true,
                                "values": [
                                    {
                                        "value": "asc",
                                        "description": "Order results in ascending order"
                                    },
                                    {
                                        "value": "desc",
                                        "description": "Order results in descending order"
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "include[]",
                        "in": "query",
                        "description": "A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.\n",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "step_details.tool_calls[*].file_search.results[*].content"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "Include",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "step_details.tool_calls[*].file_search.results[*].content"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/listRunStepsResponse"
                                },
                                "example": {
                                    "object": "list",
                                    "data": [
                                        {
                                            "id": "string",
                                            "object": "assistant.run.step",
                                            "created_at": 0,
                                            "assistant_id": "string",
                                            "thread_id": "string",
                                            "run_id": "string",
                                            "type": "message_creation",
                                            "status": "in_progress",
                                            "step_details": {
                                                "type": "message_creation",
                                                "message_creation": {
                                                    "message_id": "string"
                                                }
                                            },
                                            "last_error": {
                                                "code": "server_error",
                                                "message": "string"
                                            },
                                            "expired_at": 0,
                                            "cancelled_at": 0,
                                            "failed_at": 0,
                                            "completed_at": 0,
                                            "metadata": {}
                                        }
                                    ],
                                    "first_id": "string",
                                    "last_id": "string",
                                    "has_more": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/threads/{thread_id}/runs/{run_id}/steps/{step_id}": {
            "get": {
                "tags": [
                    "Assistants"
                ],
                "summary": "Retrieves a run step.",
                "description": "Retrieves a run step.",
                "operationId": "Get_Run_Step",
                "parameters": [
                    {
                        "name": "thread_id",
                        "in": "path",
                        "description": "The ID of the thread to which the run and run step belongs.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "run_id",
                        "in": "path",
                        "description": "The ID of the run to which the run step belongs.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "step_id",
                        "in": "path",
                        "description": "The ID of the run step to retrieve.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "api version",
                            "example": "2025-04-01-preview"
                        }
                    },
                    {
                        "name": "include[]",
                        "in": "query",
                        "description": "A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.\n",
                        "schema": {
                            "type": "array",
                            "items": {
                                "enum": [
                                    "step_details.tool_calls[*].file_search.results[*].content"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "Include",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "step_details.tool_calls[*].file_search.results[*].content"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/runStepObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "assistant.run.step",
                                    "created_at": 0,
                                    "assistant_id": "string",
                                    "thread_id": "string",
                                    "run_id": "string",
                                    "type": "message_creation",
                                    "status": "in_progress",
                                    "step_details": {
                                        "type": "message_creation",
                                        "message_creation": {
                                            "message_id": "string"
                                        }
                                    },
                                    "last_error": {
                                        "code": "server_error",
                                        "message": "string"
                                    },
                                    "expired_at": 0,
                                    "cancelled_at": 0,
                                    "failed_at": 0,
                                    "completed_at": 0,
                                    "metadata": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/vector_stores": {
            "get": {
                "tags": [
                    "Vector Stores"
                ],
                "summary": "Returns a list of vector stores.",
                "description": "Returns a list of vector stores.",
                "operationId": "List_Vector_Stores",
                "parameters": [
                    {
                        "name": "api-version",
                        "in": "query",
                        "description": "api version",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "2025-04-01-preview"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
                        "schema": {
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string",
                            "default": "desc",
                            "x-ms-enum": {
                                "name": "ListVectorStoresOrder",
                                "modelAsString": true,
                                "values": [
                                    {
                                        "value": "asc"
                                    },
                                    {
                                        "value": "desc"
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/listVectorStoresResponse"
                                },
                                "example": {
                                    "object": "list",
                                    "data": [
                                        {
                                            "id": "string",
                                            "object": "vector_store",
                                            "created_at": 0,
                                            "name": "string",
                                            "usage_bytes": 0,
                                            "file_counts": {
                                                "in_progress": 0,
                                                "completed": 0,
                                                "failed": 0,
                                                "cancelled": 0,
                                                "total": 0
                                            },
                                            "status": "expired",
                                            "expires_after": {
                                                "anchor": "last_active_at",
                                                "days": 0
                                            },
                                            "expires_at": 0,
                                            "last_active_at": 0,
                                            "metadata": {}
                                        }
                                    ],
                                    "first_id": "vs_abc123",
                                    "last_id": "vs_abc456",
                                    "has_more": false
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Vector Stores"
                ],
                "summary": "Create a vector store.",
                "description": "Create a vector store.",
                "operationId": "Create_Vector_Store",
                "parameters": [
                    {
                        "name": "api-version",
                        "in": "query",
                        "description": "api version",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createVectorStoreRequest"
                            },
                            "example": {
                                "file_ids": [
                                    "string"
                                ],
                                "name": "string",
                                "expires_after": {
                                    "anchor": "last_active_at",
                                    "days": 0
                                },
                                "chunking_strategy": {
                                    "type": "auto"
                                },
                                "metadata": {}
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vectorStoreObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "vector_store",
                                    "created_at": 0,
                                    "name": "string",
                                    "usage_bytes": 0,
                                    "file_counts": {
                                        "in_progress": 0,
                                        "completed": 0,
                                        "failed": 0,
                                        "cancelled": 0,
                                        "total": 0
                                    },
                                    "status": "expired",
                                    "expires_after": {
                                        "anchor": "last_active_at",
                                        "days": 0
                                    },
                                    "expires_at": 0,
                                    "last_active_at": 0,
                                    "metadata": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/vector_stores/{vector_store_id}": {
            "get": {
                "tags": [
                    "Vector Stores"
                ],
                "summary": "Retrieves a vector store.",
                "description": "Retrieves a vector store.",
                "operationId": "Get_Vector_Store",
                "parameters": [
                    {
                        "name": "vector_store_id",
                        "in": "path",
                        "description": "The ID of the vector store to retrieve.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "description": "api version",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vectorStoreObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "vector_store",
                                    "created_at": 0,
                                    "name": "string",
                                    "usage_bytes": 0,
                                    "file_counts": {
                                        "in_progress": 0,
                                        "completed": 0,
                                        "failed": 0,
                                        "cancelled": 0,
                                        "total": 0
                                    },
                                    "status": "expired",
                                    "expires_after": {
                                        "anchor": "last_active_at",
                                        "days": 0
                                    },
                                    "expires_at": 0,
                                    "last_active_at": 0,
                                    "metadata": {}
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Vector Stores"
                ],
                "summary": "Modifies a vector store.",
                "description": "Modifies a vector store.",
                "operationId": "Modify_Vector_Store",
                "parameters": [
                    {
                        "name": "vector_store_id",
                        "in": "path",
                        "description": "The ID of the vector store to modify.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "description": "api version",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/updateVectorStoreRequest"
                            },
                            "example": {
                                "name": "string",
                                "expires_after": {
                                    "anchor": "last_active_at",
                                    "days": 0
                                },
                                "metadata": {}
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vectorStoreObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "vector_store",
                                    "created_at": 0,
                                    "name": "string",
                                    "usage_bytes": 0,
                                    "file_counts": {
                                        "in_progress": 0,
                                        "completed": 0,
                                        "failed": 0,
                                        "cancelled": 0,
                                        "total": 0
                                    },
                                    "status": "expired",
                                    "expires_after": {
                                        "anchor": "last_active_at",
                                        "days": 0
                                    },
                                    "expires_at": 0,
                                    "last_active_at": 0,
                                    "metadata": {}
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Vector Stores"
                ],
                "summary": "Delete a vector store.",
                "description": "Delete a vector store.",
                "operationId": "Delete_Vector_Store",
                "parameters": [
                    {
                        "name": "vector_store_id",
                        "in": "path",
                        "description": "The ID of the vector store to delete.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "description": "api version",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/deleteVectorStoreResponse"
                                },
                                "example": {
                                    "id": "string",
                                    "deleted": true,
                                    "object": "vector_store.deleted"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/vector_stores/{vector_store_id}/files": {
            "get": {
                "tags": [
                    "Vector Stores"
                ],
                "summary": "Returns a list of vector store files.",
                "description": "Returns a list of vector store files.",
                "operationId": "List_Vector_Store_Files",
                "parameters": [
                    {
                        "name": "vector_store_id",
                        "in": "path",
                        "description": "The ID of the vector store that the files belong to.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "description": "api version",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "2025-04-01-preview"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
                        "schema": {
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string",
                            "default": "desc",
                            "x-ms-enum": {
                                "name": "ListVectorStoreFilesOrder",
                                "modelAsString": true,
                                "values": [
                                    {
                                        "value": "asc"
                                    },
                                    {
                                        "value": "desc"
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.",
                        "schema": {
                            "enum": [
                                "in_progress",
                                "completed",
                                "failed",
                                "cancelled"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                                "name": "ListVectorStoreFilesFilter",
                                "modelAsString": true,
                                "values": [
                                    {
                                        "value": "in_progress"
                                    },
                                    {
                                        "value": "completed"
                                    },
                                    {
                                        "value": "failed"
                                    },
                                    {
                                        "value": "cancelled"
                                    }
                                ]
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/listVectorStoreFilesResponse"
                                },
                                "example": {
                                    "object": "list",
                                    "data": [
                                        {
                                            "id": "string",
                                            "object": "vector_store.file",
                                            "usage_bytes": 0,
                                            "created_at": 0,
                                            "vector_store_id": "string",
                                            "status": "in_progress",
                                            "last_error": {
                                                "code": "server_error",
                                                "message": "string"
                                            },
                                            "chunking_strategy": {
                                                "type": "auto"
                                            }
                                        }
                                    ],
                                    "first_id": "file-abc123",
                                    "last_id": "file-abc456",
                                    "has_more": false
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Vector Stores"
                ],
                "summary": "Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).",
                "description": "Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).",
                "operationId": "Create_Vector_Store_File",
                "parameters": [
                    {
                        "name": "vector_store_id",
                        "in": "path",
                        "description": "The ID of the vector store for which to create a File.\n",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "vs_abc123"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "description": "api version",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createVectorStoreFileRequest"
                            },
                            "example": {
                                "file_id": "string",
                                "chunking_strategy": {
                                    "type": "auto"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vectorStoreFileObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "vector_store.file",
                                    "usage_bytes": 0,
                                    "created_at": 0,
                                    "vector_store_id": "string",
                                    "status": "in_progress",
                                    "last_error": {
                                        "code": "server_error",
                                        "message": "string"
                                    },
                                    "chunking_strategy": {
                                        "type": "auto"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/vector_stores/{vector_store_id}/files/{file_id}": {
            "get": {
                "tags": [
                    "Vector Stores"
                ],
                "summary": "Retrieves a vector store file.",
                "description": "Retrieves a vector store file.",
                "operationId": "Get_Vector_Store_File",
                "parameters": [
                    {
                        "name": "vector_store_id",
                        "in": "path",
                        "description": "The ID of the vector store that the file belongs to.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "vs_abc123"
                        }
                    },
                    {
                        "name": "file_id",
                        "in": "path",
                        "description": "The ID of the file being retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "file-abc123"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "description": "api version",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vectorStoreFileObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "vector_store.file",
                                    "usage_bytes": 0,
                                    "created_at": 0,
                                    "vector_store_id": "string",
                                    "status": "in_progress",
                                    "last_error": {
                                        "code": "server_error",
                                        "message": "string"
                                    },
                                    "chunking_strategy": {
                                        "type": "auto"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Vector Stores"
                ],
                "summary": "Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.",
                "description": "Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.",
                "operationId": "Delete_Vector_Store_File",
                "parameters": [
                    {
                        "name": "vector_store_id",
                        "in": "path",
                        "description": "The ID of the vector store that the file belongs to.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "file_id",
                        "in": "path",
                        "description": "The ID of the file to delete.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "description": "api version",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/deleteVectorStoreFileResponse"
                                },
                                "example": {
                                    "id": "string",
                                    "deleted": true,
                                    "object": "vector_store.file.deleted"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Vector Stores"
                ],
                "summary": "Update attributes on a vector store file.",
                "description": "Update attributes on a vector store file.",
                "operationId": "updateVectorStoreFileAttributes",
                "parameters": [
                    {
                        "name": "vector_store_id",
                        "in": "path",
                        "description": "The ID of the vector store the file belongs to.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "vs_abc123"
                        }
                    },
                    {
                        "name": "file_id",
                        "in": "path",
                        "description": "The ID of the file to update attributes.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "file-abc123"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateVectorStoreFileAttributesRequest"
                            },
                            "example": {
                                "attributes": {}
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vectorStoreFileObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "vector_store.file",
                                    "usage_bytes": 0,
                                    "created_at": 0,
                                    "vector_store_id": "string",
                                    "status": "in_progress",
                                    "last_error": {
                                        "code": "server_error",
                                        "message": "string"
                                    },
                                    "chunking_strategy": {
                                        "type": "auto"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/vector_stores/{vector_store_id}/files/{file_id}/content": {
            "get": {
                "tags": [
                    "Vector Stores"
                ],
                "summary": "Retrieve the parsed contents of a vector store file.",
                "description": "Retrieve the parsed contents of a vector store file.",
                "operationId": "retrieveVectorStoreFileContent",
                "parameters": [
                    {
                        "name": "vector_store_id",
                        "in": "path",
                        "description": "The ID of the vector store.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "vs_abc123"
                        }
                    },
                    {
                        "name": "file_id",
                        "in": "path",
                        "description": "The ID of the file within the vector store.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "file-abc123"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VectorStoreFileContentResponse"
                                },
                                "example": {
                                    "object": "vector_store.file_content.page",
                                    "data": [
                                        {
                                            "type": "string",
                                            "text": "string"
                                        }
                                    ],
                                    "has_more": true,
                                    "next_page": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/vector_stores/{vector_store_id}/search": {
            "post": {
                "tags": [
                    "Vector Stores"
                ],
                "summary": "Search a vector store for relevant chunks based on a query and file attributes filter.",
                "description": "Search a vector store for relevant chunks based on a query and file attributes filter.",
                "operationId": "searchVectorStore",
                "parameters": [
                    {
                        "name": "vector_store_id",
                        "in": "path",
                        "description": "The ID of the vector store to search.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "vs_abc123"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VectorStoreSearchRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/VectorStoreSearchResultsPage"
                                },
                                "example": {
                                    "object": "vector_store.search_results.page",
                                    "search_query": [
                                        "string"
                                    ],
                                    "data": [
                                        {
                                            "file_id": "string",
                                            "filename": "string",
                                            "score": 0,
                                            "attributes": {},
                                            "content": [
                                                {
                                                    "type": "text",
                                                    "text": "string"
                                                }
                                            ]
                                        }
                                    ],
                                    "has_more": true,
                                    "next_page": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/vector_stores/{vector_store_id}/file_batches": {
            "post": {
                "tags": [
                    "Vector Stores"
                ],
                "summary": "Create a vector store file batch.",
                "description": "Create a vector store file batch.",
                "operationId": "Create_Vector_Store_File_Batch",
                "parameters": [
                    {
                        "name": "vector_store_id",
                        "in": "path",
                        "description": "The ID of the vector store for which to create a File Batch.\n",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "vs_abc123"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "description": "api version",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createVectorStoreFileBatchRequest"
                            },
                            "example": {
                                "file_ids": [
                                    "string"
                                ],
                                "chunking_strategy": {
                                    "type": "auto"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vectorStoreFileBatchObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "vector_store.files_batch",
                                    "created_at": 0,
                                    "vector_store_id": "string",
                                    "status": "in_progress",
                                    "file_counts": {
                                        "in_progress": 0,
                                        "completed": 0,
                                        "failed": 0,
                                        "cancelled": 0,
                                        "total": 0
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/vector_stores/{vector_store_id}/file_batches/{batch_id}": {
            "get": {
                "tags": [
                    "Vector Stores"
                ],
                "summary": "Retrieves a vector store file batch.",
                "description": "Retrieves a vector store file batch.",
                "operationId": "Get_Vector_Store_File_Batch",
                "parameters": [
                    {
                        "name": "vector_store_id",
                        "in": "path",
                        "description": "The ID of the vector store that the file batch belongs to.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "vs_abc123"
                        }
                    },
                    {
                        "name": "batch_id",
                        "in": "path",
                        "description": "The ID of the file batch being retrieved.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "vs_b_abc123"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "description": "api version",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vectorStoreFileBatchObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "vector_store.files_batch",
                                    "created_at": 0,
                                    "vector_store_id": "string",
                                    "status": "in_progress",
                                    "file_counts": {
                                        "in_progress": 0,
                                        "completed": 0,
                                        "failed": 0,
                                        "cancelled": 0,
                                        "total": 0
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel": {
            "post": {
                "tags": [
                    "Vector Stores"
                ],
                "summary": "Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.",
                "description": "Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.",
                "operationId": "Cancel_Vector_Store_File_Batch",
                "parameters": [
                    {
                        "name": "vector_store_id",
                        "in": "path",
                        "description": "The ID of the vector store that the file batch belongs to.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "batch_id",
                        "in": "path",
                        "description": "The ID of the file batch to cancel.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "description": "api version",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "2025-04-01-preview"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vectorStoreFileBatchObject"
                                },
                                "example": {
                                    "id": "string",
                                    "object": "vector_store.files_batch",
                                    "created_at": 0,
                                    "vector_store_id": "string",
                                    "status": "in_progress",
                                    "file_counts": {
                                        "in_progress": 0,
                                        "completed": 0,
                                        "failed": 0,
                                        "cancelled": 0,
                                        "total": 0
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/vector_stores/{vector_store_id}/file_batches/{batch_id}/files": {
            "get": {
                "tags": [
                    "Vector Stores"
                ],
                "summary": "Returns a list of vector store files in a batch.",
                "description": "Returns a list of vector store files in a batch.",
                "operationId": "List_Vector_Store_File_Batch_Files",
                "parameters": [
                    {
                        "name": "vector_store_id",
                        "in": "path",
                        "description": "The ID of the vector store that the files belong to.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "batch_id",
                        "in": "path",
                        "description": "The ID of the file batch that the files belong to.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "api-version",
                        "in": "query",
                        "description": "api version",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "2025-04-01-preview"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n",
                        "schema": {
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n",
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string",
                            "default": "desc",
                            "x-ms-enum": {
                                "name": "ListVectorStoreFilesOrder",
                                "modelAsString": true,
                                "values": [
                                    {
                                        "value": "asc"
                                    },
                                    {
                                        "value": "desc"
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.",
                        "schema": {
                            "enum": [
                                "in_progress",
                                "completed",
                                "failed",
                                "cancelled"
                            ],
                            "type": "string",
                            "x-ms-enum": {
                                "name": "ListVectorStoreFilesFilter",
                                "modelAsString": true,
                                "values": [
                                    {
                                        "value": "in_progress"
                                    },
                                    {
                                        "value": "completed"
                                    },
                                    {
                                        "value": "failed"
                                    },
                                    {
                                        "value": "cancelled"
                                    }
                                ]
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/listVectorStoreFilesResponse"
                                },
                                "example": {
                                    "object": "list",
                                    "data": [
                                        {
                                            "id": "string",
                                            "object": "vector_store.file",
                                            "usage_bytes": 0,
                                            "created_at": 0,
                                            "vector_store_id": "string",
                                            "status": "in_progress",
                                            "last_error": {
                                                "code": "server_error",
                                                "message": "string"
                                            },
                                            "chunking_strategy": {
                                                "type": "auto"
                                            }
                                        }
                                    ],
                                    "first_id": "file-abc123",
                                    "last_id": "file-abc456",
                                    "has_more": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "/realtimeapi/sessions": {
            "post": {
                "tags": [
                    "Realtime"
                ],
                "summary": "Create an ephemeral API token for use in client-side applications with the Realtime API. Can be configured with the same session parameters as the `session.update` client event.\nIt responds with a session object, plus a `client_secret` key which contains a usable ephemeral API token that can be used",
                "description": "Create an ephemeral API token for use in client-side applications with the Realtime API. Can be configured with the same session parameters as the `session.update` client event.\nIt responds with a session object, plus a `client_secret` key which contains a usable ephemeral API token that can be used to authenticate browser clients for the Realtime API.\n",
                "operationId": "create_realtimeSession",
                "requestBody": {
                    "description": "Create an ephemeral API key with the given session configuration.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RealtimeSessionCreateRequest"
                            },
                            "example": {
                                "modalities": {},
                                "model": "string",
                                "instructions": "string",
                                "voice": "ash",
                                "input_audio_format": "pcm16",
                                "output_audio_format": "pcm16",
                                "input_audio_transcription": {
                                    "model": "string",
                                    "language": "string",
                                    "prompt": "string"
                                },
                                "turn_detection": {
                                    "type": "server_vad",
                                    "eagerness": "auto",
                                    "threshold": 0,
                                    "prefix_padding_ms": 0,
                                    "silence_duration_ms": 0,
                                    "create_response": true,
                                    "interrupt_response": true
                                },
                                "input_audio_noise_reduction": null,
                                "tools": [
                                    {
                                        "type": "function",
                                        "name": "string",
                                        "description": "string",
                                        "parameters": {}
                                    }
                                ],
                                "tool_choice": "auto",
                                "temperature": 0.8,
                                "max_response_output_tokens": {}
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Session created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RealtimeSessionCreateResponse"
                                },
                                "example": {
                                    "client_secret": {
                                        "value": "string",
                                        "expires_at": 0
                                    },
                                    "modalities": {},
                                    "instructions": "string",
                                    "voice": "ash",
                                    "input_audio_format": "string",
                                    "output_audio_format": "string",
                                    "input_audio_transcription": {
                                        "model": "string"
                                    },
                                    "turn_detection": {
                                        "type": "string",
                                        "threshold": 0,
                                        "prefix_padding_ms": 0,
                                        "silence_duration_ms": 0
                                    },
                                    "tools": [
                                        {
                                            "type": "function",
                                            "name": "string",
                                            "description": "string",
                                            "parameters": {}
                                        }
                                    ],
                                    "tool_choice": "string",
                                    "temperature": 0,
                                    "max_response_output_tokens": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/realtimeapi/transcription_sessions": {
            "post": {
                "tags": [
                    "Realtime"
                ],
                "summary": "Create an ephemeral API token for use in client-side applications with the Realtime API specifically for realtime transcriptions. \nCan be configured with the same session parameters as the `transcription_session.update` client event.\nIt responds with a session object, plus a `client_secret` key whic",
                "description": "Create an ephemeral API token for use in client-side applications with the Realtime API specifically for realtime transcriptions. \nCan be configured with the same session parameters as the `transcription_session.update` client event.\nIt responds with a session object, plus a `client_secret` key which contains a usable ephemeral API token that can be used to authenticate browser clients for the Realtime API.\n",
                "operationId": "create_transcriptionRealtimeSession",
                "requestBody": {
                    "description": "Create an ephemeral API key with the given session configuration.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RealtimeTranscriptionSessionCreateRequest"
                            },
                            "example": {
                                "modalities": {},
                                "input_audio_format": "pcm16",
                                "input_audio_transcription": {
                                    "model": "gpt-4o-transcribe",
                                    "language": "string",
                                    "prompt": "string"
                                },
                                "turn_detection": {
                                    "type": "server_vad",
                                    "eagerness": "auto",
                                    "threshold": 0,
                                    "prefix_padding_ms": 0,
                                    "silence_duration_ms": 0,
                                    "create_response": true,
                                    "interrupt_response": true
                                },
                                "input_audio_noise_reduction": null,
                                "include": [
                                    "string"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Session created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RealtimeTranscriptionSessionCreateResponse"
                                },
                                "example": {
                                    "client_secret": {
                                        "value": "string",
                                        "expires_at": 0
                                    },
                                    "modalities": {},
                                    "input_audio_format": "string",
                                    "input_audio_transcription": {
                                        "model": "gpt-4o-transcribe",
                                        "language": "string",
                                        "prompt": "string"
                                    },
                                    "turn_detection": {
                                        "type": "string",
                                        "threshold": 0,
                                        "prefix_padding_ms": 0,
                                        "silence_duration_ms": 0
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/responses": {
            "post": {
                "summary": "Creates a model response. Provide [text](/docs/guides/text) or\n[image](/docs/guides/images) inputs to generate [text](/docs/guides/text)\nor [JSON](/docs/guides/structured-outputs) outputs. Have the model call\nyour own [custom code](/docs/guides/function-calling) or use built-in\n[tools](/docs/guides/",
                "description": "Creates a model response. Provide [text](/docs/guides/text) or\n[image](/docs/guides/images) inputs to generate [text](/docs/guides/text)\nor [JSON](/docs/guides/structured-outputs) outputs. Have the model call\nyour own [custom code](/docs/guides/function-calling) or use built-in\n[tools](/docs/guides/tools) like [web search](/docs/guides/tools-web-search)\nor [file search](/docs/guides/tools-file-search) to use your own data\nas input for the model's response.\n",
                "operationId": "post-responses",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/createResponse"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/response"
                                }
                            },
                            "text/event-stream": {
                                "schema": {
                                    "$ref": "#/components/schemas/responseStreamEvent"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Service unavailable",
                        "headers": {
                            "apim-request-id": {
                                "description": "Request ID for troubleshooting purposes",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                },
                                "example": {
                                    "error": {
                                        "param": "string",
                                        "type": "string",
                                        "inner_error": {
                                            "code": "ResponsibleAIPolicyViolation",
                                            "content_filter_results": {
                                                "sexual": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "violence": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "hate": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "self_harm": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "profanity": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "custom_blocklists": {
                                                    "filtered": true,
                                                    "details": [
                                                        {
                                                            "filtered": true,
                                                            "id": "string"
                                                        }
                                                    ]
                                                },
                                                "error": {
                                                    "code": "string",
                                                    "message": "string"
                                                },
                                                "jailbreak": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "indirect_attack": {
                                                    "filtered": true,
                                                    "detected": true
                                                }
                                            }
                                        },
                                        "code": "string",
                                        "message": "string"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Service unavailable",
                        "headers": {
                            "apim-request-id": {
                                "description": "Request ID for troubleshooting purposes",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                },
                                "example": {
                                    "error": {
                                        "param": "string",
                                        "type": "string",
                                        "inner_error": {
                                            "code": "ResponsibleAIPolicyViolation",
                                            "content_filter_results": {
                                                "sexual": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "violence": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "hate": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "self_harm": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "profanity": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "custom_blocklists": {
                                                    "filtered": true,
                                                    "details": [
                                                        {
                                                            "filtered": true,
                                                            "id": "string"
                                                        }
                                                    ]
                                                },
                                                "error": {
                                                    "code": "string",
                                                    "message": "string"
                                                },
                                                "jailbreak": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "indirect_attack": {
                                                    "filtered": true,
                                                    "detected": true
                                                }
                                            }
                                        },
                                        "code": "string",
                                        "message": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/responses/{response_id}": {
            "get": {
                "summary": "Retrieves a model response with the given ID.\n",
                "description": "Retrieves a model response with the given ID.\n",
                "operationId": "get-responses-response_id",
                "parameters": [
                    {
                        "name": "response_id",
                        "in": "path",
                        "description": "The ID of the response to retrieve.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "resp_677efb5139a88190b512bc3fef8e535d"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Additional fields to include in the response. See the `include`\nparameter for Response creation above for more information.\n",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/includable"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/response"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Service unavailable",
                        "headers": {
                            "apim-request-id": {
                                "description": "Request ID for troubleshooting purposes",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                },
                                "example": {
                                    "error": {
                                        "param": "string",
                                        "type": "string",
                                        "inner_error": {
                                            "code": "ResponsibleAIPolicyViolation",
                                            "content_filter_results": {
                                                "sexual": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "violence": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "hate": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "self_harm": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "profanity": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "custom_blocklists": {
                                                    "filtered": true,
                                                    "details": [
                                                        {
                                                            "filtered": true,
                                                            "id": "string"
                                                        }
                                                    ]
                                                },
                                                "error": {
                                                    "code": "string",
                                                    "message": "string"
                                                },
                                                "jailbreak": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "indirect_attack": {
                                                    "filtered": true,
                                                    "detected": true
                                                }
                                            }
                                        },
                                        "code": "string",
                                        "message": "string"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Service unavailable",
                        "headers": {
                            "apim-request-id": {
                                "description": "Request ID for troubleshooting purposes",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                },
                                "example": {
                                    "error": {
                                        "param": "string",
                                        "type": "string",
                                        "inner_error": {
                                            "code": "ResponsibleAIPolicyViolation",
                                            "content_filter_results": {
                                                "sexual": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "violence": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "hate": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "self_harm": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "profanity": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "custom_blocklists": {
                                                    "filtered": true,
                                                    "details": [
                                                        {
                                                            "filtered": true,
                                                            "id": "string"
                                                        }
                                                    ]
                                                },
                                                "error": {
                                                    "code": "string",
                                                    "message": "string"
                                                },
                                                "jailbreak": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "indirect_attack": {
                                                    "filtered": true,
                                                    "detected": true
                                                }
                                            }
                                        },
                                        "code": "string",
                                        "message": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Responses"
                ],
                "summary": "Deletes a model response with the given ID.\n",
                "description": "Deletes a model response with the given ID.\n",
                "operationId": "deleteResponse",
                "parameters": [
                    {
                        "name": "response_id",
                        "in": "path",
                        "description": "The ID of the response to delete.",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "example": "resp_677efb5139a88190b512bc3fef8e535d"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "Not Found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/error"
                                },
                                "example": {
                                    "param": "string",
                                    "type": "string",
                                    "inner_error": {
                                        "code": "ResponsibleAIPolicyViolation",
                                        "content_filter_results": {
                                            "sexual": {
                                                "filtered": true,
                                                "severity": "safe"
                                            },
                                            "violence": {
                                                "filtered": true,
                                                "severity": "safe"
                                            },
                                            "hate": {
                                                "filtered": true,
                                                "severity": "safe"
                                            },
                                            "self_harm": {
                                                "filtered": true,
                                                "severity": "safe"
                                            },
                                            "profanity": {
                                                "filtered": true,
                                                "detected": true
                                            },
                                            "custom_blocklists": {
                                                "filtered": true,
                                                "details": [
                                                    {
                                                        "filtered": true,
                                                        "id": "string"
                                                    }
                                                ]
                                            },
                                            "error": {
                                                "code": "string",
                                                "message": "string"
                                            },
                                            "jailbreak": {
                                                "filtered": true,
                                                "detected": true
                                            },
                                            "indirect_attack": {
                                                "filtered": true,
                                                "detected": true
                                            }
                                        }
                                    },
                                    "code": "string",
                                    "message": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Service unavailable",
                        "headers": {
                            "apim-request-id": {
                                "description": "Request ID for troubleshooting purposes",
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                },
                                "example": {
                                    "error": {
                                        "param": "string",
                                        "type": "string",
                                        "inner_error": {
                                            "code": "ResponsibleAIPolicyViolation",
                                            "content_filter_results": {
                                                "sexual": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "violence": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "hate": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "self_harm": {
                                                    "filtered": true,
                                                    "severity": "safe"
                                                },
                                                "profanity": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "custom_blocklists": {
                                                    "filtered": true,
                                                    "details": [
                                                        {
                                                            "filtered": true,
                                                            "id": "string"
                                                        }
                                                    ]
                                                },
                                                "error": {
                                                    "code": "string",
                                                    "message": "string"
                                                },
                                                "jailbreak": {
                                                    "filtered": true,
                                                    "detected": true
                                                },
                                                "indirect_attack": {
                                                    "filtered": true,
                                                    "detected": true
                                                }
                                            }
                                        },
                                        "code": "string",
                                        "message": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/responses/{response_id}/input_items": {
            "get": {
                "summary": "Returns a list of input items for a given response.",
                "description": "Returns a list of input items for a given response.",
                "operationId": "get-responses-response_id-input_items",
                "parameters": [
                    {
                        "name": "response_id",
                        "in": "path",
                        "description": "The ID of the response to retrieve input items for.",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "description": "A limit on the number of objects to be returned. Limit can range between\n1 and 100, and the default is 20.\n",
                        "schema": {
                            "type": "integer",
                            "default": 20
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "description": "The order to return the input items in. Default is `asc`.\n- `asc`: Return the input items in ascending order.\n- `desc`: Return the input items in descending order.\n",
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "An item ID to list items after, used in pagination.\n",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "An item ID to list items before, used in pagination.\n",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/responseItemList"
                                },
                                "example": {
                                    "object": "list",
                                    "data": [
                                        {
                                            "type": "message",
                                            "role": "user",
                                            "status": "in_progress",
                                            "content": [
                                                {
                                                    "type": "input_text",
                                                    "text": "string"
                                                }
                                            ],
                                            "id": "string"
                                        }
                                    ],
                                    "has_more": true,
                                    "first_id": "string",
                                    "last_id": "string"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "errorResponse": {
                "type": "object",
                "properties": {
                    "error": {
                        "$ref": "#/components/schemas/error"
                    }
                }
            },
            "errorBase": {
                "type": "object",
                "properties": {
                    "code": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    }
                }
            },
            "error": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/errorBase"
                    }
                ],
                "properties": {
                    "param": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "inner_error": {
                        "$ref": "#/components/schemas/innerError"
                    }
                }
            },
            "innerError": {
                "type": "object",
                "properties": {
                    "code": {
                        "$ref": "#/components/schemas/innerErrorCode"
                    },
                    "content_filter_results": {
                        "$ref": "#/components/schemas/contentFilterPromptResults"
                    }
                },
                "description": "Inner error with additional details."
            },
            "innerErrorCode": {
                "enum": [
                    "ResponsibleAIPolicyViolation"
                ],
                "type": "string",
                "description": "Error codes for the inner error object.",
                "x-ms-enum": {
                    "name": "InnerErrorCode",
                    "modelAsString": true,
                    "values": [
                        {
                            "value": "ResponsibleAIPolicyViolation",
                            "description": "The prompt violated one of more content filter rules."
                        }
                    ]
                }
            },
            "dalleErrorResponse": {
                "type": "object",
                "properties": {
                    "error": {
                        "$ref": "#/components/schemas/dalleError"
                    }
                }
            },
            "dalleError": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/errorBase"
                    }
                ],
                "properties": {
                    "param": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "inner_error": {
                        "$ref": "#/components/schemas/dalleInnerError"
                    }
                }
            },
            "dalleInnerError": {
                "type": "object",
                "properties": {
                    "code": {
                        "$ref": "#/components/schemas/innerErrorCode"
                    },
                    "content_filter_results": {
                        "$ref": "#/components/schemas/dalleFilterResults"
                    },
                    "revised_prompt": {
                        "type": "string",
                        "description": "The prompt that was used to generate the image, if there was any revision to the prompt."
                    }
                },
                "description": "Inner error with additional details."
            },
            "contentFilterCompletionTextSpan": {
                "required": [
                    "completion_start_offset",
                    "completion_end_offset"
                ],
                "type": "object",
                "properties": {
                    "completion_start_offset": {
                        "type": "integer",
                        "description": "Offset of the UTF32 code point which begins the span."
                    },
                    "completion_end_offset": {
                        "type": "integer",
                        "description": "Offset of the first UTF32 code point which is excluded from the span. This field is always equal to completion_start_offset for empty spans. This field is always larger than completion_start_offset for non-empty spans."
                    }
                },
                "description": "Describes a span within generated completion text.  Offset 0 is the first UTF32 code point of the completion text."
            },
            "contentFilterResultBase": {
                "required": [
                    "filtered"
                ],
                "type": "object",
                "properties": {
                    "filtered": {
                        "type": "boolean"
                    }
                }
            },
            "contentFilterSeverityResult": {
                "required": [
                    "severity",
                    "filtered"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/contentFilterResultBase"
                    },
                    {
                        "properties": {
                            "severity": {
                                "enum": [
                                    "safe",
                                    "low",
                                    "medium",
                                    "high"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "ContentFilterSeverity",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "safe",
                                            "description": "General content or related content in generic or non-harmful contexts."
                                        },
                                        {
                                            "value": "low",
                                            "description": "Harmful content at a low intensity and risk level."
                                        },
                                        {
                                            "value": "medium",
                                            "description": "Harmful content at a medium intensity and risk level."
                                        },
                                        {
                                            "value": "high",
                                            "description": "Harmful content at a high intensity and risk level."
                                        }
                                    ]
                                }
                            }
                        }
                    }
                ]
            },
            "contentFilterDetectedResult": {
                "required": [
                    "detected",
                    "filtered"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/contentFilterResultBase"
                    },
                    {
                        "properties": {
                            "detected": {
                                "type": "boolean"
                            }
                        }
                    }
                ]
            },
            "contentFilterDetectedWithCitationResult": {
                "required": [
                    "detected",
                    "filtered"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/contentFilterDetectedResult"
                    },
                    {
                        "properties": {
                            "citation": {
                                "type": "object",
                                "properties": {
                                    "URL": {
                                        "type": "string"
                                    },
                                    "license": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                ]
            },
            "contentFilterDetectedWithCompletionTextSpansResult": {
                "required": [
                    "detected",
                    "filtered",
                    "details"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/contentFilterDetectedResult"
                    },
                    {
                        "properties": {
                            "details": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/contentFilterCompletionTextSpan"
                                }
                            }
                        }
                    }
                ]
            },
            "contentFilterIdResult": {
                "required": [
                    "id",
                    "filtered"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/contentFilterResultBase"
                    },
                    {
                        "properties": {
                            "id": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "contentFilterResultsBase": {
                "type": "object",
                "properties": {
                    "sexual": {
                        "$ref": "#/components/schemas/contentFilterSeverityResult"
                    },
                    "violence": {
                        "$ref": "#/components/schemas/contentFilterSeverityResult"
                    },
                    "hate": {
                        "$ref": "#/components/schemas/contentFilterSeverityResult"
                    },
                    "self_harm": {
                        "$ref": "#/components/schemas/contentFilterSeverityResult"
                    },
                    "profanity": {
                        "$ref": "#/components/schemas/contentFilterDetectedResult"
                    },
                    "custom_blocklists": {
                        "$ref": "#/components/schemas/contentFilterDetailedResults"
                    },
                    "error": {
                        "$ref": "#/components/schemas/errorBase"
                    }
                },
                "description": "Information about the content filtering results."
            },
            "contentFilterPromptResults": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/contentFilterResultsBase"
                    },
                    {
                        "properties": {
                            "jailbreak": {
                                "$ref": "#/components/schemas/contentFilterDetectedResult"
                            },
                            "indirect_attack": {
                                "$ref": "#/components/schemas/contentFilterDetectedResult"
                            }
                        }
                    }
                ],
                "description": "Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not. Information about jailbreak content and profanity, if it has been detected, and if it has been filtered or not. And information about customer block list, if it has been filtered and its id."
            },
            "contentFilterChoiceResults": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/contentFilterResultsBase"
                    },
                    {
                        "properties": {
                            "protected_material_text": {
                                "$ref": "#/components/schemas/contentFilterDetectedResult"
                            }
                        }
                    },
                    {
                        "properties": {
                            "protected_material_code": {
                                "$ref": "#/components/schemas/contentFilterDetectedWithCitationResult"
                            }
                        }
                    },
                    {
                        "properties": {
                            "ungrounded_material": {
                                "$ref": "#/components/schemas/contentFilterDetectedWithCompletionTextSpansResult"
                            }
                        }
                    }
                ],
                "description": "Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not. Information about third party text and profanity, if it has been detected, and if it has been filtered or not. And information about customer block list, if it has been filtered and its id."
            },
            "contentFilterDetailedResults": {
                "required": [
                    "filtered",
                    "details"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/contentFilterResultBase"
                    },
                    {
                        "properties": {
                            "details": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/contentFilterIdResult"
                                }
                            }
                        }
                    }
                ],
                "description": "Content filtering results with a detail of content filter ids for the filtered segments."
            },
            "promptFilterResult": {
                "type": "object",
                "properties": {
                    "prompt_index": {
                        "type": "integer"
                    },
                    "content_filter_results": {
                        "$ref": "#/components/schemas/contentFilterPromptResults"
                    }
                },
                "description": "Content filtering results for a single prompt in the request."
            },
            "promptFilterResults": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/promptFilterResult"
                },
                "description": "Content filtering results for zero or more prompts in the request. In a streaming request, results for different prompts may arrive at different times or in different orders."
            },
            "dalleContentFilterResults": {
                "type": "object",
                "properties": {
                    "sexual": {
                        "$ref": "#/components/schemas/contentFilterSeverityResult"
                    },
                    "violence": {
                        "$ref": "#/components/schemas/contentFilterSeverityResult"
                    },
                    "hate": {
                        "$ref": "#/components/schemas/contentFilterSeverityResult"
                    },
                    "self_harm": {
                        "$ref": "#/components/schemas/contentFilterSeverityResult"
                    }
                },
                "description": "Information about the content filtering results."
            },
            "dalleFilterResults": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/dalleContentFilterResults"
                    },
                    {
                        "properties": {
                            "profanity": {
                                "$ref": "#/components/schemas/contentFilterDetectedResult"
                            },
                            "jailbreak": {
                                "$ref": "#/components/schemas/contentFilterDetectedResult"
                            },
                            "custom_blocklists": {
                                "$ref": "#/components/schemas/contentFilterDetailedResults"
                            }
                        }
                    }
                ],
                "description": "Information about the content filtering category (hate, sexual, violence, self_harm), if it has been detected, as well as the severity level (very_low, low, medium, high-scale that determines the intensity and risk level of harmful content) and if it has been filtered or not. Information about jailbreak content and profanity, if it has been detected, and if it has been filtered or not. And information about customer block list, if it has been filtered and its id."
            },
            "chatCompletionsRequestCommon": {
                "type": "object",
                "properties": {
                    "temperature": {
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number",
                        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\nWe generally recommend altering this or `top_p` but not both.",
                        "default": 1,
                        "nullable": true,
                        "example": 1
                    },
                    "top_p": {
                        "maximum": 1,
                        "minimum": 0,
                        "type": "number",
                        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\nWe generally recommend altering this or `temperature` but not both.",
                        "default": 1,
                        "nullable": true,
                        "example": 1
                    },
                    "stream": {
                        "type": "boolean",
                        "description": "If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]` message.",
                        "default": false,
                        "nullable": true
                    },
                    "stop": {
                        "oneOf": [
                            {
                                "type": "string",
                                "nullable": true
                            },
                            {
                                "maxItems": 4,
                                "minItems": 1,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "Array minimum size of 1 and maximum of 4"
                            }
                        ],
                        "description": "Up to 4 sequences where the API will stop generating further tokens.",
                        "default": null
                    },
                    "max_tokens": {
                        "type": "integer",
                        "description": "The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens). This is not compatible with o1 series models.",
                        "default": 4096
                    },
                    "max_completion_tokens": {
                        "type": "integer",
                        "description": "An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and reasoning tokens. This is only supported in o1 series models. Will expand the support to other models in future API release.",
                        "nullable": true
                    },
                    "presence_penalty": {
                        "maximum": 2,
                        "minimum": -2,
                        "type": "number",
                        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.",
                        "default": 0
                    },
                    "frequency_penalty": {
                        "maximum": 2,
                        "minimum": -2,
                        "type": "number",
                        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
                        "default": 0
                    },
                    "logit_bias": {
                        "type": "object",
                        "description": "Modify the likelihood of specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.",
                        "nullable": true
                    },
                    "store": {
                        "type": "boolean",
                        "description": "Whether or not to store the output of this chat completion request for use in our model distillation or evaluation products.",
                        "nullable": true
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Developer-defined tags and values used for filtering completions in the stored completions dashboard.",
                        "nullable": true
                    },
                    "user": {
                        "type": "string",
                        "description": "A unique identifier representing your end-user, which can help Azure OpenAI to monitor and detect abuse.",
                        "example": "user-1234"
                    }
                }
            },
            "createCompletionRequest": {
                "required": [
                    "prompt"
                ],
                "type": "object",
                "properties": {
                    "prompt": {
                        "oneOf": [
                            {
                                "type": "string",
                                "default": "",
                                "example": "This is a test."
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "default": "",
                                    "example": "This is a test."
                                }
                            }
                        ],
                        "description": "The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.\n\nNote that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.\n",
                        "default": "<|endoftext|>",
                        "nullable": true
                    },
                    "best_of": {
                        "maximum": 20,
                        "minimum": 0,
                        "type": "integer",
                        "description": "Generates `best_of` completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.\n\nWhen used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return â€“ `best_of` must be greater than `n`.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n",
                        "default": 1,
                        "nullable": true
                    },
                    "echo": {
                        "type": "boolean",
                        "description": "Echo back the prompt in addition to the completion\n",
                        "default": false,
                        "nullable": true
                    },
                    "frequency_penalty": {
                        "maximum": 2,
                        "minimum": -2,
                        "type": "number",
                        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.\n",
                        "default": 0,
                        "nullable": true
                    },
                    "logit_bias": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "integer"
                        },
                        "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](https://platform.openai.com/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n\nAs an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated.\n",
                        "default": null,
                        "nullable": true,
                        "x-oaiTypeLabel": "map"
                    },
                    "logprobs": {
                        "maximum": 5,
                        "minimum": 0,
                        "type": "integer",
                        "description": "Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.\n\nThe maximum value for `logprobs` is 5.\n",
                        "default": null,
                        "nullable": true
                    },
                    "max_tokens": {
                        "minimum": 0,
                        "type": "integer",
                        "description": "The maximum number of [tokens](https://platform.openai.com/tokenizer) that can be generated in the completion.\n\nThe token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.\n",
                        "default": 16,
                        "nullable": true,
                        "example": 16
                    },
                    "n": {
                        "maximum": 128,
                        "minimum": 1,
                        "type": "integer",
                        "description": "How many completions to generate for each prompt.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n",
                        "default": 1,
                        "nullable": true,
                        "example": 1
                    },
                    "presence_penalty": {
                        "maximum": 2,
                        "minimum": -2,
                        "type": "number",
                        "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.\n",
                        "default": 0,
                        "nullable": true
                    },
                    "seed": {
                        "maximum": 9223372036854776000,
                        "minimum": -9223372036854776000,
                        "type": "integer",
                        "description": "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.\n\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.\n",
                        "nullable": true
                    },
                    "stop": {
                        "oneOf": [
                            {
                                "type": "string",
                                "default": "<|endoftext|>",
                                "nullable": true,
                                "example": "\n"
                            },
                            {
                                "maxItems": 4,
                                "minItems": 1,
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "example": "[\"\\n\"]"
                                }
                            }
                        ],
                        "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.\n",
                        "default": null,
                        "nullable": true
                    },
                    "stream": {
                        "type": "boolean",
                        "description": "Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n",
                        "default": false,
                        "nullable": true
                    },
                    "suffix": {
                        "type": "string",
                        "description": "The suffix that comes after a completion of inserted text.\n\nThis parameter is only supported for `gpt-3.5-turbo-instruct`.\n",
                        "default": null,
                        "nullable": true,
                        "example": "test."
                    },
                    "temperature": {
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number",
                        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.\n",
                        "default": 1,
                        "nullable": true,
                        "example": 1
                    },
                    "top_p": {
                        "maximum": 1,
                        "minimum": 0,
                        "type": "number",
                        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or `temperature` but not both.\n",
                        "default": 1,
                        "nullable": true,
                        "example": 1
                    },
                    "user": {
                        "type": "string",
                        "description": "A unique identifier representing your end-user, which can help to monitor and detect abuse.\n",
                        "example": "user-1234"
                    }
                }
            },
            "createCompletionResponse": {
                "required": [
                    "id",
                    "object",
                    "created",
                    "model",
                    "choices"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "A unique identifier for the completion."
                    },
                    "choices": {
                        "type": "array",
                        "items": {
                            "required": [
                                "finish_reason",
                                "index",
                                "logprobs",
                                "text"
                            ],
                            "type": "object",
                            "properties": {
                                "finish_reason": {
                                    "enum": [
                                        "stop",
                                        "length",
                                        "content_filter"
                                    ],
                                    "type": "string",
                                    "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\nor `content_filter` if content was omitted due to a flag from our content filters.\n"
                                },
                                "index": {
                                    "type": "integer"
                                },
                                "logprobs": {
                                    "type": "object",
                                    "properties": {
                                        "text_offset": {
                                            "type": "array",
                                            "items": {
                                                "type": "integer"
                                            }
                                        },
                                        "token_logprobs": {
                                            "type": "array",
                                            "items": {
                                                "type": "number"
                                            }
                                        },
                                        "tokens": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "top_logprobs": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "additionalProperties": {
                                                    "type": "number"
                                                }
                                            }
                                        }
                                    },
                                    "nullable": true
                                },
                                "text": {
                                    "type": "string"
                                },
                                "content_filter_results": {
                                    "$ref": "#/components/schemas/contentFilterChoiceResults"
                                }
                            }
                        },
                        "description": "The list of completion choices the model generated for the input prompt."
                    },
                    "created": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) of when the completion was created."
                    },
                    "model": {
                        "type": "string",
                        "description": "The model used for completion."
                    },
                    "prompt_filter_results": {
                        "$ref": "#/components/schemas/promptFilterResults"
                    },
                    "system_fingerprint": {
                        "type": "string",
                        "description": "This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n"
                    },
                    "object": {
                        "enum": [
                            "text_completion"
                        ],
                        "type": "string",
                        "description": "The object type, which is always \"text_completion\""
                    },
                    "usage": {
                        "$ref": "#/components/schemas/completionUsage"
                    }
                },
                "description": "Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).\n"
            },
            "createChatCompletionRequest": {
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/chatCompletionsRequestCommon"
                    },
                    {
                        "required": [
                            "messages"
                        ],
                        "properties": {
                            "messages": {
                                "minItems": 1,
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/chatCompletionRequestMessage"
                                },
                                "description": "A list of messages comprising the conversation so far. [Example Python code](https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb)."
                            },
                            "data_sources": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/azureChatExtensionConfiguration"
                                },
                                "description": "  The configuration entries for Azure OpenAI chat extensions that use them.\n  This additional specification is only compatible with Azure OpenAI."
                            },
                            "reasoning_effort": {
                                "enum": [
                                    "low",
                                    "medium",
                                    "high"
                                ],
                                "type": "string",
                                "description": "**o1 models only** \n\n Constrains effort on reasoning for \n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\n\nCurrently supported values are `low`, `medium`, and `high`. Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.",
                                "default": "medium"
                            },
                            "frequency_penalty": {
                                "maximum": 2,
                                "minimum": -2,
                                "type": "number",
                                "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.\n",
                                "default": 0,
                                "nullable": true
                            },
                            "logit_bias": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "integer"
                                },
                                "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n",
                                "default": null,
                                "nullable": true
                            },
                            "logprobs": {
                                "type": "boolean",
                                "description": "Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.",
                                "default": false,
                                "nullable": true
                            },
                            "top_logprobs": {
                                "maximum": 20,
                                "minimum": 0,
                                "type": "integer",
                                "description": "An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.",
                                "nullable": true
                            },
                            "max_tokens": {
                                "type": "integer",
                                "description": "The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.\n\nThe total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.\n",
                                "nullable": true
                            },
                            "n": {
                                "maximum": 128,
                                "minimum": 1,
                                "type": "integer",
                                "description": "How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.",
                                "default": 1,
                                "nullable": true,
                                "example": 1
                            },
                            "presence_penalty": {
                                "maximum": 2,
                                "minimum": -2,
                                "type": "number",
                                "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.\n",
                                "default": 0,
                                "nullable": true
                            },
                            "modalities": {
                                "$ref": "#/components/schemas/ChatCompletionModalities"
                            },
                            "prediction": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/PredictionContent"
                                    }
                                ],
                                "description": "Configuration for a [Predicted Output](/docs/guides/predicted-outputs), which can greatly improve response times when large parts of the model response are known ahead of time. This is most common when you are regenerating a file with only minor changes to most of the content.",
                                "nullable": true,
                                "x-oaiExpandable": true
                            },
                            "audio": {
                                "required": [
                                    "voice",
                                    "format"
                                ],
                                "type": "object",
                                "properties": {
                                    "voice": {
                                        "enum": [
                                            "alloy",
                                            "echo",
                                            "fable",
                                            "onyx",
                                            "nova",
                                            "shimmer"
                                        ],
                                        "type": "string",
                                        "description": "Specifies the voice type. Supported voices are `alloy`, `echo`, \n`fable`, `onyx`, `nova`, and `shimmer`.\n"
                                    },
                                    "format": {
                                        "enum": [
                                            "wav",
                                            "mp3",
                                            "flac",
                                            "opus",
                                            "pcm16"
                                        ],
                                        "type": "string",
                                        "description": "Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,\n`opus`, or `pcm16`. \n"
                                    }
                                },
                                "description": "Parameters for audio output. Required when audio output is requested with\n`modalities: [\"audio\"]`. [Learn more](/docs/guides/audio).\n",
                                "x-oaiExpandable": true
                            },
                            "parallel_tool_calls": {
                                "$ref": "#/components/schemas/ParallelToolCalls"
                            },
                            "response_format": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/ResponseFormatText"
                                    },
                                    {
                                        "$ref": "#/components/schemas/ResponseFormatJsonObject"
                                    },
                                    {
                                        "$ref": "#/components/schemas/ResponseFormatJsonSchema"
                                    }
                                ],
                                "description": "An object specifying the format that the model must output. Compatible with [GPT-4o](https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models#gpt-4-and-gpt-4-turbo-models), [GPT-4o mini](https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models#gpt-4-and-gpt-4-turbo-models), [GPT-4 Turbo](https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models#gpt-4-and-gpt-4-turbo-models) and all [GPT-3.5](https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models#gpt-35) Turbo models newer than `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which guarantees the model will match your supplied JSON schema.\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which guarantees the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n",
                                "x-oaiExpandable": true
                            },
                            "seed": {
                                "maximum": 9223372036854776000,
                                "minimum": -9223372036854776000,
                                "type": "integer",
                                "description": "This feature is in Beta.\nIf specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.\n",
                                "nullable": true
                            },
                            "stop": {
                                "oneOf": [
                                    {
                                        "type": "string",
                                        "nullable": true
                                    },
                                    {
                                        "maxItems": 4,
                                        "minItems": 1,
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                ],
                                "description": "Up to 4 sequences where the API will stop generating further tokens.\n",
                                "default": null
                            },
                            "stream": {
                                "type": "boolean",
                                "description": "If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n",
                                "default": false,
                                "nullable": true
                            },
                            "stream_options": {
                                "$ref": "#/components/schemas/chatCompletionStreamOptions"
                            },
                            "temperature": {
                                "maximum": 2,
                                "minimum": 0,
                                "type": "number",
                                "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.\n",
                                "default": 1,
                                "nullable": true,
                                "example": 1
                            },
                            "top_p": {
                                "maximum": 1,
                                "minimum": 0,
                                "type": "number",
                                "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or `temperature` but not both.\n",
                                "default": 1,
                                "nullable": true,
                                "example": 1
                            },
                            "tools": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/chatCompletionTool"
                                },
                                "description": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.\n"
                            },
                            "tool_choice": {
                                "$ref": "#/components/schemas/chatCompletionToolChoiceOption"
                            },
                            "function_call": {
                                "oneOf": [
                                    {
                                        "enum": [
                                            "none",
                                            "auto"
                                        ],
                                        "type": "string",
                                        "description": "`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.\n"
                                    },
                                    {
                                        "$ref": "#/components/schemas/chatCompletionFunctionCallOption"
                                    }
                                ],
                                "description": "Deprecated in favor of `tool_choice`.\n\nControls which (if any) function is called by the model.\n`none` means the model will not call a function and instead generates a message.\n`auto` means the model can pick between generating a message or calling a function.\nSpecifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.\n\n`none` is the default when no functions are present. `auto` is the default if functions are present.\n",
                                "deprecated": true,
                                "x-oaiExpandable": true
                            },
                            "functions": {
                                "maxItems": 128,
                                "minItems": 1,
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/chatCompletionFunctions"
                                },
                                "description": "Deprecated in favor of `tools`.\n\nA list of functions the model may generate JSON inputs for.\n",
                                "deprecated": true
                            },
                            "user": {
                                "type": "string",
                                "description": "A unique identifier representing your end-user, which can help to monitor and detect abuse.\n",
                                "example": "user-1234"
                            },
                            "user_security_context": {
                                "$ref": "#/components/schemas/userSecurityContext"
                            }
                        }
                    }
                ]
            },
            "userSecurityContext": {
                "type": "object",
                "properties": {
                    "application_name": {
                        "type": "string",
                        "description": "The name of the application. Sensitive personal information should not be included in this field."
                    },
                    "end_user_id": {
                        "type": "string",
                        "description": "This identifier is the Microsoft Entra ID (formerly Azure Active Directory) user object ID used to authenticate end-users within the generative AI application. Sensitive personal information should not be included in this field.",
                        "format": "uuid"
                    },
                    "end_user_tenant_id": {
                        "type": "string",
                        "description": "The Microsoft 365 tenant ID the end user belongs to. It's required when the generative AI application is multi tenant.",
                        "format": "uuid"
                    },
                    "source_ip": {
                        "type": "string",
                        "description": "Captures the original client's IP address, accepting both IPv4 and IPv6 formats."
                    }
                },
                "description": "User security context contains several parameters that describe the AI application itself, and the end user that interacts with the AI application. These fields assist your security operations teams to investigate and mitigate security incidents by providing a comprehensive approach to protecting your AI applications. [Learn more](https://aka.ms/TP4AI/Documentation/EndUserContext) about protecting AI applications using Microsoft Defender for Cloud."
            },
            "chatCompletionFunctions": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description of what the function does, used by the model to choose when and how to call the function."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
                    },
                    "parameters": {
                        "$ref": "#/components/schemas/FunctionParameters"
                    }
                },
                "deprecated": true
            },
            "chatCompletionFunctionCallOption": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the function to call."
                    }
                },
                "description": "Specifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.\n"
            },
            "chatCompletionFunctionParameters": {
                "type": "object",
                "description": "The parameters the functions accepts, described as a JSON Schema object. See the [guide/](https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format."
            },
            "chatCompletionRequestMessage": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ChatCompletionRequestDeveloperMessage"
                    },
                    {
                        "$ref": "#/components/schemas/chatCompletionRequestSystemMessage"
                    },
                    {
                        "$ref": "#/components/schemas/chatCompletionRequestUserMessage"
                    },
                    {
                        "$ref": "#/components/schemas/chatCompletionRequestAssistantMessage"
                    },
                    {
                        "$ref": "#/components/schemas/chatCompletionRequestToolMessage"
                    },
                    {
                        "$ref": "#/components/schemas/chatCompletionRequestFunctionMessage"
                    }
                ]
            },
            "ChatCompletionRequestDeveloperMessage": {
                "title": "Developer message",
                "required": [
                    "content",
                    "role"
                ],
                "type": "object",
                "properties": {
                    "content": {
                        "oneOf": [
                            {
                                "title": "Text content",
                                "type": "string",
                                "description": "The contents of the developer message."
                            },
                            {
                                "title": "Array of content parts",
                                "minItems": 1,
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/chatCompletionRequestDeveloperMessageContentPart"
                                },
                                "description": "An array of content parts with a defined type. For developer messages, only type `text` is supported."
                            }
                        ],
                        "description": "The contents of the developer message."
                    },
                    "role": {
                        "enum": [
                            "developer"
                        ],
                        "type": "string",
                        "description": "The role of the messages author, in this case `developer`."
                    },
                    "name": {
                        "type": "string",
                        "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
                    }
                },
                "description": "Developer-provided instructions that the model should follow, regardless of messages sent by the user.\nWith o1 models and newer, `developer` messages replace the previous `system` messages."
            },
            "chatCompletionRequestSystemMessage": {
                "title": "System message",
                "required": [
                    "content",
                    "role"
                ],
                "type": "object",
                "properties": {
                    "content": {
                        "oneOf": [
                            {
                                "title": "Text content",
                                "type": "string",
                                "description": "The contents of the system message."
                            },
                            {
                                "title": "Array of content parts",
                                "minItems": 1,
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/chatCompletionRequestSystemMessageContentPart"
                                },
                                "description": "An array of content parts with a defined type. For system messages, only type `text` is supported."
                            }
                        ],
                        "description": "The contents of the system message."
                    },
                    "role": {
                        "enum": [
                            "system"
                        ],
                        "type": "string",
                        "description": "The role of the messages author, in this case `system`."
                    },
                    "name": {
                        "type": "string",
                        "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
                    }
                }
            },
            "chatCompletionRequestUserMessage": {
                "title": "User message",
                "required": [
                    "content",
                    "role"
                ],
                "type": "object",
                "properties": {
                    "content": {
                        "oneOf": [
                            {
                                "title": "Text content",
                                "type": "string",
                                "description": "The text contents of the message."
                            },
                            {
                                "title": "Array of content parts",
                                "minItems": 1,
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/chatCompletionRequestUserMessageContentPart"
                                },
                                "description": "An array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts. Image input is only supported when using the `gpt-4o` model."
                            }
                        ],
                        "description": "The contents of the user message.\n",
                        "x-oaiExpandable": true
                    },
                    "role": {
                        "enum": [
                            "user"
                        ],
                        "type": "string",
                        "description": "The role of the messages author, in this case `user`."
                    },
                    "name": {
                        "type": "string",
                        "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
                    }
                }
            },
            "chatCompletionRequestAssistantMessage": {
                "title": "Assistant message",
                "required": [
                    "role"
                ],
                "type": "object",
                "properties": {
                    "content": {
                        "oneOf": [
                            {
                                "title": "Text content",
                                "type": "string",
                                "description": "The contents of the assistant message."
                            },
                            {
                                "title": "Array of content parts",
                                "minItems": 1,
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/chatCompletionRequestAssistantMessageContentPart"
                                },
                                "description": "An array of content parts with a defined type. Can be one or more of type `text`, or exactly one of type `refusal`."
                            }
                        ],
                        "description": "The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.\n",
                        "nullable": true
                    },
                    "refusal": {
                        "type": "string",
                        "description": "The refusal message by the assistant.",
                        "nullable": true
                    },
                    "role": {
                        "enum": [
                            "assistant"
                        ],
                        "type": "string",
                        "description": "The role of the messages author, in this case `assistant`."
                    },
                    "name": {
                        "type": "string",
                        "description": "An optional name for the participant. Provides the model information to differentiate between participants of the same role."
                    },
                    "tool_calls": {
                        "$ref": "#/components/schemas/chatCompletionMessageToolCalls"
                    },
                    "function_call": {
                        "required": [
                            "arguments",
                            "name"
                        ],
                        "type": "object",
                        "properties": {
                            "arguments": {
                                "type": "string",
                                "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
                            },
                            "name": {
                                "type": "string",
                                "description": "The name of the function to call."
                            }
                        },
                        "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
                        "nullable": true,
                        "deprecated": true
                    }
                }
            },
            "chatCompletionRequestToolMessage": {
                "title": "Tool message",
                "required": [
                    "role",
                    "content",
                    "tool_call_id"
                ],
                "type": "object",
                "properties": {
                    "role": {
                        "enum": [
                            "tool"
                        ],
                        "type": "string",
                        "description": "The role of the messages author, in this case `tool`."
                    },
                    "content": {
                        "oneOf": [
                            {
                                "title": "Text content",
                                "type": "string",
                                "description": "The contents of the tool message."
                            },
                            {
                                "title": "Array of content parts",
                                "minItems": 1,
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/chatCompletionRequestToolMessageContentPart"
                                },
                                "description": "An array of content parts with a defined type. For tool messages, only type `text` is supported."
                            }
                        ],
                        "description": "The contents of the tool message."
                    },
                    "tool_call_id": {
                        "type": "string",
                        "description": "Tool call that this message is responding to."
                    }
                }
            },
            "chatCompletionRequestFunctionMessage": {
                "title": "Function message",
                "required": [
                    "role",
                    "content",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "role": {
                        "enum": [
                            "function"
                        ],
                        "type": "string",
                        "description": "The role of the messages author, in this case `function`."
                    },
                    "content": {
                        "type": "string",
                        "description": "The contents of the function message.",
                        "nullable": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the function to call."
                    }
                },
                "deprecated": true
            },
            "chatCompletionRequestDeveloperMessageContentPart": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/chatCompletionRequestMessageContentPartText"
                    }
                ]
            },
            "chatCompletionRequestSystemMessageContentPart": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/chatCompletionRequestMessageContentPartText"
                    }
                ]
            },
            "chatCompletionRequestUserMessageContentPart": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/chatCompletionRequestMessageContentPartText"
                    },
                    {
                        "$ref": "#/components/schemas/chatCompletionRequestMessageContentPartImage"
                    },
                    {
                        "$ref": "#/components/schemas/chatCompletionRequestMessageContentPartAudio"
                    }
                ]
            },
            "chatCompletionRequestAssistantMessageContentPart": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/chatCompletionRequestMessageContentPartText"
                    },
                    {
                        "$ref": "#/components/schemas/chatCompletionRequestMessageContentPartRefusal"
                    }
                ]
            },
            "chatCompletionRequestToolMessageContentPart": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/chatCompletionRequestMessageContentPartText"
                    }
                ]
            },
            "chatCompletionRequestMessageContentPartText": {
                "title": "Text content part",
                "required": [
                    "type",
                    "text"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "text"
                        ],
                        "type": "string",
                        "description": "The type of the content part."
                    },
                    "text": {
                        "type": "string",
                        "description": "The text content."
                    }
                }
            },
            "chatCompletionRequestMessageContentPartAudio": {
                "title": "Audio content part",
                "required": [
                    "type",
                    "input_audio"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "input_audio"
                        ],
                        "type": "string",
                        "description": "The type of the content part. Always `input_audio`."
                    },
                    "input_audio": {
                        "required": [
                            "data",
                            "format"
                        ],
                        "type": "object",
                        "properties": {
                            "data": {
                                "type": "string",
                                "description": "Base64 encoded audio data."
                            },
                            "format": {
                                "enum": [
                                    "wav",
                                    "mp3"
                                ],
                                "type": "string",
                                "description": "The format of the encoded audio data. Currently supports \"wav\" and \"mp3\".\n"
                            }
                        }
                    }
                },
                "description": "Learn about [audio inputs](/docs/guides/audio).\n"
            },
            "chatCompletionRequestMessageContentPartImage": {
                "title": "Image content part",
                "required": [
                    "type",
                    "image_url"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "image_url"
                        ],
                        "type": "string",
                        "description": "The type of the content part."
                    },
                    "image_url": {
                        "required": [
                            "url"
                        ],
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": "Either a URL of the image or the base64 encoded image data.",
                                "format": "uri"
                            },
                            "detail": {
                                "enum": [
                                    "auto",
                                    "low",
                                    "high"
                                ],
                                "type": "string",
                                "description": "Specifies the detail level of the image. Learn more in the [Vision guide](https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/gpt-with-vision?tabs=rest%2Csystem-assigned%2Cresource#detail-parameter-settings-in-image-processing-low-high-auto).",
                                "default": "auto"
                            }
                        }
                    }
                }
            },
            "chatCompletionRequestMessageContentPartRefusal": {
                "title": "Refusal content part",
                "required": [
                    "type",
                    "refusal"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "refusal"
                        ],
                        "type": "string",
                        "description": "The type of the content part."
                    },
                    "refusal": {
                        "type": "string",
                        "description": "The refusal message generated by the model."
                    }
                }
            },
            "azureChatExtensionConfiguration": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/azureChatExtensionType"
                    }
                },
                "description": "  A representation of configuration data for a single Azure OpenAI chat extension. This will be used by a chat\n  completions request that should use Azure OpenAI chat extensions to augment the response behavior.\n  The use of this configuration is compatible only with Azure OpenAI.",
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "azure_search": "#/components/schemas/azureSearchChatExtensionConfiguration",
                        "azure_cosmos_db": "#/components/schemas/azureCosmosDBChatExtensionConfiguration",
                        "elasticsearch": "#/components/schemas/elasticsearchChatExtensionConfiguration",
                        "mongo_db": "#/components/schemas/mongoDBChatExtensionConfiguration",
                        "pinecone": "#/components/schemas/pineconeChatExtensionConfiguration"
                    }
                }
            },
            "azureChatExtensionType": {
                "enum": [
                    "azure_search",
                    "azure_cosmos_db",
                    "elasticsearch",
                    "mongo_db",
                    "pinecone"
                ],
                "type": "string",
                "description": "  A representation of configuration data for a single Azure OpenAI chat extension. This will be used by a chat\n  completions request that should use Azure OpenAI chat extensions to augment the response behavior.\n  The use of this configuration is compatible only with Azure OpenAI.",
                "x-ms-enum": {
                    "name": "AzureChatExtensionType",
                    "modelAsString": true,
                    "values": [
                        {
                            "name": "azureSearch",
                            "value": "azure_search",
                            "description": "Represents the use of Azure Search as an Azure OpenAI chat extension."
                        },
                        {
                            "name": "azureCosmosDB",
                            "value": "azure_cosmos_db",
                            "description": "Represents the use of Azure Cosmos DB as an Azure OpenAI chat extension."
                        },
                        {
                            "name": "elasticsearch",
                            "value": "elasticsearch",
                            "description": "Represents the use of Elasticsearch® index as an Azure OpenAI chat extension."
                        },
                        {
                            "name": "mongoDB",
                            "value": "mongo_db",
                            "description": "Represents the use of Mongo DB as an Azure OpenAI chat extension."
                        },
                        {
                            "name": "pinecone",
                            "value": "pinecone",
                            "description": "Represents the use of Pinecone index as an Azure OpenAI chat extension."
                        }
                    ]
                }
            },
            "azureSearchChatExtensionConfiguration": {
                "required": [
                    "parameters"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/azureChatExtensionConfiguration"
                    },
                    {
                        "properties": {
                            "parameters": {
                                "$ref": "#/components/schemas/azureSearchChatExtensionParameters"
                            }
                        }
                    }
                ],
                "description": "A specific representation of configurable options for Azure Search when using it as an Azure OpenAI chat\nextension.",
                "x-ms-discriminator-value": "azure_search"
            },
            "azureSearchChatExtensionParameters": {
                "required": [
                    "authentication",
                    "endpoint",
                    "index_name"
                ],
                "type": "object",
                "properties": {
                    "authentication": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/onYourDataApiKeyAuthenticationOptions"
                            },
                            {
                                "$ref": "#/components/schemas/onYourDataSystemAssignedManagedIdentityAuthenticationOptions"
                            },
                            {
                                "$ref": "#/components/schemas/onYourDataUserAssignedManagedIdentityAuthenticationOptions"
                            },
                            {
                                "$ref": "#/components/schemas/onYourDataAccessTokenAuthenticationOptions"
                            }
                        ]
                    },
                    "top_n_documents": {
                        "type": "integer",
                        "description": "The configured top number of documents to feature for the configured query.",
                        "format": "int32"
                    },
                    "max_search_queries": {
                        "type": "integer",
                        "description": "The max number of rewritten queries should be send to search provider for one user message. If not specified, the system will decide the number of queries to send.",
                        "format": "int32"
                    },
                    "allow_partial_result": {
                        "type": "boolean",
                        "description": "If specified as true, the system will allow partial search results to be used and the request fails if all the queries fail. If not specified, or specified as false, the request will fail if any search query fails.",
                        "default": false
                    },
                    "in_scope": {
                        "type": "boolean",
                        "description": "Whether queries should be restricted to use of indexed data."
                    },
                    "strictness": {
                        "maximum": 5,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.",
                        "format": "int32"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The absolute endpoint path for the Azure Search resource to use.",
                        "format": "uri"
                    },
                    "index_name": {
                        "type": "string",
                        "description": "The name of the index to use as available in the referenced Azure Search resource."
                    },
                    "fields_mapping": {
                        "$ref": "#/components/schemas/azureSearchIndexFieldMappingOptions"
                    },
                    "query_type": {
                        "$ref": "#/components/schemas/azureSearchQueryType"
                    },
                    "semantic_configuration": {
                        "type": "string",
                        "description": "The additional semantic configuration for the query."
                    },
                    "filter": {
                        "type": "string",
                        "description": "Search filter."
                    },
                    "embedding_dependency": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/onYourDataEndpointVectorizationSource"
                            },
                            {
                                "$ref": "#/components/schemas/onYourDataDeploymentNameVectorizationSource"
                            },
                            {
                                "$ref": "#/components/schemas/onYourDataIntegratedVectorizationSource"
                            }
                        ]
                    },
                    "include_contexts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/onYourDataContextProperty"
                        },
                        "description": "The included properties of the output context. If not specified, the default value is `citations` and `intent`."
                    }
                },
                "description": "Parameters for Azure Search when used as an Azure OpenAI chat extension."
            },
            "azureSearchIndexFieldMappingOptions": {
                "type": "object",
                "properties": {
                    "title_field": {
                        "type": "string",
                        "description": "The name of the index field to use as a title."
                    },
                    "url_field": {
                        "type": "string",
                        "description": "The name of the index field to use as a URL."
                    },
                    "filepath_field": {
                        "type": "string",
                        "description": "The name of the index field to use as a filepath."
                    },
                    "content_fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of index fields that should be treated as content."
                    },
                    "content_fields_separator": {
                        "type": "string",
                        "description": "The separator pattern that content fields should use."
                    },
                    "vector_fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of fields that represent vector data."
                    },
                    "image_vector_fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of fields that represent image vector data."
                    }
                },
                "description": "Optional settings to control how fields are processed when using a configured Azure Search resource."
            },
            "azureSearchQueryType": {
                "enum": [
                    "simple",
                    "semantic",
                    "vector",
                    "vector_simple_hybrid",
                    "vector_semantic_hybrid"
                ],
                "type": "string",
                "description": "The type of Azure Search retrieval query that should be executed when using it as an Azure OpenAI chat extension.",
                "x-ms-enum": {
                    "name": "AzureSearchQueryType",
                    "modelAsString": true,
                    "values": [
                        {
                            "name": "simple",
                            "value": "simple",
                            "description": "Represents the default, simple query parser."
                        },
                        {
                            "name": "semantic",
                            "value": "semantic",
                            "description": "Represents the semantic query parser for advanced semantic modeling."
                        },
                        {
                            "name": "vector",
                            "value": "vector",
                            "description": "Represents vector search over computed data."
                        },
                        {
                            "name": "vectorSimpleHybrid",
                            "value": "vector_simple_hybrid",
                            "description": "Represents a combination of the simple query strategy with vector data."
                        },
                        {
                            "name": "vectorSemanticHybrid",
                            "value": "vector_semantic_hybrid",
                            "description": "Represents a combination of semantic search and vector data querying."
                        }
                    ]
                }
            },
            "azureCosmosDBChatExtensionConfiguration": {
                "required": [
                    "parameters"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/azureChatExtensionConfiguration"
                    },
                    {
                        "properties": {
                            "parameters": {
                                "$ref": "#/components/schemas/azureCosmosDBChatExtensionParameters"
                            }
                        }
                    }
                ],
                "description": "A specific representation of configurable options for Azure Cosmos DB when using it as an Azure OpenAI chat\nextension.",
                "x-ms-discriminator-value": "azure_cosmos_db"
            },
            "azureCosmosDBChatExtensionParameters": {
                "required": [
                    "authentication",
                    "container_name",
                    "database_name",
                    "embedding_dependency",
                    "fields_mapping",
                    "index_name"
                ],
                "type": "object",
                "properties": {
                    "authentication": {
                        "$ref": "#/components/schemas/onYourDataConnectionStringAuthenticationOptions"
                    },
                    "top_n_documents": {
                        "type": "integer",
                        "description": "The configured top number of documents to feature for the configured query.",
                        "format": "int32"
                    },
                    "max_search_queries": {
                        "type": "integer",
                        "description": "The max number of rewritten queries should be send to search provider for one user message. If not specified, the system will decide the number of queries to send.",
                        "format": "int32"
                    },
                    "allow_partial_result": {
                        "type": "boolean",
                        "description": "If specified as true, the system will allow partial search results to be used and the request fails if all the queries fail. If not specified, or specified as false, the request will fail if any search query fails.",
                        "default": false
                    },
                    "in_scope": {
                        "type": "boolean",
                        "description": "Whether queries should be restricted to use of indexed data."
                    },
                    "strictness": {
                        "maximum": 5,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.",
                        "format": "int32"
                    },
                    "database_name": {
                        "type": "string",
                        "description": "The MongoDB vCore database name to use with Azure Cosmos DB."
                    },
                    "container_name": {
                        "type": "string",
                        "description": "The name of the Azure Cosmos DB resource container."
                    },
                    "index_name": {
                        "type": "string",
                        "description": "The MongoDB vCore index name to use with Azure Cosmos DB."
                    },
                    "fields_mapping": {
                        "$ref": "#/components/schemas/azureCosmosDBFieldMappingOptions"
                    },
                    "embedding_dependency": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/onYourDataEndpointVectorizationSource"
                            },
                            {
                                "$ref": "#/components/schemas/onYourDataDeploymentNameVectorizationSource"
                            }
                        ]
                    },
                    "include_contexts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/onYourDataContextProperty"
                        },
                        "description": "The included properties of the output context. If not specified, the default value is `citations` and `intent`."
                    }
                },
                "description": "Parameters to use when configuring Azure OpenAI On Your Data chat extensions when using Azure Cosmos DB for\nMongoDB vCore."
            },
            "azureCosmosDBFieldMappingOptions": {
                "required": [
                    "content_fields",
                    "vector_fields"
                ],
                "type": "object",
                "properties": {
                    "title_field": {
                        "type": "string",
                        "description": "The name of the index field to use as a title."
                    },
                    "url_field": {
                        "type": "string",
                        "description": "The name of the index field to use as a URL."
                    },
                    "filepath_field": {
                        "type": "string",
                        "description": "The name of the index field to use as a filepath."
                    },
                    "content_fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of index fields that should be treated as content."
                    },
                    "content_fields_separator": {
                        "type": "string",
                        "description": "The separator pattern that content fields should use."
                    },
                    "vector_fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of fields that represent vector data."
                    }
                },
                "description": "Optional settings to control how fields are processed when using a configured Azure Cosmos DB resource."
            },
            "elasticsearchChatExtensionConfiguration": {
                "required": [
                    "parameters"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/azureChatExtensionConfiguration"
                    },
                    {
                        "properties": {
                            "parameters": {
                                "$ref": "#/components/schemas/elasticsearchChatExtensionParameters"
                            }
                        }
                    }
                ],
                "description": "A specific representation of configurable options for Elasticsearch when using it as an Azure OpenAI chat\nextension.",
                "x-ms-discriminator-value": "elasticsearch"
            },
            "elasticsearchChatExtensionParameters": {
                "required": [
                    "authentication",
                    "endpoint",
                    "index_name"
                ],
                "type": "object",
                "properties": {
                    "authentication": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/onYourDataKeyAndKeyIdAuthenticationOptions"
                            },
                            {
                                "$ref": "#/components/schemas/onYourDataEncodedApiKeyAuthenticationOptions"
                            }
                        ]
                    },
                    "top_n_documents": {
                        "type": "integer",
                        "description": "The configured top number of documents to feature for the configured query.",
                        "format": "int32"
                    },
                    "max_search_queries": {
                        "type": "integer",
                        "description": "The max number of rewritten queries should be send to search provider for one user message. If not specified, the system will decide the number of queries to send.",
                        "format": "int32"
                    },
                    "allow_partial_result": {
                        "type": "boolean",
                        "description": "If specified as true, the system will allow partial search results to be used and the request fails if all the queries fail. If not specified, or specified as false, the request will fail if any search query fails.",
                        "default": false
                    },
                    "in_scope": {
                        "type": "boolean",
                        "description": "Whether queries should be restricted to use of indexed data."
                    },
                    "strictness": {
                        "maximum": 5,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.",
                        "format": "int32"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The endpoint of Elasticsearch®.",
                        "format": "uri"
                    },
                    "index_name": {
                        "type": "string",
                        "description": "The index name of Elasticsearch®."
                    },
                    "fields_mapping": {
                        "$ref": "#/components/schemas/elasticsearchIndexFieldMappingOptions"
                    },
                    "query_type": {
                        "$ref": "#/components/schemas/elasticsearchQueryType"
                    },
                    "embedding_dependency": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/onYourDataEndpointVectorizationSource"
                            },
                            {
                                "$ref": "#/components/schemas/onYourDataDeploymentNameVectorizationSource"
                            },
                            {
                                "$ref": "#/components/schemas/onYourDataModelIdVectorizationSource"
                            }
                        ]
                    },
                    "include_contexts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/onYourDataContextProperty"
                        },
                        "description": "The included properties of the output context. If not specified, the default value is `citations` and `intent`."
                    }
                },
                "description": "Parameters to use when configuring Elasticsearch® as an Azure OpenAI chat extension. "
            },
            "elasticsearchIndexFieldMappingOptions": {
                "type": "object",
                "properties": {
                    "title_field": {
                        "type": "string",
                        "description": "The name of the index field to use as a title."
                    },
                    "url_field": {
                        "type": "string",
                        "description": "The name of the index field to use as a URL."
                    },
                    "filepath_field": {
                        "type": "string",
                        "description": "The name of the index field to use as a filepath."
                    },
                    "content_fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of index fields that should be treated as content."
                    },
                    "content_fields_separator": {
                        "type": "string",
                        "description": "The separator pattern that content fields should use."
                    },
                    "vector_fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of fields that represent vector data."
                    }
                },
                "description": "Optional settings to control how fields are processed when using a configured Elasticsearch® resource."
            },
            "elasticsearchQueryType": {
                "enum": [
                    "simple",
                    "vector"
                ],
                "type": "string",
                "description": "The type of Elasticsearch® retrieval query that should be executed when using it as an Azure OpenAI chat extension.",
                "x-ms-enum": {
                    "name": "ElasticsearchQueryType",
                    "modelAsString": true,
                    "values": [
                        {
                            "name": "simple",
                            "value": "simple",
                            "description": "Represents the default, simple query parser."
                        },
                        {
                            "name": "vector",
                            "value": "vector",
                            "description": "Represents vector search over computed data."
                        }
                    ]
                }
            },
            "mongoDBChatExtensionConfiguration": {
                "required": [
                    "parameters"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/azureChatExtensionConfiguration"
                    },
                    {
                        "properties": {
                            "parameters": {
                                "$ref": "#/components/schemas/mongoDBChatExtensionParameters"
                            }
                        }
                    }
                ],
                "description": "A specific representation of configurable options for Mongo DB when using it as an Azure OpenAI chat\nextension.",
                "x-ms-discriminator-value": "mongo_db"
            },
            "mongoDBChatExtensionParameters": {
                "required": [
                    "authentication",
                    "app_name",
                    "collection_name",
                    "database_name",
                    "endpoint",
                    "embedding_dependency",
                    "fields_mapping",
                    "index_name"
                ],
                "type": "object",
                "properties": {
                    "authentication": {
                        "$ref": "#/components/schemas/onYourDataUsernameAndPasswordAuthenticationOptions"
                    },
                    "top_n_documents": {
                        "type": "integer",
                        "description": "The configured top number of documents to feature for the configured query.",
                        "format": "int32"
                    },
                    "max_search_queries": {
                        "type": "integer",
                        "description": "The max number of rewritten queries should be send to search provider for one user message. If not specified, the system will decide the number of queries to send.",
                        "format": "int32"
                    },
                    "allow_partial_result": {
                        "type": "boolean",
                        "description": "If specified as true, the system will allow partial search results to be used and the request fails if all the queries fail. If not specified, or specified as false, the request will fail if any search query fails.",
                        "default": false
                    },
                    "in_scope": {
                        "type": "boolean",
                        "description": "Whether queries should be restricted to use of indexed data."
                    },
                    "strictness": {
                        "maximum": 5,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.",
                        "format": "int32"
                    },
                    "endpoint": {
                        "type": "string",
                        "description": "The name of the Mongo DB cluster endpoint."
                    },
                    "database_name": {
                        "type": "string",
                        "description": "The name of the Mongo DB database."
                    },
                    "collection_name": {
                        "type": "string",
                        "description": "The name of the Mongo DB Collection."
                    },
                    "app_name": {
                        "type": "string",
                        "description": "The name of the Mongo DB Application."
                    },
                    "index_name": {
                        "type": "string",
                        "description": "The The name of the Mongo DB index."
                    },
                    "fields_mapping": {
                        "$ref": "#/components/schemas/mongoDBFieldMappingOptions"
                    },
                    "embedding_dependency": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/onYourDataEndpointVectorizationSource"
                            },
                            {
                                "$ref": "#/components/schemas/onYourDataDeploymentNameVectorizationSource"
                            }
                        ]
                    },
                    "include_contexts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/onYourDataContextProperty"
                        },
                        "description": "The included properties of the output context. If not specified, the default value is `citations` and `intent`."
                    }
                },
                "description": "Parameters to use when configuring Azure OpenAI On Your Data chat extensions when using Mongo DB."
            },
            "mongoDBFieldMappingOptions": {
                "required": [
                    "content_fields",
                    "vector_fields"
                ],
                "type": "object",
                "properties": {
                    "title_field": {
                        "type": "string",
                        "description": "The name of the index field to use as a title."
                    },
                    "url_field": {
                        "type": "string",
                        "description": "The name of the index field to use as a URL."
                    },
                    "filepath_field": {
                        "type": "string",
                        "description": "The name of the index field to use as a filepath."
                    },
                    "content_fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of index fields that should be treated as content."
                    },
                    "content_fields_separator": {
                        "type": "string",
                        "description": "The separator pattern that content fields should use."
                    },
                    "vector_fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of fields that represent vector data."
                    }
                },
                "description": "Optional settings to control how fields are processed when using a configured Mongo DB resource."
            },
            "pineconeChatExtensionConfiguration": {
                "required": [
                    "parameters"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/azureChatExtensionConfiguration"
                    },
                    {
                        "properties": {
                            "parameters": {
                                "$ref": "#/components/schemas/pineconeChatExtensionParameters"
                            }
                        }
                    }
                ],
                "description": "A specific representation of configurable options for Pinecone when using it as an Azure OpenAI chat\nextension.",
                "x-ms-discriminator-value": "pinecone"
            },
            "pineconeChatExtensionParameters": {
                "required": [
                    "authentication",
                    "embedding_dependency",
                    "environment",
                    "fields_mapping",
                    "index_name"
                ],
                "type": "object",
                "properties": {
                    "authentication": {
                        "$ref": "#/components/schemas/onYourDataApiKeyAuthenticationOptions"
                    },
                    "top_n_documents": {
                        "type": "integer",
                        "description": "The configured top number of documents to feature for the configured query.",
                        "format": "int32"
                    },
                    "max_search_queries": {
                        "type": "integer",
                        "description": "The max number of rewritten queries should be send to search provider for one user message. If not specified, the system will decide the number of queries to send.",
                        "format": "int32"
                    },
                    "allow_partial_result": {
                        "type": "boolean",
                        "description": "If specified as true, the system will allow partial search results to be used and the request fails if all the queries fail. If not specified, or specified as false, the request will fail if any search query fails.",
                        "default": false
                    },
                    "in_scope": {
                        "type": "boolean",
                        "description": "Whether queries should be restricted to use of indexed data."
                    },
                    "strictness": {
                        "maximum": 5,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The configured strictness of the search relevance filtering. The higher of strictness, the higher of the precision but lower recall of the answer.",
                        "format": "int32"
                    },
                    "environment": {
                        "type": "string",
                        "description": "The environment name of Pinecone."
                    },
                    "index_name": {
                        "type": "string",
                        "description": "The name of the Pinecone database index."
                    },
                    "fields_mapping": {
                        "$ref": "#/components/schemas/pineconeFieldMappingOptions"
                    },
                    "embedding_dependency": {
                        "$ref": "#/components/schemas/onYourDataDeploymentNameVectorizationSource"
                    },
                    "include_contexts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/onYourDataContextProperty"
                        },
                        "description": "The included properties of the output context. If not specified, the default value is `citations` and `intent`."
                    }
                },
                "description": "Parameters for configuring Azure OpenAI Pinecone chat extensions."
            },
            "pineconeFieldMappingOptions": {
                "required": [
                    "content_fields"
                ],
                "type": "object",
                "properties": {
                    "title_field": {
                        "type": "string",
                        "description": "The name of the index field to use as a title."
                    },
                    "url_field": {
                        "type": "string",
                        "description": "The name of the index field to use as a URL."
                    },
                    "filepath_field": {
                        "type": "string",
                        "description": "The name of the index field to use as a filepath."
                    },
                    "content_fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The names of index fields that should be treated as content."
                    },
                    "content_fields_separator": {
                        "type": "string",
                        "description": "The separator pattern that content fields should use."
                    }
                },
                "description": "Optional settings to control how fields are processed when using a configured Pinecone resource."
            },
            "onYourDataAuthenticationOptions": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/onYourDataAuthenticationType"
                    }
                },
                "description": "The authentication options for Azure OpenAI On Your Data.",
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "api_key": "#/components/schemas/onYourDataApiKeyAuthenticationOptions",
                        "connection_string": "#/components/schemas/onYourDataConnectionStringAuthenticationOptions",
                        "key_and_key_id": "#/components/schemas/onYourDataKeyAndKeyIdAuthenticationOptions",
                        "encoded_api_key": "#/components/schemas/onYourDataEncodedApiKeyAuthenticationOptions",
                        "access_token": "#/components/schemas/onYourDataAccessTokenAuthenticationOptions",
                        "system_assigned_managed_identity": "#/components/schemas/onYourDataSystemAssignedManagedIdentityAuthenticationOptions",
                        "user_assigned_managed_identity": "#/components/schemas/onYourDataUserAssignedManagedIdentityAuthenticationOptions",
                        "username_and_password": "#/components/schemas/onYourDataUsernameAndPasswordAuthenticationOptions"
                    }
                }
            },
            "onYourDataContextProperty": {
                "enum": [
                    "citations",
                    "intent",
                    "all_retrieved_documents"
                ],
                "type": "string",
                "description": "The context property.",
                "x-ms-enum": {
                    "name": "OnYourDataContextProperty",
                    "modelAsString": true,
                    "values": [
                        {
                            "name": "citations",
                            "value": "citations",
                            "description": "The `citations` property."
                        },
                        {
                            "name": "intent",
                            "value": "intent",
                            "description": "The `intent` property."
                        },
                        {
                            "name": "allRetrievedDocuments",
                            "value": "all_retrieved_documents",
                            "description": "The `all_retrieved_documents` property."
                        }
                    ]
                }
            },
            "onYourDataAuthenticationType": {
                "enum": [
                    "api_key",
                    "connection_string",
                    "key_and_key_id",
                    "encoded_api_key",
                    "access_token",
                    "system_assigned_managed_identity",
                    "user_assigned_managed_identity",
                    "username_and_password"
                ],
                "type": "string",
                "description": "The authentication types supported with Azure OpenAI On Your Data.",
                "x-ms-enum": {
                    "name": "OnYourDataAuthenticationType",
                    "modelAsString": true,
                    "values": [
                        {
                            "name": "apiKey",
                            "value": "api_key",
                            "description": "Authentication via API key."
                        },
                        {
                            "name": "connectionString",
                            "value": "connection_string",
                            "description": "Authentication via connection string."
                        },
                        {
                            "name": "keyAndKeyId",
                            "value": "key_and_key_id",
                            "description": "Authentication via key and key ID pair."
                        },
                        {
                            "name": "encodedApiKey",
                            "value": "encoded_api_key",
                            "description": "Authentication via encoded API key."
                        },
                        {
                            "name": "accessToken",
                            "value": "access_token",
                            "description": "Authentication via access token."
                        },
                        {
                            "name": "systemAssignedManagedIdentity",
                            "value": "system_assigned_managed_identity",
                            "description": "Authentication via system-assigned managed identity."
                        },
                        {
                            "name": "userAssignedManagedIdentity",
                            "value": "user_assigned_managed_identity",
                            "description": "Authentication via user-assigned managed identity."
                        },
                        {
                            "name": "usernameAndPassword",
                            "value": "username_and_password",
                            "description": "Authentication via username and password."
                        }
                    ]
                }
            },
            "onYourDataApiKeyAuthenticationOptions": {
                "required": [
                    "key"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/onYourDataAuthenticationOptions"
                    },
                    {
                        "properties": {
                            "key": {
                                "type": "string",
                                "description": "The API key to use for authentication."
                            }
                        }
                    }
                ],
                "description": "The authentication options for Azure OpenAI On Your Data when using an API key.",
                "x-ms-discriminator-value": "api_key"
            },
            "onYourDataConnectionStringAuthenticationOptions": {
                "required": [
                    "connection_string"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/onYourDataAuthenticationOptions"
                    },
                    {
                        "properties": {
                            "connection_string": {
                                "type": "string",
                                "description": "The connection string to use for authentication."
                            }
                        }
                    }
                ],
                "description": "The authentication options for Azure OpenAI On Your Data when using a connection string.",
                "x-ms-discriminator-value": "connection_string"
            },
            "onYourDataKeyAndKeyIdAuthenticationOptions": {
                "required": [
                    "key",
                    "key_id"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/onYourDataAuthenticationOptions"
                    },
                    {
                        "properties": {
                            "key": {
                                "type": "string",
                                "description": "The Elasticsearch key to use for authentication."
                            },
                            "key_id": {
                                "type": "string",
                                "description": "The Elasticsearch key ID to use for authentication."
                            }
                        }
                    }
                ],
                "description": "The authentication options for Azure OpenAI On Your Data when using an Elasticsearch key and key ID pair.",
                "x-ms-discriminator-value": "key_and_key_id"
            },
            "onYourDataEncodedApiKeyAuthenticationOptions": {
                "required": [
                    "encoded_api_key"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/onYourDataAuthenticationOptions"
                    },
                    {
                        "properties": {
                            "encoded_api_key": {
                                "type": "string",
                                "description": "The Elasticsearch encoded API key to use for authentication."
                            }
                        }
                    }
                ],
                "description": "The authentication options for Azure OpenAI On Your Data when using an Elasticsearch encoded API key.",
                "x-ms-discriminator-value": "encoded_api_key"
            },
            "onYourDataAccessTokenAuthenticationOptions": {
                "required": [
                    "access_token"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/onYourDataAuthenticationOptions"
                    },
                    {
                        "properties": {
                            "access_token": {
                                "type": "string",
                                "description": "The access token to use for authentication."
                            }
                        }
                    }
                ],
                "description": "The authentication options for Azure OpenAI On Your Data when using access token.",
                "x-ms-discriminator-value": "access_token"
            },
            "onYourDataSystemAssignedManagedIdentityAuthenticationOptions": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/onYourDataAuthenticationOptions"
                    }
                ],
                "description": "The authentication options for Azure OpenAI On Your Data when using a system-assigned managed identity.",
                "x-ms-discriminator-value": "system_assigned_managed_identity"
            },
            "onYourDataUserAssignedManagedIdentityAuthenticationOptions": {
                "required": [
                    "managed_identity_resource_id"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/onYourDataAuthenticationOptions"
                    },
                    {
                        "properties": {
                            "managed_identity_resource_id": {
                                "type": "string",
                                "description": "The resource ID of the user-assigned managed identity to use for authentication."
                            }
                        }
                    }
                ],
                "description": "The authentication options for Azure OpenAI On Your Data when using a user-assigned managed identity.",
                "x-ms-discriminator-value": "user_assigned_managed_identity"
            },
            "onYourDataUsernameAndPasswordAuthenticationOptions": {
                "required": [
                    "username",
                    "password"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/onYourDataAuthenticationOptions"
                    },
                    {
                        "properties": {
                            "username": {
                                "type": "string",
                                "description": "The username to use for authentication."
                            },
                            "password": {
                                "type": "string",
                                "description": "The password. to use for authentication."
                            }
                        }
                    }
                ],
                "description": "The authentication options for Azure OpenAI On Your Data when using a username and a password.",
                "x-ms-discriminator-value": "username_and_password"
            },
            "onYourDataVectorizationSource": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "$ref": "#/components/schemas/onYourDataVectorizationSourceType"
                    }
                },
                "description": "An abstract representation of a vectorization source for Azure OpenAI On Your Data with vector search.",
                "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                        "endpoint": "#/components/schemas/onYourDataEndpointVectorizationSource",
                        "deployment_name": "#/components/schemas/onYourDataDeploymentNameVectorizationSource",
                        "integrated": "#/components/schemas/onYourDataIntegratedVectorizationSource",
                        "model_id": "#/components/schemas/onYourDataModelIdVectorizationSource"
                    }
                }
            },
            "onYourDataVectorizationSourceType": {
                "enum": [
                    "endpoint",
                    "deployment_name",
                    "integrated",
                    "model_id"
                ],
                "type": "string",
                "description": "Represents the available sources Azure OpenAI On Your Data can use to configure vectorization of data for use with\nvector search.",
                "x-ms-enum": {
                    "name": "OnYourDataVectorizationSourceType",
                    "modelAsString": true,
                    "values": [
                        {
                            "name": "endpoint",
                            "value": "endpoint",
                            "description": "Represents vectorization performed by public service calls to an Azure OpenAI embedding model."
                        },
                        {
                            "name": "deploymentName",
                            "value": "deployment_name",
                            "description": "Represents an Ada model deployment name to use. This model deployment must be in the same Azure OpenAI resource, but\nOn Your Data will use this model deployment via an internal call rather than a public one, which enables vector\nsearch even in private networks."
                        },
                        {
                            "name": "integrated",
                            "value": "integrated",
                            "description": "Represents the integrated vectorizer defined within the search resource."
                        },
                        {
                            "name": "modelId",
                            "value": "model_id",
                            "description": "Represents a specific embedding model ID as defined in the search service.\nCurrently only supported by Elasticsearch®."
                        }
                    ]
                }
            },
            "onYourDataEndpointVectorizationSource": {
                "required": [
                    "authentication",
                    "endpoint"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/onYourDataVectorizationSource"
                    },
                    {
                        "properties": {
                            "endpoint": {
                                "type": "string",
                                "description": "Specifies the resource endpoint URL from which embeddings should be retrieved. It should be in the format of https://YOUR_RESOURCE_NAME.openai.azure.com/openai/deployments/YOUR_DEPLOYMENT_NAME/embeddings. The api-version query parameter is not allowed.",
                                "format": "uri"
                            },
                            "authentication": {
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/onYourDataApiKeyAuthenticationOptions"
                                    },
                                    {
                                        "$ref": "#/components/schemas/onYourDataAccessTokenAuthenticationOptions"
                                    }
                                ]
                            },
                            "dimensions": {
                                "type": "integer",
                                "description": "The number of dimensions the embeddings should have. Only supported in `text-embedding-3` and later models.",
                                "format": "int32"
                            }
                        }
                    }
                ],
                "description": "The details of a a vectorization source, used by Azure OpenAI On Your Data when applying vector search, that is based\non a public Azure OpenAI endpoint call for embeddings.",
                "x-ms-discriminator-value": "endpoint"
            },
            "onYourDataDeploymentNameVectorizationSource": {
                "required": [
                    "deployment_name"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/onYourDataVectorizationSource"
                    },
                    {
                        "properties": {
                            "deployment_name": {
                                "type": "string",
                                "description": "Specifies the name of the model deployment to use for vectorization. This model deployment must be in the same Azure OpenAI resource, but On Your Data will use this model deployment via an internal call rather than a public one, which enables vector search even in private networks."
                            },
                            "dimensions": {
                                "type": "integer",
                                "description": "The number of dimensions the embeddings should have. Only supported in `text-embedding-3` and later models.",
                                "format": "int32"
                            }
                        }
                    }
                ],
                "description": "The details of a a vectorization source, used by Azure OpenAI On Your Data when applying vector search, that is based\non an internal embeddings model deployment name in the same Azure OpenAI resource.",
                "x-ms-discriminator-value": "deployment_name"
            },
            "onYourDataIntegratedVectorizationSource": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/onYourDataVectorizationSource"
                    }
                ],
                "description": "Represents the integrated vectorizer defined within the search resource.",
                "x-ms-discriminator-value": "integrated"
            },
            "onYourDataModelIdVectorizationSource": {
                "required": [
                    "model_id"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/onYourDataVectorizationSource"
                    },
                    {
                        "properties": {
                            "model_id": {
                                "type": "string",
                                "description": "Specifies the model ID to use for vectorization. This model ID must be defined in the search service."
                            }
                        }
                    }
                ],
                "description": "The details of a a vectorization source, used by Azure OpenAI On Your Data when applying vector search, that is based\non a search service model ID. Currently only supported by Elasticsearch®.",
                "x-ms-discriminator-value": "model_id"
            },
            "azureChatExtensionsMessageContext": {
                "type": "object",
                "properties": {
                    "citations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/citation"
                        },
                        "description": "The data source retrieval result, used to generate the assistant message in the response.",
                        "x-ms-identifiers": []
                    },
                    "intent": {
                        "type": "string",
                        "description": "The detected intent from the chat history, used to pass to the next turn to carry over the context."
                    },
                    "all_retrieved_documents": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/retrievedDocument"
                        },
                        "description": "All the retrieved documents."
                    }
                },
                "description": "  A representation of the additional context information available when Azure OpenAI chat extensions are involved\n  in the generation of a corresponding chat completions response. This context information is only populated when\n  using an Azure OpenAI request configured to use a matching extension."
            },
            "citation": {
                "required": [
                    "content"
                ],
                "type": "object",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "The content of the citation."
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the citation."
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the citation."
                    },
                    "filepath": {
                        "type": "string",
                        "description": "The file path of the citation."
                    },
                    "chunk_id": {
                        "type": "string",
                        "description": "The chunk ID of the citation."
                    },
                    "rerank_score": {
                        "type": "number",
                        "description": "The rerank score of the retrieved document.",
                        "format": "double"
                    }
                },
                "description": "citation information for a chat completions response message."
            },
            "retrievedDocument": {
                "required": [
                    "search_queries",
                    "data_source_index",
                    "original_search_score"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/citation"
                    },
                    {
                        "properties": {
                            "search_queries": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "The search queries used to retrieve the document."
                            },
                            "data_source_index": {
                                "type": "integer",
                                "description": "The index of the data source.",
                                "format": "int32"
                            },
                            "original_search_score": {
                                "type": "number",
                                "description": "The original search score of the retrieved document.",
                                "format": "double"
                            },
                            "filter_reason": {
                                "$ref": "#/components/schemas/filterReason"
                            }
                        }
                    }
                ],
                "description": "The retrieved document."
            },
            "filterReason": {
                "enum": [
                    "score",
                    "rerank"
                ],
                "type": "string",
                "description": "The filtering reason of the retrieved document.",
                "x-ms-enum": {
                    "name": "FilterReason",
                    "modelAsString": true,
                    "values": [
                        {
                            "name": "score",
                            "value": "score",
                            "description": "The document is filtered by original search score threshold defined by `strictness` configure."
                        },
                        {
                            "name": "rerank",
                            "value": "rerank",
                            "description": "The document is not filtered by original search score threshold, but is filtered by rerank score and `top_n_documents` configure."
                        }
                    ]
                }
            },
            "chatCompletionMessageToolCall": {
                "required": [
                    "id",
                    "type",
                    "function"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the tool call."
                    },
                    "type": {
                        "$ref": "#/components/schemas/toolCallType"
                    },
                    "function": {
                        "required": [
                            "name",
                            "arguments"
                        ],
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the function to call."
                            },
                            "arguments": {
                                "type": "string",
                                "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
                            }
                        },
                        "description": "The function that the model called."
                    }
                }
            },
            "toolCallType": {
                "enum": [
                    "function"
                ],
                "type": "string",
                "description": "The type of the tool call, in this case `function`.",
                "x-ms-enum": {
                    "name": "ToolCallType",
                    "modelAsString": true,
                    "values": [
                        {
                            "value": "function",
                            "description": "The tool call type is function."
                        }
                    ]
                }
            },
            "chatCompletionRequestMessageTool": {
                "required": [
                    "tool_call_id",
                    "content"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/chatCompletionRequestMessage"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "tool_call_id": {
                                "type": "string",
                                "description": "Tool call that this message is responding to."
                            },
                            "content": {
                                "type": "string",
                                "description": "The contents of the message.",
                                "nullable": true
                            }
                        },
                        "nullable": true
                    }
                ]
            },
            "chatCompletionRequestMessageFunction": {
                "required": [
                    "function_call_id",
                    "content"
                ],
                "allOf": [
                    {
                        "$ref": "#/components/schemas/chatCompletionRequestMessage"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "role": {
                                "enum": [
                                    "function"
                                ],
                                "type": "string",
                                "description": "The role of the messages author, in this case `function`."
                            },
                            "name": {
                                "type": "string",
                                "description": "The contents of the message."
                            },
                            "content": {
                                "type": "string",
                                "description": "The contents of the message.",
                                "nullable": true
                            }
                        },
                        "description": "Deprecated. Message that represents a function.",
                        "nullable": true
                    }
                ]
            },
            "createChatCompletionResponse": {
                "required": [
                    "choices",
                    "created",
                    "id",
                    "model",
                    "object"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "A unique identifier for the chat completion."
                    },
                    "prompt_filter_results": {
                        "$ref": "#/components/schemas/promptFilterResults"
                    },
                    "choices": {
                        "type": "array",
                        "items": {
                            "required": [
                                "finish_reason",
                                "index",
                                "message",
                                "logprobs"
                            ],
                            "type": "object",
                            "properties": {
                                "finish_reason": {
                                    "enum": [
                                        "stop",
                                        "length",
                                        "tool_calls",
                                        "content_filter",
                                        "function_call"
                                    ],
                                    "type": "string",
                                    "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\n`content_filter` if content was omitted due to a flag from our content filters,\n`tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.\n"
                                },
                                "index": {
                                    "type": "integer",
                                    "description": "The index of the choice in the list of choices."
                                },
                                "message": {
                                    "$ref": "#/components/schemas/chatCompletionResponseMessage"
                                },
                                "content_filter_results": {
                                    "$ref": "#/components/schemas/contentFilterChoiceResults"
                                },
                                "logprobs": {
                                    "required": [
                                        "content",
                                        "refusal"
                                    ],
                                    "type": "object",
                                    "properties": {
                                        "content": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/chatCompletionTokenLogprob"
                                            },
                                            "description": "A list of message content tokens with log probability information.",
                                            "nullable": true
                                        },
                                        "refusal": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/chatCompletionTokenLogprob"
                                            },
                                            "description": "A list of message refusal tokens with log probability information.",
                                            "nullable": true
                                        }
                                    },
                                    "description": "Log probability information for the choice.",
                                    "nullable": true
                                }
                            }
                        },
                        "description": "A list of chat completion choices. Can be more than one if `n` is greater than 1."
                    },
                    "created": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) of when the chat completion was created."
                    },
                    "model": {
                        "type": "string",
                        "description": "The model used for the chat completion."
                    },
                    "system_fingerprint": {
                        "type": "string",
                        "description": "This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n"
                    },
                    "object": {
                        "enum": [
                            "chat.completion"
                        ],
                        "type": "string",
                        "description": "The object type, which is always `chat.completion`."
                    },
                    "usage": {
                        "$ref": "#/components/schemas/completionUsage"
                    }
                },
                "description": "Represents a chat completion response returned by model, based on the provided input."
            },
            "createChatCompletionStreamResponse": {
                "required": [
                    "choices",
                    "created",
                    "id",
                    "model",
                    "object"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "A unique identifier for the chat completion. Each chunk has the same ID."
                    },
                    "choices": {
                        "type": "array",
                        "items": {
                            "required": [
                                "delta",
                                "finish_reason",
                                "index"
                            ],
                            "type": "object",
                            "properties": {
                                "delta": {
                                    "$ref": "#/components/schemas/chatCompletionStreamResponseDelta"
                                },
                                "logprobs": {
                                    "required": [
                                        "content",
                                        "refusal"
                                    ],
                                    "type": "object",
                                    "properties": {
                                        "content": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/chatCompletionTokenLogprob"
                                            },
                                            "description": "A list of message content tokens with log probability information.",
                                            "nullable": true
                                        },
                                        "refusal": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/chatCompletionTokenLogprob"
                                            },
                                            "description": "A list of message refusal tokens with log probability information.",
                                            "nullable": true
                                        }
                                    },
                                    "description": "Log probability information for the choice.",
                                    "nullable": true
                                },
                                "finish_reason": {
                                    "enum": [
                                        "stop",
                                        "length",
                                        "tool_calls",
                                        "content_filter",
                                        "function_call"
                                    ],
                                    "type": "string",
                                    "description": "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\n`content_filter` if content was omitted due to a flag from our content filters,\n`tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.\n",
                                    "nullable": true
                                },
                                "index": {
                                    "type": "integer",
                                    "description": "The index of the choice in the list of choices."
                                }
                            }
                        },
                        "description": "A list of chat completion choices. Can contain more than one elements if `n` is greater than 1.\n"
                    },
                    "created": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp."
                    },
                    "model": {
                        "type": "string",
                        "description": "The model to generate the completion."
                    },
                    "system_fingerprint": {
                        "type": "string",
                        "description": "This fingerprint represents the backend configuration that the model runs with.\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n"
                    },
                    "object": {
                        "required": [
                            "prompt_tokens",
                            "completion_tokens",
                            "total_tokens"
                        ],
                        "enum": [
                            "chat.completion.chunk"
                        ],
                        "type": "string",
                        "description": "The object type, which is always `chat.completion.chunk`."
                    }
                },
                "description": "Represents a streamed chunk of a chat completion response returned by model, based on the provided input."
            },
            "chatCompletionStreamResponseDelta": {
                "type": "object",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "The contents of the chunk message.",
                        "nullable": true
                    },
                    "function_call": {
                        "type": "object",
                        "properties": {
                            "arguments": {
                                "type": "string",
                                "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
                            },
                            "name": {
                                "type": "string",
                                "description": "The name of the function to call."
                            }
                        },
                        "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.",
                        "deprecated": true
                    },
                    "tool_calls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/chatCompletionMessageToolCallChunk"
                        }
                    },
                    "role": {
                        "enum": [
                            "system",
                            "user",
                            "assistant",
                            "tool"
                        ],
                        "type": "string",
                        "description": "The role of the author of this message."
                    },
                    "refusal": {
                        "type": "string",
                        "description": "The refusal message generated by the model.",
                        "nullable": true
                    }
                },
                "description": "A chat completion delta generated by streamed model responses."
            },
            "chatCompletionMessageToolCallChunk": {
                "required": [
                    "index"
                ],
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the tool call."
                    },
                    "type": {
                        "enum": [
                            "function"
                        ],
                        "type": "string",
                        "description": "The type of the tool. Currently, only `function` is supported."
                    },
                    "function": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the function to call."
                            },
                            "arguments": {
                                "type": "string",
                                "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
                            }
                        }
                    }
                }
            },
            "chatCompletionStreamOptions": {
                "type": "object",
                "properties": {
                    "include_usage": {
                        "type": "boolean",
                        "description": "If set, an additional chunk will be streamed before the `data: [DONE]` message. The `usage` field on this chunk shows the token usage statistics for the entire request, and the `choices` field will always be an empty array. All other chunks will also include a `usage` field, but with a null value.\n"
                    }
                },
                "description": "Options for streaming response. Only set this when you set `stream: true`.\n",
                "default": null,
                "nullable": true
            },
            "chatCompletionChoiceLogProbs": {
                "required": [
                    "content"
                ],
                "type": "object",
                "properties": {
                    "content": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/chatCompletionTokenLogprob"
                        },
                        "description": "A list of message content tokens with log probability information.",
                        "nullable": true
                    },
                    "refusal": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/chatCompletionTokenLogprob"
                        },
                        "description": "A list of message refusal tokens with log probability information.",
                        "nullable": true
                    }
                },
                "description": "Log probability information for the choice.",
                "nullable": true
            },
            "chatCompletionTokenLogprob": {
                "required": [
                    "token",
                    "logprob",
                    "bytes",
                    "top_logprobs"
                ],
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string",
                        "description": "The token."
                    },
                    "logprob": {
                        "type": "number",
                        "description": "The log probability of this token."
                    },
                    "bytes": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
                        "nullable": true
                    },
                    "top_logprobs": {
                        "type": "array",
                        "items": {
                            "required": [
                                "token",
                                "logprob",
                                "bytes"
                            ],
                            "type": "object",
                            "properties": {
                                "token": {
                                    "type": "string",
                                    "description": "The token."
                                },
                                "logprob": {
                                    "type": "number",
                                    "description": "The log probability of this token."
                                },
                                "bytes": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer"
                                    },
                                    "description": "A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.",
                                    "nullable": true
                                }
                            }
                        },
                        "description": "List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned."
                    }
                }
            },
            "chatCompletionResponseMessage": {
                "required": [
                    "role",
                    "content",
                    "refusal"
                ],
                "type": "object",
                "properties": {
                    "role": {
                        "$ref": "#/components/schemas/chatCompletionResponseMessageRole"
                    },
                    "refusal": {
                        "type": "string",
                        "description": "The refusal message generated by the model.",
                        "nullable": true
                    },
                    "content": {
                        "type": "string",
                        "description": "The contents of the message.",
                        "nullable": true
                    },
                    "tool_calls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/chatCompletionMessageToolCall"
                        },
                        "description": "The tool calls generated by the model, such as function calls."
                    },
                    "function_call": {
                        "$ref": "#/components/schemas/chatCompletionFunctionCall"
                    },
                    "audio": {
                        "required": [
                            "id",
                            "expires_at",
                            "data",
                            "transcript"
                        ],
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "Unique identifier for this audio response."
                            },
                            "expires_at": {
                                "type": "integer",
                                "description": "The Unix timestamp (in seconds) for when this audio response will\nno longer be accessible on the server for use in multi-turn\nconversations.\n"
                            },
                            "data": {
                                "type": "string",
                                "description": "Base64 encoded audio bytes generated by the model, in the format\nspecified in the request.\n"
                            },
                            "transcript": {
                                "type": "string",
                                "description": "Transcript of the audio generated by the model."
                            }
                        },
                        "description": "If the audio output modality is requested, this object contains data\nabout the audio response from the model. [Learn more](/docs/guides/audio).\n",
                        "x-oaiExpandable": true
                    },
                    "context": {
                        "$ref": "#/components/schemas/azureChatExtensionsMessageContext"
                    }
                },
                "description": "A chat completion message generated by the model."
            },
            "chatCompletionResponseMessageRole": {
                "enum": [
                    "assistant"
                ],
                "type": "string",
                "description": "The role of the author of the response message."
            },
            "chatCompletionToolChoiceOption": {
                "oneOf": [
                    {
                        "enum": [
                            "none",
                            "auto",
                            "required"
                        ],
                        "type": "string",
                        "description": "`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function."
                    },
                    {
                        "$ref": "#/components/schemas/chatCompletionNamedToolChoice"
                    }
                ],
                "description": "Controls which (if any) tool is called by the model. `none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools. Specifying a particular tool via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool. `none` is the default when no tools are present. `auto` is the default if tools are present."
            },
            "chatCompletionNamedToolChoice": {
                "required": [
                    "type",
                    "function"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "function"
                        ],
                        "type": "string",
                        "description": "The type of the tool. Currently, only `function` is supported."
                    },
                    "function": {
                        "required": [
                            "name"
                        ],
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the function to call."
                            }
                        }
                    }
                },
                "description": "Specifies a tool the model should use. Use to force the model to call a specific function."
            },
            "ParallelToolCalls": {
                "type": "boolean",
                "description": "Whether to enable parallel function calling during tool use.",
                "default": true
            },
            "PredictionContent": {
                "title": "Static Content",
                "required": [
                    "content",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "content"
                        ],
                        "type": "string",
                        "description": "The type of the predicted content you want to provide. This type is currently always `content`."
                    },
                    "content": {
                        "oneOf": [
                            {
                                "title": "Text Content",
                                "type": "string",
                                "description": "The content used for a Predicted Output. This is often the text of a file you are regenerating with minor changes."
                            },
                            {
                                "title": "Array of content parts",
                                "minItems": 1,
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/chatCompletionRequestMessageContentPartText"
                                },
                                "description": "An array of content parts with a defined type. Supported options differ based on the [model](/docs/models) being used to generate the response. Can contain text inputs."
                            }
                        ],
                        "description": "The content that should be matched when generating a model response. If generated tokens would match this content, the entire model response can be returned much more quickly.",
                        "x-oaiExpandable": true
                    }
                },
                "description": "Static predicted output content, such as the content of a text file that is being regenerated."
            },
            "chatCompletionMessageToolCalls": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/chatCompletionMessageToolCall"
                },
                "description": "The tool calls generated by the model, such as function calls."
            },
            "ChatCompletionModalities": {
                "type": "array",
                "items": {
                    "enum": [
                        "text",
                        "audio"
                    ],
                    "type": "string"
                },
                "description": "Output types that you would like the model to generate for this request.\nMost models are capable of generating text, which is the default:\n\n`[\"text\"]`\n\nThe `gpt-4o-audio-preview` model can also be used to [generate audio](/docs/guides/audio). To\nrequest that this model generate both text and audio responses, you can\nuse:\n\n`[\"text\", \"audio\"]`\n"
            },
            "chatCompletionFunctionCall": {
                "required": [
                    "name",
                    "arguments"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the function to call."
                    },
                    "arguments": {
                        "type": "string",
                        "description": "The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."
                    }
                },
                "description": "Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model."
            },
            "completionUsage": {
                "required": [
                    "prompt_tokens",
                    "completion_tokens",
                    "total_tokens"
                ],
                "type": "object",
                "properties": {
                    "prompt_tokens": {
                        "type": "integer",
                        "description": "Number of tokens in the prompt."
                    },
                    "completion_tokens": {
                        "type": "integer",
                        "description": "Number of tokens in the generated completion."
                    },
                    "total_tokens": {
                        "type": "integer",
                        "description": "Total number of tokens used in the request (prompt + completion)."
                    },
                    "prompt_tokens_details": {
                        "type": "object",
                        "properties": {
                            "audio_tokens": {
                                "type": "integer",
                                "description": "Audio input tokens present in the prompt."
                            },
                            "cached_tokens": {
                                "type": "integer",
                                "description": "The number of cached prompt tokens."
                            }
                        },
                        "description": "Details of the prompt tokens."
                    },
                    "completion_tokens_details": {
                        "type": "object",
                        "properties": {
                            "accepted_prediction_tokens": {
                                "type": "integer",
                                "description": "When using Predicted Outputs, the number of tokens in the prediction that appeared in the completion."
                            },
                            "audio_tokens": {
                                "type": "integer",
                                "description": "Audio input tokens generated by the model."
                            },
                            "reasoning_tokens": {
                                "type": "integer",
                                "description": "Tokens generated by the model for reasoning."
                            },
                            "rejected_prediction_tokens": {
                                "type": "integer",
                                "description": "When using Predicted Outputs, the number of tokens in the prediction that did not appear in the completion. However, like reasoning tokens, these tokens are still counted in the total  completion tokens for purposes of billing, output, and context window limits."
                            }
                        },
                        "description": "Breakdown of tokens used in a completion."
                    }
                },
                "description": "Usage statistics for the completion request."
            },
            "chatCompletionTool": {
                "required": [
                    "type",
                    "function"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "function"
                        ],
                        "type": "string",
                        "description": "The type of the tool. Currently, only `function` is supported."
                    },
                    "function": {
                        "$ref": "#/components/schemas/FunctionObject"
                    }
                }
            },
            "FunctionParameters": {
                "type": "object",
                "description": "The parameters the functions accepts, described as a JSON Schema object. See the guide](https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list."
            },
            "FunctionObject": {
                "required": [
                    "name"
                ],
                "type": "object",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description of what the function does, used by the model to choose when and how to call the function."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
                    },
                    "parameters": {
                        "$ref": "#/components/schemas/FunctionParameters"
                    },
                    "strict": {
                        "type": "boolean",
                        "description": "Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling).",
                        "default": false,
                        "nullable": true
                    }
                }
            },
            "ResponseFormatText": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "text"
                        ],
                        "type": "string",
                        "description": "The type of response format being defined: `text`"
                    }
                }
            },
            "ResponseFormatJsonObject": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "json_object"
                        ],
                        "type": "string",
                        "description": "The type of response format being defined: `json_object`"
                    }
                }
            },
            "ResponseFormatJsonSchemaSchema": {
                "type": "object",
                "description": "The schema for the response format, described as a JSON Schema object."
            },
            "ResponseFormatJsonSchema": {
                "required": [
                    "type",
                    "json_schema"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "json_schema"
                        ],
                        "type": "string",
                        "description": "The type of response format being defined: `json_schema`"
                    },
                    "json_schema": {
                        "required": [
                            "schema",
                            "name"
                        ],
                        "type": "object",
                        "properties": {
                            "description": {
                                "type": "string",
                                "description": "A description of what the response format is for, used by the model to determine how to respond in the format."
                            },
                            "name": {
                                "type": "string",
                                "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
                            },
                            "schema": {
                                "$ref": "#/components/schemas/ResponseFormatJsonSchemaSchema"
                            },
                            "strict": {
                                "type": "boolean",
                                "description": "Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`.",
                                "default": false,
                                "nullable": true
                            }
                        }
                    }
                }
            },
            "chatCompletionChoiceCommon": {
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer"
                    },
                    "finish_reason": {
                        "type": "string"
                    }
                }
            },
            "createTranslationRequest": {
                "required": [
                    "file"
                ],
                "type": "object",
                "properties": {
                    "file": {
                        "type": "string",
                        "description": "The audio file to translate.",
                        "format": "binary"
                    },
                    "prompt": {
                        "type": "string",
                        "description": "An optional text to guide the model's style or continue a previous audio segment. The prompt should be in English."
                    },
                    "response_format": {
                        "$ref": "#/components/schemas/audioResponseFormat"
                    },
                    "temperature": {
                        "type": "number",
                        "description": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit.",
                        "default": 0
                    }
                },
                "description": "Translation request."
            },
            "audioResponse": {
                "required": [
                    "text"
                ],
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "Translated or transcribed text."
                    }
                },
                "description": "Translation or transcription response when response_format was json"
            },
            "audioVerboseResponse": {
                "required": [
                    "text"
                ],
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/audioResponse"
                    },
                    {
                        "properties": {
                            "task": {
                                "enum": [
                                    "transcribe",
                                    "translate"
                                ],
                                "type": "string",
                                "description": "Type of audio task.",
                                "x-ms-enum": {
                                    "modelAsString": true
                                }
                            },
                            "language": {
                                "type": "string",
                                "description": "Language."
                            },
                            "duration": {
                                "type": "number",
                                "description": "Duration."
                            },
                            "segments": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/audioSegment"
                                }
                            },
                            "words": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/audioWord"
                                }
                            }
                        }
                    }
                ],
                "description": "Translation or transcription response when response_format was verbose_json"
            },
            "audioResponseFormat": {
                "title": "AudioResponseFormat",
                "enum": [
                    "json",
                    "text",
                    "srt",
                    "verbose_json",
                    "vtt"
                ],
                "type": "string",
                "description": "Defines the format of the output.",
                "x-ms-enum": {
                    "modelAsString": true
                }
            },
            "createTranscriptionRequest": {
                "required": [
                    "file"
                ],
                "type": "object",
                "properties": {
                    "file": {
                        "type": "string",
                        "description": "The audio file object to transcribe.",
                        "format": "binary"
                    },
                    "prompt": {
                        "type": "string",
                        "description": "An optional text to guide the model's style or continue a previous audio segment. The prompt should match the audio language."
                    },
                    "response_format": {
                        "$ref": "#/components/schemas/audioResponseFormat"
                    },
                    "temperature": {
                        "type": "number",
                        "description": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit.",
                        "default": 0
                    },
                    "language": {
                        "type": "string",
                        "description": "The language of the input audio. Supplying the input language in ISO-639-1 format will improve accuracy and latency."
                    },
                    "timestamp_granularities[]": {
                        "type": "array",
                        "items": {
                            "enum": [
                                "word",
                                "segment"
                            ],
                            "type": "string"
                        },
                        "description": "The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.",
                        "default": [
                            "segment"
                        ]
                    }
                },
                "description": "Transcription request."
            },
            "audioSegment": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Segment identifier."
                    },
                    "seek": {
                        "type": "number",
                        "description": "Offset of the segment."
                    },
                    "start": {
                        "type": "number",
                        "description": "Segment start offset."
                    },
                    "end": {
                        "type": "number",
                        "description": "Segment end offset."
                    },
                    "text": {
                        "type": "string",
                        "description": "Segment text."
                    },
                    "tokens": {
                        "type": "array",
                        "items": {
                            "type": "number"
                        },
                        "description": "Tokens of the text."
                    },
                    "temperature": {
                        "type": "number",
                        "description": "Temperature."
                    },
                    "avg_logprob": {
                        "type": "number",
                        "description": "Average log probability."
                    },
                    "compression_ratio": {
                        "type": "number",
                        "description": "Compression ratio."
                    },
                    "no_speech_prob": {
                        "type": "number",
                        "description": "Probability of 'no speech'."
                    }
                },
                "description": "Transcription or translation segment."
            },
            "audioWord": {
                "type": "object",
                "properties": {
                    "word": {
                        "type": "string",
                        "description": "Word"
                    },
                    "start": {
                        "type": "number",
                        "description": "Word start offset."
                    },
                    "end": {
                        "type": "number",
                        "description": "Word end offset."
                    }
                },
                "description": "Transcription or translation word."
            },
            "createSpeechRequest": {
                "required": [
                    "input",
                    "voice"
                ],
                "type": "object",
                "properties": {
                    "input": {
                        "maxLength": 4096,
                        "type": "string",
                        "description": "The text to synthesize audio for. The maximum length is 4096 characters."
                    },
                    "voice": {
                        "enum": [
                            "alloy",
                            "echo",
                            "fable",
                            "onyx",
                            "nova",
                            "shimmer"
                        ],
                        "type": "string",
                        "description": "The voice to use for speech synthesis."
                    },
                    "response_format": {
                        "enum": [
                            "mp3",
                            "opus",
                            "aac",
                            "flac",
                            "wav",
                            "pcm"
                        ],
                        "type": "string",
                        "description": "The format to synthesize the audio in."
                    },
                    "speed": {
                        "maximum": 4,
                        "minimum": 0.25,
                        "type": "number",
                        "description": "The speed of the synthesize audio. Select a value from `0.25` to `4.0`. `1.0` is the default.",
                        "default": 1
                    }
                },
                "description": "Speech request."
            },
            "imageQuality": {
                "enum": [
                    "auto",
                    "high",
                    "medium",
                    "low",
                    "hd",
                    "standard"
                ],
                "type": "string",
                "description": "The quality of the image that will be generated.",
                "default": "auto",
                "x-ms-enum": {
                    "name": "ImageQuality",
                    "modelAsString": true,
                    "values": [
                        {
                            "value": "auto",
                            "description": "Automatically selects the best quality for the given model."
                        },
                        {
                            "value": "high",
                            "description": "High quality. Supported for gpt-image-1."
                        },
                        {
                            "value": "medium",
                            "description": "Medium quality. Supported for gpt-image-1."
                        },
                        {
                            "value": "low",
                            "description": "Low quality. Supported for gpt-image-1."
                        },
                        {
                            "value": "hd",
                            "description": "HD quality. Supported for dall-e-3."
                        },
                        {
                            "value": "standard",
                            "description": "Standard quality. Supported for dall-e-3."
                        }
                    ]
                }
            },
            "imagesResponseFormat": {
                "enum": [
                    "url",
                    "b64_json"
                ],
                "type": "string",
                "description": "The format in which the generated images are returned.",
                "default": "url",
                "x-ms-enum": {
                    "name": "ImagesResponseFormat",
                    "modelAsString": true,
                    "values": [
                        {
                            "value": "url",
                            "description": "The URL that provides temporary access to download the generated images. Only supported for dall-e-3.",
                            "name": "Url"
                        },
                        {
                            "value": "b64_json",
                            "description": "The generated images are returned as base64 encoded string.",
                            "name": "Base64Json"
                        }
                    ]
                }
            },
            "imagesOutputFormat": {
                "enum": [
                    "png",
                    "jpeg"
                ],
                "type": "string",
                "description": "The file format in which the generated images are returned. Only supported for gpt-image-1.",
                "default": "png",
                "x-ms-enum": {
                    "name": "imagesOutputFormat",
                    "modelAsString": true,
                    "values": [
                        {
                            "value": "png",
                            "description": "The generated image is in png format.",
                            "name": "png"
                        },
                        {
                            "value": "jpeg",
                            "description": "The generated image is in jpeg format.",
                            "name": "jpeg"
                        }
                    ]
                }
            },
            "imageSize": {
                "enum": [
                    "auto",
                    "1792x1024",
                    "1024x1792",
                    "1024x1024",
                    "1024x1536",
                    "1536x1024"
                ],
                "type": "string",
                "description": "The size of the generated images.",
                "default": "auto",
                "x-ms-enum": {
                    "name": "Size",
                    "modelAsString": true,
                    "values": [
                        {
                            "value": "auto",
                            "description": "The size of the generated image is automatically selected based on the model. Only supported for gpt-image-1.",
                            "name": "Auto"
                        },
                        {
                            "value": "1792x1024",
                            "description": "The desired size of the generated image is 1792x1024 pixels. Only supported for dall-e-3.",
                            "name": "Size1792x1024"
                        },
                        {
                            "value": "1024x1792",
                            "description": "The desired size of the generated image is 1024x1792 pixels. Only supported for dall-e-3.",
                            "name": "Size1024x1792"
                        },
                        {
                            "value": "1024x1024",
                            "description": "The desired size of the generated image is 1024x1024 pixels.",
                            "name": "Size1024x1024"
                        },
                        {
                            "value": "1024x1536",
                            "description": "The desired size of the generated image is 1024x1536 pixels. Only supported for gpt-image-1.",
                            "name": "Size1024x1536"
                        },
                        {
                            "value": "1536x1024",
                            "description": "The desired size of the generated image is 1536x1024 pixels Only supported for gpt-image-1.",
                            "name": "Size1536x1024"
                        }
                    ]
                }
            },
            "imageStyle": {
                "enum": [
                    "vivid",
                    "natural"
                ],
                "type": "string",
                "description": "The style of the generated images. Only supported for dall-e-3.",
                "default": "vivid",
                "x-ms-enum": {
                    "name": "Style",
                    "modelAsString": true,
                    "values": [
                        {
                            "value": "vivid",
                            "description": "Vivid creates images that are hyper-realistic and dramatic.",
                            "name": "Vivid"
                        },
                        {
                            "value": "natural",
                            "description": "Natural creates images that are more natural and less hyper-realistic.",
                            "name": "Natural"
                        }
                    ]
                }
            },
            "imageBackground": {
                "enum": [
                    "transparent",
                    "opaque",
                    "auto"
                ],
                "type": "string",
                "description": "Allows to set transparency for the background of the generated image(s). This parameter is only supported for gpt-image-1.",
                "default": "auto",
                "x-ms-enum": {
                    "name": "Background",
                    "modelAsString": true,
                    "values": [
                        {
                            "value": "transparent",
                            "description": "The background of the generated image will be transparent. The output format needs to support transparency (e.g., png).",
                            "name": "Transparent"
                        },
                        {
                            "value": "opaque",
                            "description": "The background of the generated image will be opaque.",
                            "name": "Opaque"
                        },
                        {
                            "value": "auto",
                            "description": "The background of the generated image will be opaque.",
                            "name": "Auto"
                        }
                    ]
                }
            },
            "imageGenerationsRequest": {
                "required": [
                    "prompt"
                ],
                "type": "object",
                "properties": {
                    "prompt": {
                        "minLength": 1,
                        "type": "string",
                        "description": "A text description of the desired image(s). The maximum length is 32000 characters for gpt-image-1 and 4000 characters for dall-e-3",
                        "format": "string",
                        "example": "a corgi in a field"
                    },
                    "background": {
                        "$ref": "#/components/schemas/imageBackground"
                    },
                    "n": {
                        "maximum": 10,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The number of images to generate. For dall-e-3, only n=1 is supported.",
                        "default": 1
                    },
                    "output_compression": {
                        "maximum": 100,
                        "minimum": 0,
                        "type": "integer",
                        "description": "The compression level (0-100%) for the generated images. This parameter is only supported for gpt-image-1 with the jpeg output format.",
                        "default": 100
                    },
                    "output_format": {
                        "$ref": "#/components/schemas/imagesOutputFormat"
                    },
                    "quality": {
                        "$ref": "#/components/schemas/imageQuality"
                    },
                    "response_format": {
                        "$ref": "#/components/schemas/imagesResponseFormat"
                    },
                    "size": {
                        "$ref": "#/components/schemas/imageSize"
                    },
                    "style": {
                        "$ref": "#/components/schemas/imageStyle"
                    },
                    "user": {
                        "type": "string",
                        "description": "A unique identifier representing your end-user, which can help to monitor and detect abuse.",
                        "format": "string",
                        "example": "user123456"
                    }
                }
            },
            "imageEditsRequest": {
                "required": [
                    "image",
                    "prompt"
                ],
                "type": "object",
                "properties": {
                    "image": {
                        "oneOf": [
                            {
                                "type": "string",
                                "format": "binary"
                            },
                            {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        ],
                        "description": "The image(s) to edit. Must be a supported image file or an array of images. Each image should be a png, or jpg file less than 25MB."
                    },
                    "prompt": {
                        "minLength": 1,
                        "type": "string",
                        "description": "A text description of the desired image(s). The maximum length is 32000 characters.",
                        "format": "string",
                        "example": "a corgi in a field"
                    },
                    "mask": {
                        "type": "string",
                        "description": "An additional image whose fully transparent areas (e.g., where alpha is zero) indicate where the image should be edited. If there are multiple images provided, the mask will be applied to the first image. Must be a valid PNG file, less than 4MB, and have the same dimensions as the image.",
                        "format": "binary"
                    },
                    "n": {
                        "maximum": 10,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The number of images to generate.",
                        "default": 1
                    },
                    "quality": {
                        "$ref": "#/components/schemas/imageQuality"
                    },
                    "response_format": {
                        "$ref": "#/components/schemas/imagesResponseFormat"
                    },
                    "size": {
                        "$ref": "#/components/schemas/imageSize"
                    },
                    "user": {
                        "type": "string",
                        "description": "A unique identifier representing your end-user, which can help to monitor and detect abuse.",
                        "format": "string",
                        "example": "user123456"
                    }
                }
            },
            "generateImagesResponse": {
                "required": [
                    "created",
                    "data"
                ],
                "type": "object",
                "properties": {
                    "created": {
                        "type": "integer",
                        "description": "The unix timestamp when the operation was created.",
                        "format": "unixtime",
                        "example": "1676540381"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/imageResult"
                        },
                        "description": "The result data of the operation, if successful"
                    },
                    "usage": {
                        "$ref": "#/components/schemas/imageGenerationsUsage"
                    }
                }
            },
            "imageResult": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "description": "The image url.",
                        "example": "https://www.contoso.com"
                    },
                    "b64_json": {
                        "type": "string",
                        "description": "The base64 encoded image"
                    },
                    "content_filter_results": {
                        "$ref": "#/components/schemas/dalleContentFilterResults"
                    },
                    "revised_prompt": {
                        "type": "string",
                        "description": "The prompt that was used to generate the image, if there was any revision to the prompt."
                    },
                    "prompt_filter_results": {
                        "$ref": "#/components/schemas/dalleFilterResults"
                    }
                },
                "description": "The image url or encoded image if successful, and an error otherwise."
            },
            "imageGenerationsUsage": {
                "type": "object",
                "properties": {
                    "total_tokens": {
                        "type": "integer",
                        "description": "The total number of tokens used.",
                        "example": 100
                    },
                    "input_tokens": {
                        "type": "integer",
                        "description": "The number of input tokens.",
                        "example": 50
                    },
                    "output_tokens": {
                        "type": "integer",
                        "description": "The number of output tokens.",
                        "example": 50
                    },
                    "input_tokens_details": {
                        "type": "object",
                        "properties": {
                            "text_tokens": {
                                "type": "integer",
                                "description": "The number of text tokens.",
                                "example": 10
                            },
                            "image_tokens": {
                                "type": "integer",
                                "description": "The number of image tokens.",
                                "example": 40
                            }
                        },
                        "description": "A detailed breakdown of the input tokens."
                    }
                },
                "description": "Represents token usage details for image generation requests. Only for gpt-image-1."
            },
            "line": {
                "required": [
                    "text",
                    "spans"
                ],
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string"
                    },
                    "spans": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/span"
                        },
                        "description": "An array of spans that represent detected objects and its bounding box information."
                    }
                },
                "description": "A content line object consisting of an adjacent sequence of content elements, such as words and selection marks."
            },
            "span": {
                "required": [
                    "text",
                    "offset",
                    "length",
                    "polygon"
                ],
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "The text content of the span that represents the detected object."
                    },
                    "offset": {
                        "type": "integer",
                        "description": "The character offset within the text where the span begins. This offset is defined as the position of the first character of the span, counting from the start of the text as Unicode codepoints."
                    },
                    "length": {
                        "type": "integer",
                        "description": "The length of the span in characters, measured in Unicode codepoints."
                    },
                    "polygon": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "x": {
                                    "type": "number",
                                    "description": "The x-coordinate of the point."
                                },
                                "y": {
                                    "type": "number",
                                    "description": "The y-coordinate of the point."
                                }
                            }
                        },
                        "description": "An array of objects representing points in the polygon that encloses the detected object."
                    }
                },
                "description": "A span object that represents a detected object and its bounding box information."
            },
            "runCompletionUsage": {
                "required": [
                    "prompt_tokens",
                    "completion_tokens",
                    "total_tokens"
                ],
                "type": "object",
                "properties": {
                    "completion_tokens": {
                        "type": "integer",
                        "description": "Number of completion tokens used over the course of the run."
                    },
                    "prompt_tokens": {
                        "type": "integer",
                        "description": "Number of prompt tokens used over the course of the run."
                    },
                    "total_tokens": {
                        "type": "integer",
                        "description": "Total number of tokens used (prompt + completion)."
                    }
                },
                "description": "Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).",
                "nullable": true
            },
            "runStepCompletionUsage": {
                "required": [
                    "prompt_tokens",
                    "completion_tokens",
                    "total_tokens"
                ],
                "type": "object",
                "properties": {
                    "completion_tokens": {
                        "type": "integer",
                        "description": "Number of completion tokens used over the course of the run step."
                    },
                    "prompt_tokens": {
                        "type": "integer",
                        "description": "Number of prompt tokens used over the course of the run step."
                    },
                    "total_tokens": {
                        "type": "integer",
                        "description": "Total number of tokens used (prompt + completion)."
                    }
                },
                "description": "Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.",
                "nullable": true
            },
            "assistantsApiResponseFormatOption": {
                "oneOf": [
                    {
                        "enum": [
                            "auto"
                        ],
                        "type": "string",
                        "description": "`auto` is the default value\n",
                        "x-ms-enum": {
                            "name": "AssistantsApiResponseFormatOption",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "auto"
                                }
                            ]
                        }
                    },
                    {
                        "$ref": "#/components/schemas/ResponseFormatText"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseFormatJsonObject"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseFormatJsonSchema"
                    }
                ],
                "description": "Specifies the format that the model must output. Compatible with GPT-4o, GPT-4 Turbo, and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the Structured Outputs guide.\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length."
            },
            "assistantsApiResponseFormat": {
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "text",
                            "json_object"
                        ],
                        "type": "string",
                        "description": "Must be one of `text` or `json_object`.",
                        "default": "text",
                        "example": "json_object",
                        "x-ms-enum": {
                            "name": "AssistantsApiResponseFormat",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "text"
                                },
                                {
                                    "value": "json_object"
                                }
                            ]
                        }
                    }
                },
                "description": "An object describing the expected output of the model. If `json_object` only `function` type `tools` are allowed to be passed to the Run. If `text` the model can return text or any value needed.\n"
            },
            "assistantObject": {
                "title": "Assistant",
                "required": [
                    "id",
                    "object",
                    "created_at",
                    "name",
                    "description",
                    "model",
                    "instructions",
                    "tools",
                    "metadata"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The identifier, which can be referenced in API endpoints."
                    },
                    "object": {
                        "enum": [
                            "assistant"
                        ],
                        "type": "string",
                        "description": "The object type, which is always `assistant`.",
                        "x-ms-enum": {
                            "name": "AssistantObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "assistant",
                                    "description": "The object type, which is always assistant"
                                }
                            ]
                        }
                    },
                    "created_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the assistant was created."
                    },
                    "name": {
                        "maxLength": 256,
                        "type": "string",
                        "description": "The name of the assistant. The maximum length is 256 characters.\n",
                        "nullable": true
                    },
                    "description": {
                        "maxLength": 512,
                        "type": "string",
                        "description": "The description of the assistant. The maximum length is 512 characters.\n",
                        "nullable": true
                    },
                    "model": {
                        "type": "string",
                        "description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.\n"
                    },
                    "instructions": {
                        "maxLength": 256000,
                        "type": "string",
                        "description": "The system instructions that the assistant uses. The maximum length is 256,000 characters.\n",
                        "nullable": true
                    },
                    "tools": {
                        "maxItems": 128,
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/assistantToolsCode"
                                },
                                {
                                    "$ref": "#/components/schemas/assistantToolsFileSearch"
                                },
                                {
                                    "$ref": "#/components/schemas/assistantToolsFunction"
                                }
                            ]
                        },
                        "description": "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n"
                    },
                    "tool_resources": {
                        "type": "object",
                        "properties": {
                            "code_interpreter": {
                                "type": "object",
                                "properties": {
                                    "file_ids": {
                                        "maxItems": 20,
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "A list of file IDs made available to the `code_interpreter`` tool. There can be a maximum of 20 files associated with the tool.\n"
                                    }
                                }
                            },
                            "file_search": {
                                "type": "object",
                                "properties": {
                                    "vector_store_ids": {
                                        "maxItems": 1,
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "The ID of the vector store attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n"
                                    }
                                }
                            }
                        },
                        "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
                        "nullable": true
                    },
                    "temperature": {
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number",
                        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n",
                        "default": 1,
                        "nullable": true,
                        "example": 1
                    },
                    "top_p": {
                        "maximum": 1,
                        "minimum": 0,
                        "type": "number",
                        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n",
                        "default": 1,
                        "nullable": true,
                        "example": 1
                    },
                    "response_format": {
                        "$ref": "#/components/schemas/assistantsApiResponseFormatOption"
                    }
                },
                "description": "Represents an `assistant` that can call the model and use tools."
            },
            "createAssistantRequest": {
                "required": [
                    "model"
                ],
                "type": "object",
                "properties": {
                    "model": {
                        "anyOf": [
                            {
                                "type": "string"
                            }
                        ],
                        "description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.\n"
                    },
                    "name": {
                        "maxLength": 256,
                        "type": "string",
                        "description": "The name of the assistant. The maximum length is 256 characters.\n",
                        "nullable": true
                    },
                    "description": {
                        "maxLength": 512,
                        "type": "string",
                        "description": "The description of the assistant. The maximum length is 512 characters.\n",
                        "nullable": true
                    },
                    "instructions": {
                        "maxLength": 256000,
                        "type": "string",
                        "description": "The system instructions that the assistant uses. The maximum length is 256,000 characters.\n",
                        "nullable": true
                    },
                    "tools": {
                        "maxItems": 128,
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/assistantToolsCode"
                                },
                                {
                                    "$ref": "#/components/schemas/assistantToolsFileSearch"
                                },
                                {
                                    "$ref": "#/components/schemas/assistantToolsFunction"
                                }
                            ]
                        },
                        "description": "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.\n"
                    },
                    "tool_resources": {
                        "type": "object",
                        "properties": {
                            "code_interpreter": {
                                "type": "object",
                                "properties": {
                                    "file_ids": {
                                        "maxItems": 20,
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "A list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n"
                                    }
                                }
                            },
                            "file_search": {
                                "type": "object",
                                "oneOf": [
                                    {
                                        "required": [
                                            "vector_store_ids"
                                        ]
                                    },
                                    {
                                        "required": [
                                            "vector_stores"
                                        ]
                                    }
                                ],
                                "properties": {
                                    "vector_store_ids": {
                                        "maxItems": 1,
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "The vector store attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n"
                                    },
                                    "vector_stores": {
                                        "maxItems": 1,
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "file_ids": {
                                                    "maxItems": 10000,
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "description": "A list of file IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.\n"
                                                },
                                                "chunking_strategy": {
                                                    "type": "object",
                                                    "oneOf": [
                                                        {
                                                            "title": "Auto Chunking Strategy",
                                                            "required": [
                                                                "type"
                                                            ],
                                                            "type": "object",
                                                            "properties": {
                                                                "type": {
                                                                    "enum": [
                                                                        "auto"
                                                                    ],
                                                                    "type": "string",
                                                                    "description": "Always `auto`.",
                                                                    "x-ms-enum": {
                                                                        "name": "AutoChunkingStrategyType",
                                                                        "modelAsString": true,
                                                                        "values": [
                                                                            {
                                                                                "value": "auto"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "additionalProperties": false,
                                                            "description": "The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`."
                                                        },
                                                        {
                                                            "title": "Static Chunking Strategy",
                                                            "required": [
                                                                "type",
                                                                "static"
                                                            ],
                                                            "type": "object",
                                                            "properties": {
                                                                "type": {
                                                                    "enum": [
                                                                        "static"
                                                                    ],
                                                                    "type": "string",
                                                                    "description": "Always `static`.",
                                                                    "x-ms-enum": {
                                                                        "name": "StaticChunkingStrategyType",
                                                                        "modelAsString": true,
                                                                        "values": [
                                                                            {
                                                                                "value": "static"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "static": {
                                                                    "required": [
                                                                        "max_chunk_size_tokens",
                                                                        "chunk_overlap_tokens"
                                                                    ],
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "max_chunk_size_tokens": {
                                                                            "maximum": 4096,
                                                                            "minimum": 100,
                                                                            "type": "integer",
                                                                            "description": "The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`."
                                                                        },
                                                                        "chunk_overlap_tokens": {
                                                                            "type": "integer",
                                                                            "description": "The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n"
                                                                        }
                                                                    },
                                                                    "additionalProperties": false
                                                                }
                                                            },
                                                            "additionalProperties": false
                                                        }
                                                    ],
                                                    "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy."
                                                },
                                                "metadata": {
                                                    "type": "object",
                                                    "description": "Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
                                                    "x-oaiTypeLabel": "map"
                                                }
                                            }
                                        },
                                        "description": "A helper to create a vector store with file_ids and attach it to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n"
                                    }
                                }
                            }
                        },
                        "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
                        "nullable": true
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
                        "nullable": true
                    },
                    "temperature": {
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number",
                        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n",
                        "default": 1,
                        "nullable": true,
                        "example": 1
                    },
                    "top_p": {
                        "maximum": 1,
                        "minimum": 0,
                        "type": "number",
                        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n",
                        "default": 1,
                        "nullable": true,
                        "example": 1
                    },
                    "response_format": {
                        "$ref": "#/components/schemas/assistantsApiResponseFormatOption"
                    }
                },
                "additionalProperties": false
            },
            "modifyAssistantRequest": {
                "type": "object",
                "properties": {
                    "model": {
                        "anyOf": [
                            {
                                "type": "string"
                            }
                        ],
                        "description": "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.\n"
                    },
                    "name": {
                        "maxLength": 256,
                        "type": "string",
                        "description": "The name of the assistant. The maximum length is 256 characters.\n",
                        "nullable": true
                    },
                    "description": {
                        "maxLength": 512,
                        "type": "string",
                        "description": "The description of the assistant. The maximum length is 512 characters.\n",
                        "nullable": true
                    },
                    "instructions": {
                        "maxLength": 32768,
                        "type": "string",
                        "description": "The system instructions that the assistant uses. The maximum length is 32768 characters.\n",
                        "nullable": true
                    },
                    "tools": {
                        "maxItems": 128,
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/assistantToolsCode"
                                },
                                {
                                    "$ref": "#/components/schemas/assistantToolsFileSearch"
                                },
                                {
                                    "$ref": "#/components/schemas/assistantToolsFunction"
                                }
                            ]
                        },
                        "description": "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.\n"
                    },
                    "tool_resources": {
                        "type": "object",
                        "properties": {
                            "code_interpreter": {
                                "type": "object",
                                "properties": {
                                    "file_ids": {
                                        "maxItems": 20,
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "Overrides the list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n"
                                    }
                                }
                            },
                            "file_search": {
                                "type": "object",
                                "properties": {
                                    "vector_store_ids": {
                                        "maxItems": 1,
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "Overrides the vector store attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n"
                                    }
                                }
                            }
                        },
                        "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n"
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
                        "nullable": true
                    },
                    "temperature": {
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number",
                        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n",
                        "default": 1,
                        "nullable": true,
                        "example": 1
                    },
                    "top_p": {
                        "maximum": 1,
                        "minimum": 0,
                        "type": "number",
                        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n",
                        "default": 1,
                        "nullable": true,
                        "example": 1
                    },
                    "response_format": {
                        "$ref": "#/components/schemas/assistantsApiResponseFormatOption"
                    }
                },
                "additionalProperties": false
            },
            "deleteAssistantResponse": {
                "required": [
                    "id",
                    "object",
                    "deleted"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "deleted": {
                        "type": "boolean"
                    },
                    "object": {
                        "enum": [
                            "assistant.deleted"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                            "name": "DeleteAssistantResponseState",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "assistant.deleted"
                                }
                            ]
                        }
                    }
                }
            },
            "listAssistantsResponse": {
                "required": [
                    "object",
                    "data",
                    "first_id",
                    "last_id",
                    "has_more"
                ],
                "type": "object",
                "properties": {
                    "object": {
                        "type": "string",
                        "example": "list"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/assistantObject"
                        }
                    },
                    "first_id": {
                        "type": "string"
                    },
                    "last_id": {
                        "type": "string"
                    },
                    "has_more": {
                        "type": "boolean",
                        "example": false
                    }
                }
            },
            "assistantToolsCode": {
                "title": "Code interpreter tool",
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "code_interpreter"
                        ],
                        "type": "string",
                        "description": "The type of tool being defined: `code_interpreter`",
                        "x-ms-enum": {
                            "name": "assistantToolsCodeType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "code_interpreter"
                                }
                            ]
                        }
                    }
                }
            },
            "assistantToolsFileSearch": {
                "title": "FileSearch tool",
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "file_search"
                        ],
                        "type": "string",
                        "description": "The type of tool being defined: `file_search`",
                        "x-ms-enum": {
                            "name": "assistantToolsFileSearchType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "file_search"
                                }
                            ]
                        }
                    },
                    "file_search": {
                        "type": "object",
                        "properties": {
                            "max_num_results": {
                                "maximum": 50,
                                "minimum": 1,
                                "type": "integer",
                                "description": "The maximum number of results the file search tool should output. The default is 20 for gpt-4* models and 5 for gpt-3.5-turbo. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. \n"
                            }
                        },
                        "description": "Overrides for the file search tool."
                    }
                }
            },
            "assistantToolsFileSearchTypeOnly": {
                "title": "FileSearch tool",
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "file_search"
                        ],
                        "type": "string",
                        "description": "The type of tool being defined: `file_search`",
                        "x-ms-enum": {
                            "name": "assistantToolsFileSearchType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "file_search"
                                }
                            ]
                        }
                    }
                }
            },
            "assistantToolsFunction": {
                "title": "Function tool",
                "required": [
                    "type",
                    "function"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "function"
                        ],
                        "type": "string",
                        "description": "The type of tool being defined: `function`",
                        "x-ms-enum": {
                            "name": "assistantToolsFunction",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "function"
                                }
                            ]
                        }
                    },
                    "function": {
                        "required": [
                            "name",
                            "parameters",
                            "description"
                        ],
                        "type": "object",
                        "properties": {
                            "description": {
                                "type": "string",
                                "description": "A description of what the function does, used by the model to choose when and how to call the function."
                            },
                            "name": {
                                "type": "string",
                                "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."
                            },
                            "parameters": {
                                "$ref": "#/components/schemas/chatCompletionFunctionParameters"
                            }
                        },
                        "description": "The function definition."
                    }
                }
            },
            "truncationObject": {
                "title": "Thread Truncation Controls",
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "auto",
                            "last_messages"
                        ],
                        "type": "string",
                        "description": "The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.",
                        "x-ms-enum": {
                            "name": "TruncationType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "auto"
                                },
                                {
                                    "value": "last_messages"
                                }
                            ]
                        }
                    },
                    "last_messages": {
                        "minimum": 1,
                        "type": "integer",
                        "description": "The number of most recent messages from the thread when constructing the context for the run.",
                        "nullable": true
                    }
                },
                "description": "Controls for how a thread will be truncated prior to the run. Use this to control the initial context window of the run."
            },
            "assistantsApiToolChoiceOption": {
                "oneOf": [
                    {
                        "enum": [
                            "none",
                            "auto"
                        ],
                        "type": "string",
                        "description": "`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.\n",
                        "x-ms-enum": {
                            "name": "AssistantsApiToolChoiceOption",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "none"
                                },
                                {
                                    "value": "auto"
                                }
                            ]
                        }
                    },
                    {
                        "$ref": "#/components/schemas/assistantsNamedToolChoice"
                    }
                ],
                "description": "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tools and instead generates a message.\n`auto` is the default value and means the model can pick between generating a message or calling a tool.\nSpecifying a particular tool like `{\"type\": \"file_search\"}` or `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n"
            },
            "assistantsNamedToolChoice": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "function",
                            "code_interpreter",
                            "file_search"
                        ],
                        "type": "string",
                        "description": "The type of the tool. If type is `function`, the function name must be set",
                        "x-ms-enum": {
                            "name": "AssistantsNamedToolChoiceType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "function"
                                },
                                {
                                    "value": "code_interpreter"
                                },
                                {
                                    "value": "file_search"
                                }
                            ]
                        }
                    },
                    "function": {
                        "required": [
                            "name"
                        ],
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the function to call."
                            }
                        }
                    }
                },
                "description": "Specifies a tool the model should use. Use to force the model to call a specific tool."
            },
            "runObject": {
                "title": "A run on a thread",
                "required": [
                    "id",
                    "object",
                    "created_at",
                    "thread_id",
                    "assistant_id",
                    "status",
                    "required_action",
                    "last_error",
                    "expires_at",
                    "started_at",
                    "cancelled_at",
                    "failed_at",
                    "completed_at",
                    "model",
                    "instructions",
                    "tools",
                    "metadata",
                    "usage",
                    "incomplete_details",
                    "max_prompt_tokens",
                    "max_completion_tokens",
                    "truncation_strategy",
                    "tool_choice",
                    "response_format"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The identifier, which can be referenced in API endpoints."
                    },
                    "object": {
                        "enum": [
                            "thread.run"
                        ],
                        "type": "string",
                        "description": "The object type, which is always `thread.run`.",
                        "x-ms-enum": {
                            "name": "runObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "thread.run",
                                    "description": "The run object type which is always thread.run"
                                }
                            ]
                        }
                    },
                    "created_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the run was created."
                    },
                    "thread_id": {
                        "type": "string",
                        "description": "The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run."
                    },
                    "assistant_id": {
                        "type": "string",
                        "description": "The ID of the assistant used for execution of this run."
                    },
                    "status": {
                        "enum": [
                            "queued",
                            "in_progress",
                            "requires_action",
                            "cancelling",
                            "cancelled",
                            "failed",
                            "completed",
                            "expired"
                        ],
                        "type": "string",
                        "description": "The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.",
                        "x-ms-enum": {
                            "name": "RunObjectStatus",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "queued",
                                    "description": "The queued state"
                                },
                                {
                                    "value": "in_progress",
                                    "description": "The in_progress state"
                                },
                                {
                                    "value": "requires_action",
                                    "description": "The required_action state"
                                },
                                {
                                    "value": "cancelling",
                                    "description": "The cancelling state"
                                },
                                {
                                    "value": "cancelled",
                                    "description": "The cancelled state"
                                },
                                {
                                    "value": "failed",
                                    "description": "The failed state"
                                },
                                {
                                    "value": "completed",
                                    "description": "The completed state"
                                },
                                {
                                    "value": "expired",
                                    "description": "The expired state"
                                }
                            ]
                        }
                    },
                    "required_action": {
                        "required": [
                            "type",
                            "submit_tool_outputs"
                        ],
                        "type": "object",
                        "properties": {
                            "type": {
                                "enum": [
                                    "submit_tool_outputs"
                                ],
                                "type": "string",
                                "description": "For now, this is always `submit_tool_outputs`."
                            },
                            "submit_tool_outputs": {
                                "required": [
                                    "tool_calls"
                                ],
                                "type": "object",
                                "properties": {
                                    "tool_calls": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/runToolCallObject"
                                        },
                                        "description": "A list of the relevant tool calls."
                                    }
                                },
                                "description": "Details on the tool outputs needed for this run to continue."
                            }
                        },
                        "description": "Details on the action required to continue the run. Will be `null` if no action is required.",
                        "nullable": true
                    },
                    "last_error": {
                        "required": [
                            "code",
                            "message"
                        ],
                        "type": "object",
                        "properties": {
                            "code": {
                                "enum": [
                                    "server_error",
                                    "rate_limit_exceeded"
                                ],
                                "type": "string",
                                "description": "One of `server_error` or `rate_limit_exceeded`.",
                                "x-ms-enum": {
                                    "name": "LastErrorCode",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "server_error",
                                            "description": "The server failed to respond to request due to server error"
                                        },
                                        {
                                            "value": "rate_limit_exceeded",
                                            "description": "The server failed to respond to request due to rate limit exceeded"
                                        }
                                    ]
                                }
                            },
                            "message": {
                                "type": "string",
                                "description": "A human-readable description of the error."
                            }
                        },
                        "description": "The last error associated with this run. Will be `null` if there are no errors.",
                        "nullable": true
                    },
                    "expires_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the run will expire."
                    },
                    "started_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the run was started.",
                        "nullable": true
                    },
                    "cancelled_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the run was cancelled.",
                        "nullable": true
                    },
                    "failed_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the run failed.",
                        "nullable": true
                    },
                    "completed_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the run was completed.",
                        "nullable": true
                    },
                    "incomplete_details": {
                        "type": "object",
                        "properties": {
                            "reason": {
                                "enum": [
                                    "max_completion_tokens",
                                    "max_prompt_tokens"
                                ],
                                "type": "string",
                                "description": "The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.",
                                "x-ms-enum": {
                                    "name": "IncompleteDetailsReason",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "max_completion_tokens"
                                        },
                                        {
                                            "value": "max_prompt_tokens"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "Details on why the run is incomplete. Will be `null` if the run is not incomplete.",
                        "nullable": true
                    },
                    "model": {
                        "type": "string",
                        "description": "The model that the assistant used for this run."
                    },
                    "instructions": {
                        "type": "string",
                        "description": "The instructions that the assistant used for this run."
                    },
                    "tools": {
                        "maxItems": 20,
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/assistantToolsCode"
                                },
                                {
                                    "$ref": "#/components/schemas/assistantToolsFileSearch"
                                },
                                {
                                    "$ref": "#/components/schemas/assistantToolsFunction"
                                }
                            ]
                        },
                        "description": "The list of tools that the assistant used for this run."
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
                        "nullable": true
                    },
                    "usage": {
                        "$ref": "#/components/schemas/runCompletionUsage"
                    },
                    "temperature": {
                        "type": "number",
                        "description": "The sampling temperature used for this run. If not set, defaults to 1.",
                        "nullable": true
                    },
                    "top_p": {
                        "type": "number",
                        "description": "The nucleus sampling value used for this run. If not set, defaults to 1.",
                        "nullable": true
                    },
                    "max_prompt_tokens": {
                        "minimum": 256,
                        "type": "integer",
                        "description": "The maximum number of prompt tokens specified to have been used over the course of the run.\n",
                        "nullable": true
                    },
                    "max_completion_tokens": {
                        "minimum": 256,
                        "type": "integer",
                        "description": "The maximum number of completion tokens specified to have been used over the course of the run.\n",
                        "nullable": true
                    },
                    "truncation_strategy": {
                        "$ref": "#/components/schemas/truncationObject"
                    },
                    "tool_choice": {
                        "$ref": "#/components/schemas/assistantsApiToolChoiceOption"
                    },
                    "parallel_tool_calls": {
                        "$ref": "#/components/schemas/ParallelToolCalls"
                    },
                    "response_format": {
                        "$ref": "#/components/schemas/assistantsApiResponseFormatOption"
                    }
                },
                "description": "Represents an execution run on a [thread](/docs/api-reference/threads)."
            },
            "createRunRequest": {
                "required": [
                    "thread_id",
                    "assistant_id"
                ],
                "type": "object",
                "properties": {
                    "assistant_id": {
                        "type": "string",
                        "description": "The ID of the assistant to use to execute this run."
                    },
                    "model": {
                        "type": "string",
                        "description": "The ID of the Model to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.",
                        "nullable": true
                    },
                    "instructions": {
                        "type": "string",
                        "description": "Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.",
                        "nullable": true
                    },
                    "additional_instructions": {
                        "type": "string",
                        "description": "Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.",
                        "nullable": true
                    },
                    "additional_messages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/createMessageRequest"
                        },
                        "description": "Adds additional messages to the thread before creating the run.",
                        "nullable": true
                    },
                    "tools": {
                        "maxItems": 20,
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/assistantToolsCode"
                                },
                                {
                                    "$ref": "#/components/schemas/assistantToolsFileSearch"
                                },
                                {
                                    "$ref": "#/components/schemas/assistantToolsFunction"
                                }
                            ]
                        },
                        "description": "Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.",
                        "nullable": true
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
                        "nullable": true
                    },
                    "temperature": {
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number",
                        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n",
                        "default": 1,
                        "nullable": true,
                        "example": 1
                    },
                    "top_p": {
                        "maximum": 1,
                        "minimum": 0,
                        "type": "number",
                        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n",
                        "default": 1,
                        "nullable": true,
                        "example": 1
                    },
                    "stream": {
                        "type": "boolean",
                        "description": "If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.\n",
                        "nullable": true
                    },
                    "max_prompt_tokens": {
                        "minimum": 256,
                        "type": "integer",
                        "description": "The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n",
                        "nullable": true
                    },
                    "max_completion_tokens": {
                        "minimum": 256,
                        "type": "integer",
                        "description": "The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n",
                        "nullable": true
                    },
                    "truncation_strategy": {
                        "$ref": "#/components/schemas/truncationObject"
                    },
                    "tool_choice": {
                        "$ref": "#/components/schemas/assistantsApiToolChoiceOption"
                    },
                    "parallel_tool_calls": {
                        "$ref": "#/components/schemas/ParallelToolCalls"
                    },
                    "response_format": {
                        "$ref": "#/components/schemas/assistantsApiResponseFormatOption"
                    }
                },
                "additionalProperties": false
            },
            "listRunsResponse": {
                "required": [
                    "object",
                    "data",
                    "first_id",
                    "last_id",
                    "has_more"
                ],
                "type": "object",
                "properties": {
                    "object": {
                        "type": "string",
                        "example": "list"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/runObject"
                        }
                    },
                    "first_id": {
                        "type": "string"
                    },
                    "last_id": {
                        "type": "string"
                    },
                    "has_more": {
                        "type": "boolean",
                        "example": false
                    }
                }
            },
            "modifyRunRequest": {
                "type": "object",
                "properties": {
                    "metadata": {
                        "type": "object",
                        "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "submitToolOutputsRunRequest": {
                "required": [
                    "tool_outputs"
                ],
                "type": "object",
                "properties": {
                    "tool_outputs": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "tool_call_id": {
                                    "type": "string",
                                    "description": "The ID of the tool call in the `required_action` object within the run object the output is being submitted for."
                                },
                                "output": {
                                    "type": "string",
                                    "description": "The output of the tool call to be submitted to continue the run."
                                }
                            }
                        },
                        "description": "A list of tools for which the outputs are being submitted."
                    },
                    "stream": {
                        "type": "boolean",
                        "description": "If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.\n",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "runToolCallObject": {
                "required": [
                    "id",
                    "type",
                    "function"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint."
                    },
                    "type": {
                        "enum": [
                            "function"
                        ],
                        "type": "string",
                        "description": "The type of tool call the output is required for. For now, this is always `function`.",
                        "x-ms-enum": {
                            "name": "RunToolCallObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "function"
                                }
                            ]
                        }
                    },
                    "function": {
                        "required": [
                            "name",
                            "arguments"
                        ],
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the function."
                            },
                            "arguments": {
                                "type": "string",
                                "description": "The arguments that the model expects you to pass to the function."
                            }
                        },
                        "description": "The function definition."
                    }
                },
                "description": "Tool call objects"
            },
            "createThreadAndRunRequest": {
                "required": [
                    "thread_id",
                    "assistant_id"
                ],
                "type": "object",
                "properties": {
                    "assistant_id": {
                        "type": "string",
                        "description": "The ID of the assistant to use to execute this run."
                    },
                    "thread": {
                        "$ref": "#/components/schemas/createThreadRequest"
                    },
                    "model": {
                        "type": "string",
                        "description": "The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.",
                        "nullable": true
                    },
                    "instructions": {
                        "type": "string",
                        "description": "Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.",
                        "nullable": true
                    },
                    "tools": {
                        "maxItems": 20,
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/assistantToolsCode"
                                },
                                {
                                    "$ref": "#/components/schemas/assistantToolsFileSearch"
                                },
                                {
                                    "$ref": "#/components/schemas/assistantToolsFunction"
                                }
                            ]
                        },
                        "description": "Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.",
                        "nullable": true
                    },
                    "tool_resources": {
                        "type": "object",
                        "properties": {
                            "code_interpreter": {
                                "type": "object",
                                "properties": {
                                    "file_ids": {
                                        "maxItems": 20,
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "A list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n"
                                    }
                                }
                            },
                            "file_search": {
                                "type": "object",
                                "properties": {
                                    "vector_store_ids": {
                                        "maxItems": 1,
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "The ID of the vector store attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n"
                                    }
                                }
                            }
                        },
                        "description": "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
                        "nullable": true
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
                        "nullable": true
                    },
                    "temperature": {
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number",
                        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n",
                        "default": 1,
                        "nullable": true,
                        "example": 1
                    },
                    "top_p": {
                        "maximum": 1,
                        "minimum": 0,
                        "type": "number",
                        "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n",
                        "default": 1,
                        "nullable": true,
                        "example": 1
                    },
                    "stream": {
                        "type": "boolean",
                        "description": "If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.\n",
                        "nullable": true
                    },
                    "stream_options": {
                        "$ref": "#/components/schemas/chatCompletionStreamOptions"
                    },
                    "max_prompt_tokens": {
                        "minimum": 256,
                        "type": "integer",
                        "description": "The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n",
                        "nullable": true
                    },
                    "max_completion_tokens": {
                        "minimum": 256,
                        "type": "integer",
                        "description": "The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n",
                        "nullable": true
                    },
                    "truncation_strategy": {
                        "$ref": "#/components/schemas/truncationObject"
                    },
                    "tool_choice": {
                        "$ref": "#/components/schemas/assistantsApiToolChoiceOption"
                    },
                    "parallel_tool_calls": {
                        "$ref": "#/components/schemas/ParallelToolCalls"
                    },
                    "response_format": {
                        "$ref": "#/components/schemas/assistantsApiResponseFormatOption"
                    }
                },
                "additionalProperties": false
            },
            "threadObject": {
                "title": "Thread",
                "required": [
                    "id",
                    "object",
                    "created_at",
                    "tool_resources",
                    "metadata"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The identifier, which can be referenced in API endpoints."
                    },
                    "object": {
                        "enum": [
                            "thread"
                        ],
                        "type": "string",
                        "description": "The object type, which is always `thread`.",
                        "x-ms-enum": {
                            "name": "ThreadObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "thread",
                                    "description": "The type of thread object which is always `thread`"
                                }
                            ]
                        }
                    },
                    "created_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the thread was created."
                    },
                    "tool_resources": {
                        "type": "object",
                        "properties": {
                            "code_interpreter": {
                                "type": "object",
                                "properties": {
                                    "file_ids": {
                                        "maxItems": 20,
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "A list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n"
                                    }
                                }
                            },
                            "file_search": {
                                "type": "object",
                                "properties": {
                                    "vector_store_ids": {
                                        "maxItems": 1,
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "The vector store attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n"
                                    }
                                }
                            }
                        },
                        "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
                        "nullable": true
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
                        "nullable": true
                    }
                },
                "description": "Represents a thread that contains [messages](/docs/api-reference/messages)."
            },
            "createThreadRequest": {
                "type": "object",
                "properties": {
                    "messages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/createMessageRequest"
                        },
                        "description": "A list of [messages](/docs/api-reference/messages) to start the thread with."
                    },
                    "tool_resources": {
                        "type": "object",
                        "properties": {
                            "code_interpreter": {
                                "type": "object",
                                "properties": {
                                    "file_ids": {
                                        "maxItems": 20,
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "A list of file IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n"
                                    }
                                }
                            },
                            "file_search": {
                                "type": "object",
                                "oneOf": [
                                    {
                                        "required": [
                                            "vector_store_ids"
                                        ]
                                    },
                                    {
                                        "required": [
                                            "vector_stores"
                                        ]
                                    }
                                ],
                                "properties": {
                                    "vector_store_ids": {
                                        "maxItems": 1,
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "The vector store attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n"
                                    },
                                    "vector_stores": {
                                        "maxItems": 1,
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "file_ids": {
                                                    "maxItems": 10000,
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    },
                                                    "description": "A list of file IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.\n"
                                                },
                                                "chunking_strategy": {
                                                    "type": "object",
                                                    "oneOf": [
                                                        {
                                                            "title": "Auto Chunking Strategy",
                                                            "required": [
                                                                "type"
                                                            ],
                                                            "type": "object",
                                                            "properties": {
                                                                "type": {
                                                                    "enum": [
                                                                        "auto"
                                                                    ],
                                                                    "type": "string",
                                                                    "description": "Always `auto`.",
                                                                    "x-ms-enum": {
                                                                        "name": "AutoChunkingStrategyType",
                                                                        "modelAsString": true,
                                                                        "values": [
                                                                            {
                                                                                "value": "auto"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            "additionalProperties": false,
                                                            "description": "The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`."
                                                        },
                                                        {
                                                            "title": "Static Chunking Strategy",
                                                            "required": [
                                                                "type",
                                                                "static"
                                                            ],
                                                            "type": "object",
                                                            "properties": {
                                                                "type": {
                                                                    "enum": [
                                                                        "static"
                                                                    ],
                                                                    "type": "string",
                                                                    "description": "Always `static`.",
                                                                    "x-ms-enum": {
                                                                        "name": "StaticChunkingStrategyType",
                                                                        "modelAsString": true,
                                                                        "values": [
                                                                            {
                                                                                "value": "static"
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "static": {
                                                                    "required": [
                                                                        "max_chunk_size_tokens",
                                                                        "chunk_overlap_tokens"
                                                                    ],
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "max_chunk_size_tokens": {
                                                                            "maximum": 4096,
                                                                            "minimum": 100,
                                                                            "type": "integer",
                                                                            "description": "The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`."
                                                                        },
                                                                        "chunk_overlap_tokens": {
                                                                            "type": "integer",
                                                                            "description": "The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n"
                                                                        }
                                                                    },
                                                                    "additionalProperties": false
                                                                }
                                                            },
                                                            "additionalProperties": false
                                                        }
                                                    ],
                                                    "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy."
                                                },
                                                "metadata": {
                                                    "type": "object",
                                                    "description": "Set of 16 key-value pairs that can be attached to a vector store. This can be useful for storing additional information about the vector store in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n"
                                                }
                                            }
                                        },
                                        "description": "A helper to create a vector store with file_ids and attach it to this thread. There can be a maximum of 1 vector store attached to the thread.\n"
                                    }
                                }
                            }
                        },
                        "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
                        "nullable": true
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "modifyThreadRequest": {
                "type": "object",
                "properties": {
                    "tool_resources": {
                        "type": "object",
                        "properties": {
                            "code_interpreter": {
                                "type": "object",
                                "properties": {
                                    "file_ids": {
                                        "maxItems": 20,
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "A list of File IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n"
                                    }
                                }
                            },
                            "file_search": {
                                "type": "object",
                                "properties": {
                                    "vector_store_ids": {
                                        "maxItems": 1,
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "description": "The vector store attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n"
                                    }
                                }
                            }
                        },
                        "description": "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n",
                        "nullable": true
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "deleteThreadResponse": {
                "required": [
                    "id",
                    "object",
                    "deleted"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "deleted": {
                        "type": "boolean"
                    },
                    "object": {
                        "enum": [
                            "thread.deleted"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                            "name": "DeleteThreadResponseObjectState",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "thread.deleted",
                                    "description": "The delete thread response object state which is `thread.deleted`"
                                }
                            ]
                        }
                    }
                }
            },
            "listThreadsResponse": {
                "required": [
                    "object",
                    "data",
                    "first_id",
                    "last_id",
                    "has_more"
                ],
                "properties": {
                    "object": {
                        "type": "string",
                        "example": "list"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/threadObject"
                        }
                    },
                    "first_id": {
                        "type": "string"
                    },
                    "last_id": {
                        "type": "string"
                    },
                    "has_more": {
                        "type": "boolean",
                        "example": false
                    }
                }
            },
            "messageObject": {
                "title": "The message object",
                "required": [
                    "id",
                    "object",
                    "created_at",
                    "thread_id",
                    "status",
                    "incomplete_details",
                    "completed_at",
                    "incomplete_at",
                    "role",
                    "content",
                    "assistant_id",
                    "run_id",
                    "attachments",
                    "metadata"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The identifier, which can be referenced in API endpoints."
                    },
                    "object": {
                        "enum": [
                            "thread.message"
                        ],
                        "type": "string",
                        "description": "The object type, which is always `thread.message`.",
                        "x-ms-enum": {
                            "name": "MessageObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "thread.message",
                                    "description": "The message object type which is `thread.message`"
                                }
                            ]
                        }
                    },
                    "created_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the message was created."
                    },
                    "thread_id": {
                        "type": "string",
                        "description": "The [thread](/docs/api-reference/threads) ID that this message belongs to."
                    },
                    "status": {
                        "enum": [
                            "in_progress",
                            "incomplete",
                            "completed"
                        ],
                        "type": "string",
                        "description": "The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.",
                        "x-ms-enum": {
                            "name": "MessageObjectStatus",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "in_progress"
                                },
                                {
                                    "value": "incomplete"
                                },
                                {
                                    "value": "completed"
                                }
                            ]
                        }
                    },
                    "incomplete_details": {
                        "required": [
                            "reason"
                        ],
                        "type": "object",
                        "properties": {
                            "reason": {
                                "enum": [
                                    "content_filter",
                                    "max_tokens",
                                    "run_cancelled",
                                    "run_expired",
                                    "run_failed"
                                ],
                                "type": "string",
                                "description": "The reason the message is incomplete.",
                                "x-ms-enum": {
                                    "name": "MessageObjectIncompleteReason",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "content_filter"
                                        },
                                        {
                                            "value": "max_tokens"
                                        },
                                        {
                                            "value": "run_cancelled"
                                        },
                                        {
                                            "value": "run_expired"
                                        },
                                        {
                                            "value": "run_failed"
                                        }
                                    ]
                                }
                            }
                        },
                        "description": "On an incomplete message, details about why the message is incomplete.",
                        "nullable": true
                    },
                    "completed_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the message was completed.",
                        "nullable": true
                    },
                    "incomplete_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the message was marked as incomplete.",
                        "nullable": true
                    },
                    "role": {
                        "enum": [
                            "user",
                            "assistant"
                        ],
                        "type": "string",
                        "description": "The entity that produced the message. One of `user` or `assistant`.",
                        "x-ms-enum": {
                            "name": "MessageObjectRole",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "user"
                                },
                                {
                                    "value": "assistant"
                                }
                            ]
                        }
                    },
                    "content": {
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/messageContentImageFileObject"
                                },
                                {
                                    "$ref": "#/components/schemas/messageContentTextObject"
                                }
                            ]
                        },
                        "description": "The content of the message in array of text and/or images."
                    },
                    "assistant_id": {
                        "type": "string",
                        "description": "If applicable, the ID of the assistant that authored this message.",
                        "nullable": true
                    },
                    "run_id": {
                        "type": "string",
                        "description": "If applicable, the ID of the [run](/docs/api-reference/runs) associated with the authoring of this message.",
                        "nullable": true
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "file_id": {
                                    "type": "string",
                                    "description": "The ID of the file to attach to the message."
                                },
                                "tools": {
                                    "type": "array",
                                    "items": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/components/schemas/assistantToolsCode"
                                            },
                                            {
                                                "$ref": "#/components/schemas/assistantToolsFileSearchTypeOnly"
                                            }
                                        ]
                                    },
                                    "description": "The tools to add this file to."
                                }
                            }
                        },
                        "description": "A list of files attached to the message, and the tools they were added to.",
                        "nullable": true
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
                        "nullable": true
                    }
                },
                "description": "Represents a message within a [thread](/docs/api-reference/threads)."
            },
            "messageDeltaObject": {
                "title": "Message delta object",
                "required": [
                    "id",
                    "object",
                    "delta"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The identifier of the message, which can be referenced in API endpoints."
                    },
                    "object": {
                        "enum": [
                            "thread.message.delta"
                        ],
                        "type": "string",
                        "description": "The object type, which is always `thread.message.delta`.",
                        "x-ms-enum": {
                            "name": "MessageDeltaObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "thread.message.delta"
                                }
                            ]
                        }
                    },
                    "delta": {
                        "type": "object",
                        "properties": {
                            "role": {
                                "enum": [
                                    "user",
                                    "assistant"
                                ],
                                "type": "string",
                                "description": "The entity that produced the message. One of `user` or `assistant`.",
                                "x-ms-enum": {
                                    "name": "MessageDeltaObjectDeltaRole",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "user"
                                        },
                                        {
                                            "value": "assistant"
                                        }
                                    ]
                                }
                            },
                            "content": {
                                "type": "array",
                                "items": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/messageDeltaContentImageFileObject"
                                        },
                                        {
                                            "$ref": "#/components/schemas/messageDeltaContentTextObject"
                                        }
                                    ]
                                },
                                "description": "The content of the message in array of text and/or images."
                            }
                        },
                        "description": "The delta containing the fields that have changed on the Message."
                    }
                },
                "description": "Represents a message delta i.e. any changed fields on a message during streaming.\n"
            },
            "createMessageRequest": {
                "required": [
                    "role",
                    "content"
                ],
                "type": "object",
                "properties": {
                    "role": {
                        "enum": [
                            "user",
                            "assistant"
                        ],
                        "type": "string",
                        "description": "The role of the entity that is creating the message. Allowed values include:\n- `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.\n- `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.\n",
                        "x-ms-enum": {
                            "name": "CreateMessageRequestRole",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "user"
                                },
                                {
                                    "value": "assistant"
                                }
                            ]
                        }
                    },
                    "content": {
                        "maxLength": 256000,
                        "minLength": 1,
                        "type": "string",
                        "description": "The content of the message."
                    },
                    "attachments": {
                        "required": [
                            "file_id",
                            "tools"
                        ],
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "file_id": {
                                    "type": "string",
                                    "description": "The ID of the file to attach to the message."
                                },
                                "tools": {
                                    "type": "array",
                                    "items": {
                                        "oneOf": [
                                            {
                                                "$ref": "#/components/schemas/assistantToolsCode"
                                            },
                                            {
                                                "$ref": "#/components/schemas/assistantToolsFileSearchTypeOnly"
                                            }
                                        ]
                                    },
                                    "description": "The tools to add this file to."
                                }
                            }
                        },
                        "description": "A list of files attached to the message, and the tools they should be added to.",
                        "nullable": true
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "modifyMessageRequest": {
                "type": "object",
                "properties": {
                    "metadata": {
                        "type": "object",
                        "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "deleteMessageResponse": {
                "required": [
                    "id",
                    "object",
                    "deleted"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "deleted": {
                        "type": "boolean"
                    },
                    "object": {
                        "enum": [
                            "thread.message.deleted"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                            "name": "DeleteMessageResponseObject",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "thread.message.deleted",
                                    "description": "The delete message response object state"
                                }
                            ]
                        }
                    }
                }
            },
            "listMessagesResponse": {
                "required": [
                    "object",
                    "data",
                    "first_id",
                    "last_id",
                    "has_more"
                ],
                "properties": {
                    "object": {
                        "type": "string",
                        "example": "list"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/messageObject"
                        }
                    },
                    "first_id": {
                        "type": "string"
                    },
                    "last_id": {
                        "type": "string"
                    },
                    "has_more": {
                        "type": "boolean",
                        "example": false
                    }
                }
            },
            "messageContentImageFileObject": {
                "title": "Image file",
                "required": [
                    "type",
                    "image_file"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "image_file"
                        ],
                        "type": "string",
                        "description": "Always `image_file`.",
                        "x-ms-enum": {
                            "name": "MessageContentImageFileObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "image_file",
                                    "description": "The message content image file type"
                                }
                            ]
                        }
                    },
                    "image_file": {
                        "required": [
                            "file_id"
                        ],
                        "type": "object",
                        "properties": {
                            "file_id": {
                                "type": "string",
                                "description": "The File ID of the image in the message content."
                            }
                        }
                    }
                },
                "description": "References an image File in the content of a message."
            },
            "messageContentTextObject": {
                "title": "Text",
                "required": [
                    "type",
                    "text"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "text"
                        ],
                        "type": "string",
                        "description": "Always `text`.",
                        "x-ms-enum": {
                            "name": "messageContentTextObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "text",
                                    "description": "The message content text Object type"
                                }
                            ]
                        }
                    },
                    "text": {
                        "required": [
                            "value",
                            "annotations"
                        ],
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "string",
                                "description": "The data that makes up the text."
                            },
                            "annotations": {
                                "type": "array",
                                "items": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/messageContentTextAnnotationsFileCitationObject"
                                        },
                                        {
                                            "$ref": "#/components/schemas/messageContentTextAnnotationsFilePathObject"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "The text content that is part of a message."
            },
            "messageContentTextAnnotationsFileCitationObject": {
                "title": "File citation",
                "required": [
                    "type",
                    "text",
                    "file_citation",
                    "start_index",
                    "end_index"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "file_citation"
                        ],
                        "type": "string",
                        "description": "Always `file_citation`.",
                        "x-ms-enum": {
                            "name": "FileCitationObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "file_citation",
                                    "description": "The file citation object type"
                                }
                            ]
                        }
                    },
                    "text": {
                        "type": "string",
                        "description": "The text in the message content that needs to be replaced."
                    },
                    "file_citation": {
                        "required": [
                            "file_id"
                        ],
                        "type": "object",
                        "properties": {
                            "file_id": {
                                "type": "string",
                                "description": "The ID of the specific File the citation is from."
                            }
                        }
                    },
                    "start_index": {
                        "minimum": 0,
                        "type": "integer"
                    },
                    "end_index": {
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "description": "A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the \"retrieval\" tool to search files."
            },
            "messageContentTextAnnotationsFilePathObject": {
                "title": "File path",
                "required": [
                    "type",
                    "text",
                    "file_path",
                    "start_index",
                    "end_index"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "file_path"
                        ],
                        "type": "string",
                        "description": "Always `file_path`.",
                        "x-ms-enum": {
                            "name": "FilePathObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "file_path",
                                    "description": "The file path object type"
                                }
                            ]
                        }
                    },
                    "text": {
                        "type": "string",
                        "description": "The text in the message content that needs to be replaced."
                    },
                    "file_path": {
                        "required": [
                            "file_id"
                        ],
                        "type": "object",
                        "properties": {
                            "file_id": {
                                "type": "string",
                                "description": "The ID of the file that was generated."
                            }
                        }
                    },
                    "start_index": {
                        "minimum": 0,
                        "type": "integer"
                    },
                    "end_index": {
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "description": "A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file."
            },
            "messageDeltaContentImageFileObject": {
                "title": "Image file",
                "required": [
                    "index",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "The index of the content part in the message."
                    },
                    "type": {
                        "enum": [
                            "image_file"
                        ],
                        "type": "string",
                        "description": "Always `image_file`.",
                        "x-ms-enum": {
                            "name": "MessageDeltaContentImageFileObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "image_file"
                                }
                            ]
                        }
                    },
                    "image_file": {
                        "type": "object",
                        "properties": {
                            "file_id": {
                                "type": "string",
                                "description": "The File ID of the image in the message content."
                            }
                        }
                    }
                },
                "description": "References an image File in the content of a message."
            },
            "messageDeltaContentTextObject": {
                "title": "Text",
                "required": [
                    "index",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "The index of the content part in the message."
                    },
                    "type": {
                        "enum": [
                            "text"
                        ],
                        "type": "string",
                        "description": "Always `text`.",
                        "x-ms-enum": {
                            "name": "MessageDeltaContentTextObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "text"
                                }
                            ]
                        }
                    },
                    "text": {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "string",
                                "description": "The data that makes up the text."
                            },
                            "annotations": {
                                "type": "array",
                                "items": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/messageDeltaContentTextAnnotationsFileCitationObject"
                                        },
                                        {
                                            "$ref": "#/components/schemas/messageDeltaContentTextAnnotationsFilePathObject"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "description": "The text content that is part of a message."
            },
            "messageDeltaContentTextAnnotationsFileCitationObject": {
                "title": "File citation",
                "required": [
                    "index",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "The index of the annotation in the text content part."
                    },
                    "type": {
                        "enum": [
                            "file_citation"
                        ],
                        "type": "string",
                        "description": "Always `file_citation`.",
                        "x-ms-enum": {
                            "name": "MessageDeltaContentTextAnnotationsFileCitationObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "file_citation"
                                }
                            ]
                        }
                    },
                    "text": {
                        "type": "string",
                        "description": "The text in the message content that needs to be replaced."
                    },
                    "file_citation": {
                        "type": "object",
                        "properties": {
                            "file_id": {
                                "type": "string",
                                "description": "The ID of the specific File the citation is from."
                            },
                            "quote": {
                                "type": "string",
                                "description": "The specific quote in the file."
                            }
                        }
                    },
                    "start_index": {
                        "minimum": 0,
                        "type": "integer"
                    },
                    "end_index": {
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "description": "A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the \"file_search\" tool to search files."
            },
            "messageDeltaContentTextAnnotationsFilePathObject": {
                "title": "File path",
                "required": [
                    "index",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "The index of the annotation in the text content part."
                    },
                    "type": {
                        "enum": [
                            "file_path"
                        ],
                        "type": "string",
                        "description": "Always `file_path`.",
                        "x-ms-enum": {
                            "name": "MessageDeltaContentTextAnnotationsFilePathObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "file_path"
                                }
                            ]
                        }
                    },
                    "text": {
                        "type": "string",
                        "description": "The text in the message content that needs to be replaced."
                    },
                    "file_path": {
                        "type": "object",
                        "properties": {
                            "file_id": {
                                "type": "string",
                                "description": "The ID of the file that was generated."
                            }
                        }
                    },
                    "start_index": {
                        "minimum": 0,
                        "type": "integer"
                    },
                    "end_index": {
                        "minimum": 0,
                        "type": "integer"
                    }
                },
                "description": "A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file."
            },
            "runStepObject": {
                "title": "Run steps",
                "required": [
                    "id",
                    "object",
                    "created_at",
                    "assistant_id",
                    "thread_id",
                    "run_id",
                    "type",
                    "status",
                    "step_details",
                    "last_error",
                    "expired_at",
                    "cancelled_at",
                    "failed_at",
                    "completed_at",
                    "metadata"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The identifier of the run step, which can be referenced in API endpoints."
                    },
                    "object": {
                        "enum": [
                            "assistant.run.step"
                        ],
                        "type": "string",
                        "description": "The object type, which is always `assistant.run.step``.",
                        "x-ms-enum": {
                            "name": "RunStepObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "assistant.run.step",
                                    "description": "The object type, which is always `assistant.run.step`"
                                }
                            ]
                        }
                    },
                    "created_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the run step was created."
                    },
                    "assistant_id": {
                        "type": "string",
                        "description": "The ID of the [assistant](/docs/api-reference/assistants) associated with the run step."
                    },
                    "thread_id": {
                        "type": "string",
                        "description": "The ID of the [thread](/docs/api-reference/threads) that was run."
                    },
                    "run_id": {
                        "type": "string",
                        "description": "The ID of the [run](/docs/api-reference/runs) that this run step is a part of."
                    },
                    "type": {
                        "enum": [
                            "message_creation",
                            "tool_calls"
                        ],
                        "type": "string",
                        "description": "The type of run step, which can be either `message_creation` or `tool_calls`.",
                        "x-ms-enum": {
                            "name": "RunStepObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "message_creation",
                                    "description": "The message_creation run step"
                                },
                                {
                                    "value": "tool_calls",
                                    "description": "The tool_calls run step"
                                }
                            ]
                        }
                    },
                    "status": {
                        "enum": [
                            "in_progress",
                            "cancelled",
                            "failed",
                            "completed",
                            "expired"
                        ],
                        "type": "string",
                        "description": "The status of the run, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.",
                        "x-ms-enum": {
                            "name": "RunStepObjectStatus",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "in_progress",
                                    "description": "The in_progress run status"
                                },
                                {
                                    "value": "cancelled",
                                    "description": "The cancelled run status"
                                },
                                {
                                    "value": "failed",
                                    "description": "The cancelled run status"
                                },
                                {
                                    "value": "completed",
                                    "description": "The cancelled run status"
                                },
                                {
                                    "value": "expired",
                                    "description": "The cancelled run status"
                                }
                            ]
                        }
                    },
                    "step_details": {
                        "type": "object",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/runStepDetailsMessageCreationObject"
                            },
                            {
                                "$ref": "#/components/schemas/runStepDetailsToolCallsObject"
                            }
                        ],
                        "description": "The details of the run step."
                    },
                    "last_error": {
                        "required": [
                            "code",
                            "message"
                        ],
                        "type": "object",
                        "properties": {
                            "code": {
                                "enum": [
                                    "server_error",
                                    "rate_limit_exceeded"
                                ],
                                "type": "string",
                                "description": "One of `server_error` or `rate_limit_exceeded`.",
                                "x-ms-enum": {
                                    "name": "LastErrorCode",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "server_error",
                                            "description": "The server_error"
                                        },
                                        {
                                            "value": "rate_limit_exceeded",
                                            "description": "The rate_limit_exceeded status"
                                        }
                                    ]
                                }
                            },
                            "message": {
                                "type": "string",
                                "description": "A human-readable description of the error."
                            }
                        },
                        "description": "The last error associated with this run step. Will be `null` if there are no errors.",
                        "nullable": true
                    },
                    "expired_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.",
                        "nullable": true
                    },
                    "cancelled_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the run step was cancelled.",
                        "nullable": true
                    },
                    "failed_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the run step failed.",
                        "nullable": true
                    },
                    "completed_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the run step completed.",
                        "nullable": true
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
                        "nullable": true
                    }
                },
                "description": "Represents a step in execution of a run.\n"
            },
            "runStepDeltaObject": {
                "title": "Run step delta object",
                "required": [
                    "id",
                    "object",
                    "delta"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The identifier of the run step, which can be referenced in API endpoints."
                    },
                    "object": {
                        "enum": [
                            "thread.run.step.delta"
                        ],
                        "type": "string",
                        "description": "The object type, which is always `thread.run.step.delta`.",
                        "x-ms-enum": {
                            "name": "RunStepDeltaObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "thread.run.step.delta"
                                }
                            ]
                        }
                    },
                    "delta": {
                        "type": "object",
                        "properties": {
                            "step_details": {
                                "type": "object",
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/runStepDeltaStepDetailsMessageCreationObject"
                                    },
                                    {
                                        "$ref": "#/components/schemas/runStepDeltaStepDetailsToolCallsObject"
                                    }
                                ],
                                "description": "The details of the run step."
                            }
                        },
                        "description": "The delta containing the fields that have changed on the run step."
                    }
                },
                "description": "Represents a run step delta i.e. any changed fields on a run step during streaming.\n"
            },
            "listRunStepsResponse": {
                "required": [
                    "object",
                    "data",
                    "first_id",
                    "last_id",
                    "has_more"
                ],
                "properties": {
                    "object": {
                        "type": "string",
                        "example": "list"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/runStepObject"
                        }
                    },
                    "first_id": {
                        "type": "string"
                    },
                    "last_id": {
                        "type": "string"
                    },
                    "has_more": {
                        "type": "boolean",
                        "example": false
                    }
                }
            },
            "runStepDetailsMessageCreationObject": {
                "title": "Message creation",
                "required": [
                    "type",
                    "message_creation"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "message_creation"
                        ],
                        "type": "string",
                        "description": "Always `message_creation``.",
                        "x-ms-enum": {
                            "name": "RunStepDetailsMessageCreationObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "message_creation"
                                }
                            ]
                        }
                    },
                    "message_creation": {
                        "required": [
                            "message_id"
                        ],
                        "type": "object",
                        "properties": {
                            "message_id": {
                                "type": "string",
                                "description": "The ID of the message that was created by this run step."
                            }
                        }
                    }
                },
                "description": "Details of the message creation by the run step."
            },
            "runStepDeltaStepDetailsMessageCreationObject": {
                "title": "Message creation",
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "message_creation"
                        ],
                        "type": "string",
                        "description": "Always `message_creation`.",
                        "x-ms-enum": {
                            "name": "RunStepDeltaStepDetailsMessageCreationObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "message_creation"
                                }
                            ]
                        }
                    },
                    "message_creation": {
                        "type": "object",
                        "properties": {
                            "message_id": {
                                "type": "string",
                                "description": "The ID of the message that was created by this run step."
                            }
                        }
                    }
                },
                "description": "Details of the message creation by the run step."
            },
            "runStepDetailsToolCallsObject": {
                "title": "Tool calls",
                "required": [
                    "type",
                    "tool_calls"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "tool_calls"
                        ],
                        "type": "string",
                        "description": "Always `tool_calls`.",
                        "x-ms-enum": {
                            "name": "RunStepDetailsToolCallsObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "tool_calls"
                                }
                            ]
                        }
                    },
                    "tool_calls": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/runStepDetailsToolCallsCodeObject"
                                },
                                {
                                    "$ref": "#/components/schemas/runStepDetailsToolCallsFileSearchObject"
                                },
                                {
                                    "$ref": "#/components/schemas/runStepDetailsToolCallsFunctionObject"
                                }
                            ]
                        },
                        "description": "An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `retrieval` or `function`.\n"
                    }
                },
                "description": "Details of the tool call."
            },
            "runStepDeltaStepDetailsToolCallsObject": {
                "title": "Tool calls",
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "tool_calls"
                        ],
                        "type": "string",
                        "description": "Always `tool_calls`.",
                        "x-ms-enum": {
                            "name": "RunStepDeltaStepDetailsToolCallsObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "tool_calls"
                                }
                            ]
                        }
                    },
                    "tool_calls": {
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/runStepDeltaStepDetailsToolCallsCodeObject"
                                },
                                {
                                    "$ref": "#/components/schemas/runStepDeltaStepDetailsToolCallsFileSearchObject"
                                },
                                {
                                    "$ref": "#/components/schemas/runStepDeltaStepDetailsToolCallsFunctionObject"
                                }
                            ]
                        },
                        "description": "An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search` or `function`.\n"
                    }
                },
                "description": "Details of the tool call."
            },
            "runStepDetailsToolCallsCodeObject": {
                "title": "Code interpreter tool call",
                "required": [
                    "id",
                    "type",
                    "code_interpreter"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the tool call."
                    },
                    "type": {
                        "enum": [
                            "code_interpreter"
                        ],
                        "type": "string",
                        "description": "The type of tool call. This is always going to be `code_interpreter` for this type of tool call.",
                        "x-ms-enum": {
                            "name": "RunStepDetailsToolCallsCodeObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "code_interpreter"
                                }
                            ]
                        }
                    },
                    "code_interpreter": {
                        "required": [
                            "input",
                            "outputs"
                        ],
                        "type": "object",
                        "properties": {
                            "input": {
                                "type": "string",
                                "description": "The input to the Code Interpreter tool call."
                            },
                            "outputs": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/runStepDetailsToolCallsCodeOutputLogsObject"
                                        },
                                        {
                                            "$ref": "#/components/schemas/runStepDetailsToolCallsCodeOutputImageObject"
                                        }
                                    ]
                                },
                                "description": "The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type."
                            }
                        },
                        "description": "The Code Interpreter tool call definition."
                    }
                },
                "description": "Details of the Code Interpreter tool call the run step was involved in."
            },
            "runStepDeltaStepDetailsToolCallsCodeObject": {
                "title": "Code interpreter tool call",
                "required": [
                    "index",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "The index of the tool call in the tool calls array."
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the tool call."
                    },
                    "type": {
                        "enum": [
                            "code_interpreter"
                        ],
                        "type": "string",
                        "description": "The type of tool call. This is always going to be `code_interpreter` for this type of tool call.",
                        "x-ms-enum": {
                            "name": "RunStepDeltaStepDetailsToolCallsCodeObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "code_interpreter"
                                }
                            ]
                        }
                    },
                    "code_interpreter": {
                        "type": "object",
                        "properties": {
                            "input": {
                                "type": "string",
                                "description": "The input to the Code Interpreter tool call."
                            },
                            "outputs": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "oneOf": [
                                        {
                                            "$ref": "#/components/schemas/runStepDeltaStepDetailsToolCallsCodeOutputLogsObject"
                                        },
                                        {
                                            "$ref": "#/components/schemas/runStepDeltaStepDetailsToolCallsCodeOutputImageObject"
                                        }
                                    ]
                                },
                                "description": "The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type."
                            }
                        },
                        "description": "The Code Interpreter tool call definition."
                    }
                },
                "description": "Details of the Code Interpreter tool call the run step was involved in."
            },
            "runStepDetailsToolCallsCodeOutputLogsObject": {
                "title": "Code interpreter log output",
                "required": [
                    "type",
                    "logs"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "logs"
                        ],
                        "type": "string",
                        "description": "Always `logs`.",
                        "x-ms-enum": {
                            "name": "RunStepDetailsToolCallsCodeOutputLogsObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "logs"
                                }
                            ]
                        }
                    },
                    "logs": {
                        "type": "string",
                        "description": "The text output from the Code Interpreter tool call."
                    }
                },
                "description": "Text output from the Code Interpreter tool call as part of a run step."
            },
            "runStepDeltaStepDetailsToolCallsCodeOutputLogsObject": {
                "title": "Code interpreter log output",
                "required": [
                    "index",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "The index of the output in the outputs array."
                    },
                    "type": {
                        "enum": [
                            "logs"
                        ],
                        "type": "string",
                        "description": "Always `logs`.",
                        "x-ms-enum": {
                            "name": "RunStepDeltaStepDetailsToolCallsCodeOutputLogsObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "logs"
                                }
                            ]
                        }
                    },
                    "logs": {
                        "type": "string",
                        "description": "The text output from the Code Interpreter tool call."
                    }
                },
                "description": "Text output from the Code Interpreter tool call as part of a run step."
            },
            "runStepDetailsToolCallsCodeOutputImageObject": {
                "title": "Code interpreter image output",
                "required": [
                    "type",
                    "image"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "image"
                        ],
                        "type": "string",
                        "description": "Always `image`.",
                        "x-ms-enum": {
                            "name": "RunStepDetailsToolCallsCodeOutputImageObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "image"
                                }
                            ]
                        }
                    },
                    "image": {
                        "required": [
                            "file_id"
                        ],
                        "type": "object",
                        "properties": {
                            "file_id": {
                                "type": "string",
                                "description": "The File ID of the image."
                            }
                        }
                    }
                }
            },
            "runStepDeltaStepDetailsToolCallsCodeOutputImageObject": {
                "title": "Code interpreter image output",
                "required": [
                    "index",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "The index of the output in the outputs array."
                    },
                    "type": {
                        "enum": [
                            "image"
                        ],
                        "type": "string",
                        "description": "Always `image`.",
                        "x-ms-enum": {
                            "name": "RunStepDeltaStepDetailsToolCallsCodeOutputImageObject",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "image"
                                }
                            ]
                        }
                    },
                    "image": {
                        "type": "object",
                        "properties": {
                            "file_id": {
                                "type": "string",
                                "description": "The file ID of the image."
                            }
                        }
                    }
                }
            },
            "runStepDetailsToolCallsFileSearchObject": {
                "title": "File search tool call",
                "required": [
                    "id",
                    "type",
                    "file_search"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the tool call object."
                    },
                    "type": {
                        "enum": [
                            "file_search"
                        ],
                        "type": "string",
                        "description": "The type of tool call. This is always going to be `file_search` for this type of tool call.",
                        "x-ms-enum": {
                            "name": "RunStepDetailsToolCallsFileSearchObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "file_search"
                                }
                            ]
                        }
                    },
                    "file_search": {
                        "type": "object",
                        "properties": {
                            "results": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/runStepDetailsToolCallsFileSearchResultObject"
                                },
                                "description": "The results of the file search."
                            }
                        },
                        "description": "For now, this is always going to be an empty object."
                    }
                }
            },
            "runStepDetailsToolCallsFileSearchResultObject": {
                "title": "File search tool call result",
                "required": [
                    "file_id",
                    "file_name",
                    "score"
                ],
                "type": "object",
                "properties": {
                    "file_id": {
                        "type": "string",
                        "description": "The ID of the file that result was found in."
                    },
                    "file_name": {
                        "type": "string",
                        "description": "The name of the file that result was found in."
                    },
                    "score": {
                        "maximum": 1,
                        "minimum": 0,
                        "type": "number",
                        "description": "The score of the result. All values must be a floating point number between 0 and 1."
                    },
                    "content": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "enum": [
                                        "text"
                                    ],
                                    "type": "string",
                                    "description": "The type of the content."
                                },
                                "text": {
                                    "type": "string",
                                    "description": "The text content of the file."
                                }
                            }
                        },
                        "description": "The content of the result that was found. The content is only included if requested via the include query parameter."
                    }
                },
                "description": "A result instance of the file search.",
                "x-oaiTypeLabel": "map"
            },
            "runStepDeltaStepDetailsToolCallsFileSearchObject": {
                "title": "File search tool call",
                "required": [
                    "index",
                    "type",
                    "file_search"
                ],
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "The index of the tool call in the tool calls array."
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the tool call object."
                    },
                    "type": {
                        "enum": [
                            "file_search"
                        ],
                        "type": "string",
                        "description": "The type of tool call. This is always going to be `retrieval` for this type of tool call.",
                        "x-ms-enum": {
                            "name": "RunStepDeltaStepDetailsToolCallsFileSearchObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "file_search"
                                }
                            ]
                        }
                    },
                    "file_search": {
                        "type": "object",
                        "description": "For now, this is always going to be an empty object."
                    }
                }
            },
            "runStepDetailsToolCallsFunctionObject": {
                "title": "Function tool call",
                "required": [
                    "id",
                    "type",
                    "function"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the tool call object."
                    },
                    "type": {
                        "enum": [
                            "function"
                        ],
                        "type": "string",
                        "description": "The type of tool call. This is always going to be `function` for this type of tool call.",
                        "x-ms-enum": {
                            "name": "RunStepDetailsToolCallsFunctionObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "function"
                                }
                            ]
                        }
                    },
                    "function": {
                        "required": [
                            "name",
                            "arguments",
                            "output"
                        ],
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the function."
                            },
                            "arguments": {
                                "type": "string",
                                "description": "The arguments passed to the function."
                            },
                            "output": {
                                "type": "string",
                                "description": "The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.",
                                "nullable": true
                            }
                        },
                        "description": "The definition of the function that was called."
                    }
                }
            },
            "runStepDeltaStepDetailsToolCallsFunctionObject": {
                "title": "Function tool call",
                "required": [
                    "index",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "index": {
                        "type": "integer",
                        "description": "The index of the tool call in the tool calls array."
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the tool call object."
                    },
                    "type": {
                        "enum": [
                            "function"
                        ],
                        "type": "string",
                        "description": "The type of tool call. This is always going to be `function` for this type of tool call.",
                        "x-ms-enum": {
                            "name": "RunStepDetailsToolCallsFunctionObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "function"
                                }
                            ]
                        }
                    },
                    "function": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the function."
                            },
                            "arguments": {
                                "type": "string",
                                "description": "The arguments passed to the function."
                            },
                            "output": {
                                "type": "string",
                                "description": "The output of the function. This will be `null` if the outputs have not been submitted yet.",
                                "nullable": true
                            }
                        },
                        "description": "The definition of the function that was called."
                    }
                }
            },
            "vectorStoreExpirationAfter": {
                "title": "Vector store expiration policy",
                "required": [
                    "anchor",
                    "days"
                ],
                "type": "object",
                "properties": {
                    "anchor": {
                        "enum": [
                            "last_active_at"
                        ],
                        "type": "string",
                        "description": "Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.",
                        "x-ms-enum": {
                            "name": "VectorStoreExpirationAfterAnchor",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "last_active_at",
                                    "description": "The anchor timestamp after which the expiration policy applies."
                                }
                            ]
                        }
                    },
                    "days": {
                        "maximum": 365,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The number of days after the anchor time that the vector store will expire."
                    }
                },
                "description": "The expiration policy for a vector store."
            },
            "vectorStoreObject": {
                "title": "Vector store",
                "required": [
                    "id",
                    "object",
                    "usage_bytes",
                    "created_at",
                    "status",
                    "last_active_at",
                    "name",
                    "bytes",
                    "file_counts",
                    "metadata"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The identifier, which can be referenced in API endpoints."
                    },
                    "object": {
                        "enum": [
                            "vector_store"
                        ],
                        "type": "string",
                        "description": "The object type, which is always `vector_store`."
                    },
                    "created_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the vector store was created."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the vector store."
                    },
                    "usage_bytes": {
                        "type": "integer",
                        "description": "The total number of bytes used by the files in the vector store."
                    },
                    "file_counts": {
                        "required": [
                            "in_progress",
                            "completed",
                            "failed",
                            "cancelled",
                            "total"
                        ],
                        "type": "object",
                        "properties": {
                            "in_progress": {
                                "type": "integer",
                                "description": "The number of files that are currently being processed."
                            },
                            "completed": {
                                "type": "integer",
                                "description": "The number of files that have been successfully processed."
                            },
                            "failed": {
                                "type": "integer",
                                "description": "The number of files that have failed to process."
                            },
                            "cancelled": {
                                "type": "integer",
                                "description": "The number of files that were cancelled."
                            },
                            "total": {
                                "type": "integer",
                                "description": "The total number of files."
                            }
                        }
                    },
                    "status": {
                        "enum": [
                            "expired",
                            "in_progress",
                            "completed"
                        ],
                        "type": "string",
                        "description": "The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.",
                        "x-ms-enum": {
                            "name": "VectorStoreObjectStatus",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "expired"
                                },
                                {
                                    "value": "in_progress"
                                },
                                {
                                    "value": "completed"
                                }
                            ]
                        }
                    },
                    "expires_after": {
                        "$ref": "#/components/schemas/vectorStoreExpirationAfter"
                    },
                    "expires_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the vector store will expire.",
                        "nullable": true
                    },
                    "last_active_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the vector store was last active.",
                        "nullable": true
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
                        "nullable": true
                    }
                },
                "description": "A vector store is a collection of processed files can be used by the `file_search` tool."
            },
            "createVectorStoreRequest": {
                "type": "object",
                "properties": {
                    "file_ids": {
                        "maxItems": 500,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of file IDs that the vector store should use. Useful for tools like `file_search` that can access files."
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the vector store."
                    },
                    "expires_after": {
                        "$ref": "#/components/schemas/vectorStoreExpirationAfter"
                    },
                    "chunking_strategy": {
                        "type": "object",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/autoChunkingStrategyRequestParam"
                            },
                            {
                                "$ref": "#/components/schemas/staticChunkingStrategyRequestParam"
                            }
                        ],
                        "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. Only applicable if `file_ids` is non-empty."
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "updateVectorStoreRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the vector store.",
                        "nullable": true
                    },
                    "expires_after": {
                        "$ref": "#/components/schemas/vectorStoreExpirationAfter"
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long.\n",
                        "nullable": true
                    }
                },
                "additionalProperties": false
            },
            "listVectorStoresResponse": {
                "required": [
                    "object",
                    "data",
                    "first_id",
                    "last_id",
                    "has_more"
                ],
                "properties": {
                    "object": {
                        "type": "string",
                        "example": "list"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/vectorStoreObject"
                        }
                    },
                    "first_id": {
                        "type": "string",
                        "example": "vs_abc123"
                    },
                    "last_id": {
                        "type": "string",
                        "example": "vs_abc456"
                    },
                    "has_more": {
                        "type": "boolean",
                        "example": false
                    }
                }
            },
            "deleteVectorStoreResponse": {
                "required": [
                    "id",
                    "object",
                    "deleted"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "deleted": {
                        "type": "boolean"
                    },
                    "object": {
                        "enum": [
                            "vector_store.deleted"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                            "name": "DeleteVectorStoreResponseObject",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "vector_store.deleted",
                                    "description": "The delete vector store response object state"
                                }
                            ]
                        }
                    }
                }
            },
            "vectorStoreFileObject": {
                "title": "Vector store files",
                "required": [
                    "id",
                    "object",
                    "usage_bytes",
                    "created_at",
                    "vector_store_id",
                    "status",
                    "last_error"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The identifier, which can be referenced in API endpoints."
                    },
                    "object": {
                        "enum": [
                            "vector_store.file"
                        ],
                        "type": "string",
                        "description": "The object type, which is always `vector_store.file`.",
                        "x-ms-enum": {
                            "name": "VectorStoreFileObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "vector_store.file"
                                }
                            ]
                        }
                    },
                    "usage_bytes": {
                        "type": "integer",
                        "description": "The total vector store usage in bytes. Note that this may be different from the original file size."
                    },
                    "created_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the vector store file was created."
                    },
                    "vector_store_id": {
                        "type": "string",
                        "description": "The ID of the vector store that the file is attached to."
                    },
                    "status": {
                        "enum": [
                            "in_progress",
                            "completed",
                            "cancelled",
                            "failed"
                        ],
                        "type": "string",
                        "description": "The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.",
                        "x-ms-enum": {
                            "name": "VectorStoreFileObjectStatus",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "in_progress"
                                },
                                {
                                    "value": "completed"
                                },
                                {
                                    "value": "cancelled"
                                },
                                {
                                    "value": "failed"
                                }
                            ]
                        }
                    },
                    "last_error": {
                        "required": [
                            "code",
                            "message"
                        ],
                        "type": "object",
                        "properties": {
                            "code": {
                                "enum": [
                                    "server_error",
                                    "unsupported_file",
                                    "invalid_file"
                                ],
                                "type": "string",
                                "description": "One of `server_error` or `invalid_file` or `unsupported_file`.",
                                "x-ms-enum": {
                                    "name": "VectorStoreFileObjectLastErrorCode",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "server_error"
                                        },
                                        {
                                            "value": "unsupported_file"
                                        },
                                        {
                                            "value": "invalid_file"
                                        }
                                    ]
                                }
                            },
                            "message": {
                                "type": "string",
                                "description": "A human-readable description of the error."
                            }
                        },
                        "description": "The last error associated with this vector store file. Will be `null` if there are no errors.",
                        "nullable": true
                    },
                    "chunking_strategy": {
                        "type": "object",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/autoChunkingStrategyRequestParam"
                            },
                            {
                                "$ref": "#/components/schemas/staticChunkingStrategyRequestParam"
                            }
                        ],
                        "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. Only applicable if `file_ids` is non-empty."
                    }
                },
                "description": "A list of files attached to a vector store."
            },
            "otherChunkingStrategyResponseParam": {
                "title": "Other Chunking Strategy",
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "other"
                        ],
                        "type": "string",
                        "description": "Always `other`.",
                        "x-ms-enum": {
                            "name": "OtherChunkingStrategyResponseParamType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "other"
                                }
                            ]
                        }
                    }
                },
                "additionalProperties": false,
                "description": "This is returned when the chunking strategy is unknown. Typically, this is because the file was indexed before the `chunking_strategy` concept was introduced in the API."
            },
            "staticChunkingStrategyResponseParam": {
                "title": "Static Chunking Strategy",
                "required": [
                    "type",
                    "static"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "static"
                        ],
                        "type": "string",
                        "description": "Always `static`.",
                        "x-ms-enum": {
                            "name": "StaticChunkingStrategyResponseParamType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "static"
                                }
                            ]
                        }
                    },
                    "static": {
                        "$ref": "#/components/schemas/staticChunkingStrategy"
                    }
                },
                "additionalProperties": false
            },
            "staticChunkingStrategy": {
                "required": [
                    "max_chunk_size_tokens",
                    "chunk_overlap_tokens"
                ],
                "type": "object",
                "properties": {
                    "max_chunk_size_tokens": {
                        "maximum": 4096,
                        "minimum": 100,
                        "type": "integer",
                        "description": "The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`."
                    },
                    "chunk_overlap_tokens": {
                        "type": "integer",
                        "description": "The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n"
                    }
                },
                "additionalProperties": false
            },
            "autoChunkingStrategyRequestParam": {
                "title": "Auto Chunking Strategy",
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "auto"
                        ],
                        "type": "string",
                        "description": "Always `auto`."
                    }
                },
                "additionalProperties": false,
                "description": "The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`."
            },
            "staticChunkingStrategyRequestParam": {
                "title": "Static Chunking Strategy",
                "required": [
                    "type",
                    "static"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "static"
                        ],
                        "type": "string",
                        "description": "Always `static`."
                    },
                    "static": {
                        "$ref": "#/components/schemas/staticChunkingStrategy"
                    }
                },
                "additionalProperties": false
            },
            "chunkingStrategyRequestParam": {
                "type": "object",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/autoChunkingStrategyRequestParam"
                    },
                    {
                        "$ref": "#/components/schemas/staticChunkingStrategyRequestParam"
                    }
                ],
                "description": "The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy."
            },
            "createVectorStoreFileRequest": {
                "required": [
                    "file_id"
                ],
                "type": "object",
                "properties": {
                    "file_id": {
                        "type": "string",
                        "description": "A File ID that the vector store should use. Useful for tools like `file_search` that can access files."
                    },
                    "chunking_strategy": {
                        "$ref": "#/components/schemas/chunkingStrategyRequestParam"
                    }
                },
                "additionalProperties": false
            },
            "listVectorStoreFilesResponse": {
                "required": [
                    "object",
                    "data",
                    "first_id",
                    "last_id",
                    "has_more"
                ],
                "properties": {
                    "object": {
                        "type": "string",
                        "example": "list"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/vectorStoreFileObject"
                        }
                    },
                    "first_id": {
                        "type": "string",
                        "example": "file-abc123"
                    },
                    "last_id": {
                        "type": "string",
                        "example": "file-abc456"
                    },
                    "has_more": {
                        "type": "boolean",
                        "example": false
                    }
                }
            },
            "deleteVectorStoreFileResponse": {
                "required": [
                    "id",
                    "object",
                    "deleted"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "deleted": {
                        "type": "boolean"
                    },
                    "object": {
                        "enum": [
                            "vector_store.file.deleted"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                            "name": "DeleteVectorStoreFileResponseObject",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "vector_store.file.deleted"
                                }
                            ]
                        }
                    }
                }
            },
            "vectorStoreFileBatchObject": {
                "title": "Vector store file batch",
                "required": [
                    "id",
                    "object",
                    "created_at",
                    "vector_store_id",
                    "status",
                    "file_counts"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The identifier, which can be referenced in API endpoints."
                    },
                    "object": {
                        "enum": [
                            "vector_store.files_batch"
                        ],
                        "type": "string",
                        "description": "The object type, which is always `vector_store.file_batch`.",
                        "x-ms-enum": {
                            "name": "VectorStoreFileBatchObjectType",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "vector_store.files_batch"
                                }
                            ]
                        }
                    },
                    "created_at": {
                        "type": "integer",
                        "description": "The Unix timestamp (in seconds) for when the vector store files batch was created."
                    },
                    "vector_store_id": {
                        "type": "string",
                        "description": "The ID of the vector store that the File is attached to."
                    },
                    "status": {
                        "enum": [
                            "in_progress",
                            "completed",
                            "cancelled",
                            "failed"
                        ],
                        "type": "string",
                        "description": "The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.",
                        "x-ms-enum": {
                            "name": "VectorStoreFileBatchObjectStatus",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "in_progress"
                                },
                                {
                                    "value": "completed"
                                },
                                {
                                    "value": "cancelled"
                                },
                                {
                                    "value": "failed"
                                }
                            ]
                        }
                    },
                    "file_counts": {
                        "required": [
                            "in_progress",
                            "completed",
                            "cancelled",
                            "failed",
                            "total"
                        ],
                        "type": "object",
                        "properties": {
                            "in_progress": {
                                "type": "integer",
                                "description": "The number of files that are currently being processed."
                            },
                            "completed": {
                                "type": "integer",
                                "description": "The number of files that have been processed."
                            },
                            "failed": {
                                "type": "integer",
                                "description": "The number of files that have failed to process."
                            },
                            "cancelled": {
                                "type": "integer",
                                "description": "The number of files that where cancelled."
                            },
                            "total": {
                                "type": "integer",
                                "description": "The total number of files."
                            }
                        }
                    }
                },
                "description": "A batch of files attached to a vector store."
            },
            "createVectorStoreFileBatchRequest": {
                "required": [
                    "file_ids"
                ],
                "type": "object",
                "properties": {
                    "file_ids": {
                        "maxItems": 500,
                        "minItems": 1,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of File IDs that the vector store should use. Useful for tools like `file_search` that can access files."
                    },
                    "chunking_strategy": {
                        "$ref": "#/components/schemas/chunkingStrategyRequestParam"
                    }
                },
                "additionalProperties": false
            },
            "assistantStreamEvent": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/threadStreamEvent"
                    },
                    {
                        "$ref": "#/components/schemas/runStreamEvent"
                    },
                    {
                        "$ref": "#/components/schemas/runStepStreamEvent"
                    },
                    {
                        "$ref": "#/components/schemas/messageStreamEvent"
                    },
                    {
                        "$ref": "#/components/schemas/errorEvent"
                    },
                    {
                        "$ref": "#/components/schemas/doneEvent"
                    }
                ],
                "description": "Represents an event emitted when streaming a Run.\n\nEach event in a server-sent events stream has an `event` and `data` property:\n\n```\nevent: thread.created\ndata: {\"id\": \"thread_123\", \"object\": \"thread\", ...}\n```\n\nWe emit events whenever a new object is created, transitions to a new state, or is being\nstreamed in parts (deltas). For example, we emit `thread.run.created` when a new run\nis created, `thread.run.completed` when a run completes, and so on. When an Assistant chooses\nto create a message during a run, we emit a `thread.message.created event`, a\n`thread.message.in_progress` event, many `thread.message.delta` events, and finally a\n`thread.message.completed` event.\n\nWe may add additional events over time, so we recommend handling unknown events gracefully\nin your code."
            },
            "threadStreamEvent": {
                "oneOf": [
                    {
                        "required": [
                            "event",
                            "data"
                        ],
                        "type": "object",
                        "properties": {
                            "event": {
                                "enum": [
                                    "thread.created"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "ThreadStreamEventEnum",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "thread.created",
                                            "description": "The thread created event"
                                        }
                                    ]
                                }
                            },
                            "data": {
                                "$ref": "#/components/schemas/threadObject"
                            }
                        },
                        "description": "Occurs when a new thread is created."
                    }
                ]
            },
            "runStreamEvent": {
                "oneOf": [
                    {
                        "required": [
                            "event",
                            "data"
                        ],
                        "type": "object",
                        "properties": {
                            "event": {
                                "enum": [
                                    "thread.run.created"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "RunStreamEventCreated",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "thread.run.created"
                                        }
                                    ]
                                }
                            },
                            "data": {
                                "$ref": "#/components/schemas/runObject"
                            }
                        },
                        "description": "Occurs when a new run is created."
                    },
                    {
                        "required": [
                            "event",
                            "data"
                        ],
                        "type": "object",
                        "properties": {
                            "event": {
                                "enum": [
                                    "thread.run.queued"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "RunStreamEventQueued",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "thread.run.queued"
                                        }
                                    ]
                                }
                            },
                            "data": {
                                "$ref": "#/components/schemas/runObject"
                            }
                        },
                        "description": "Occurs when a run moves to a `queued` status."
                    },
                    {
                        "required": [
                            "event",
                            "data"
                        ],
                        "type": "object",
                        "properties": {
                            "event": {
                                "enum": [
                                    "thread.run.in_progress"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "RunStreamEventInProgress",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "thread.run.in_progress"
                                        }
                                    ]
                                }
                            },
                            "data": {
                                "$ref": "#/components/schemas/runObject"
                            }
                        },
                        "description": "Occurs when a run moves to an `in_progress` status."
                    },
                    {
                        "required": [
                            "event",
                            "data"
                        ],
                        "type": "object",
                        "properties": {
                            "event": {
                                "enum": [
                                    "thread.run.requires_action"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "RunStreamEventRequiresAction",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "thread.run.requires_action"
                                        }
                                    ]
                                }
                            },
                            "data": {
                                "$ref": "#/components/schemas/runObject"
                            }
                        },
                        "description": "Occurs when a run moves to a `requires_action` status."
                    },
                    {
                        "required": [
                            "event",
                            "data"
                        ],
                        "type": "object",
                        "properties": {
                            "event": {
                                "enum": [
                                    "thread.run.completed"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "RunStreamEventCompleted",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "thread.run.completed"
                                        }
                                    ]
                                }
                            },
                            "data": {
                                "$ref": "#/components/schemas/runObject"
                            }
                        },
                        "description": "Occurs when a run is completed."
                    },
                    {
                        "required": [
                            "event",
                            "data"
                        ],
                        "type": "object",
                        "properties": {
                            "event": {
                                "enum": [
                                    "thread.run.failed"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "RunStreamEventFailed",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "thread.run.failed"
                                        }
                                    ]
                                }
                            },
                            "data": {
                                "$ref": "#/components/schemas/runObject"
                            }
                        },
                        "description": "Occurs when a run fails."
                    },
                    {
                        "required": [
                            "event",
                            "data"
                        ],
                        "type": "object",
                        "properties": {
                            "event": {
                                "enum": [
                                    "thread.run.cancelling"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "RunStreamEventCancelling",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "thread.run.cancelling"
                                        }
                                    ]
                                }
                            },
                            "data": {
                                "$ref": "#/components/schemas/runObject"
                            }
                        },
                        "description": "Occurs when a run moves to a `cancelling` status."
                    },
                    {
                        "required": [
                            "event",
                            "data"
                        ],
                        "type": "object",
                        "properties": {
                            "event": {
                                "enum": [
                                    "thread.run.cancelled"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "RunStreamEventCancelled",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "thread.run.cancelled"
                                        }
                                    ]
                                }
                            },
                            "data": {
                                "$ref": "#/components/schemas/runObject"
                            }
                        },
                        "description": "Occurs when a run is cancelled."
                    },
                    {
                        "required": [
                            "event",
                            "data"
                        ],
                        "type": "object",
                        "properties": {
                            "event": {
                                "enum": [
                                    "thread.run.expired"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "RunStreamEventExpired",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "thread.run.expired"
                                        }
                                    ]
                                }
                            },
                            "data": {
                                "$ref": "#/components/schemas/runObject"
                            }
                        },
                        "description": "Occurs when a run expires."
                    }
                ]
            },
            "runStepStreamEvent": {
                "oneOf": [
                    {
                        "required": [
                            "event",
                            "data"
                        ],
                        "type": "object",
                        "properties": {
                            "event": {
                                "enum": [
                                    "thread.run.step.created"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "RunStepStreamEventCreated",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "thread.run.step.created"
                                        }
                                    ]
                                }
                            },
                            "data": {
                                "$ref": "#/components/schemas/runStepObject"
                            }
                        },
                        "description": "Occurs when a run step is created."
                    },
                    {
                        "required": [
                            "event",
                            "data"
                        ],
                        "type": "object",
                        "properties": {
                            "event": {
                                "enum": [
                                    "thread.run.step.in_progress"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "RunStepStreamEventInProgress",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "thread.run.step.in_progress"
                                        }
                                    ]
                                }
                            },
                            "data": {
                                "$ref": "#/components/schemas/runStepObject"
                            }
                        },
                        "description": "Occurs when a run step moves to an `in_progress` state."
                    },
                    {
                        "required": [
                            "event",
                            "data"
                        ],
                        "type": "object",
                        "properties": {
                            "event": {
                                "enum": [
                                    "thread.run.step.delta"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "RunStepStreamEventDelta",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "thread.run.step.delta"
                                        }
                                    ]
                                }
                            },
                            "data": {
                                "$ref": "#/components/schemas/runStepDeltaObject"
                            }
                        },
                        "description": "Occurs when parts of a run step are being streamed."
                    },
                    {
                        "required": [
                            "event",
                            "data"
                        ],
                        "type": "object",
                        "properties": {
                            "event": {
                                "enum": [
                                    "thread.run.step.completed"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "RunStepStreamEventCompleted",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "thread.run.step.completed"
                                        }
                                    ]
                                }
                            },
                            "data": {
                                "$ref": "#/components/schemas/runStepObject"
                            }
                        },
                        "description": "Occurs when a run step is completed."
                    },
                    {
                        "required": [
                            "event",
                            "data"
                        ],
                        "type": "object",
                        "properties": {
                            "event": {
                                "enum": [
                                    "thread.run.step.failed"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "RunStepStreamEventFailed",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "thread.run.step.failed"
                                        }
                                    ]
                                }
                            },
                            "data": {
                                "$ref": "#/components/schemas/runStepObject"
                            }
                        },
                        "description": "Occurs when a run step fails."
                    },
                    {
                        "required": [
                            "event",
                            "data"
                        ],
                        "type": "object",
                        "properties": {
                            "event": {
                                "enum": [
                                    "thread.run.step.cancelled"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "RunStepStreamEventCancelled",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "thread.run.step.cancelled"
                                        }
                                    ]
                                }
                            },
                            "data": {
                                "$ref": "#/components/schemas/runStepObject"
                            }
                        },
                        "description": "Occurs when a run step is cancelled."
                    },
                    {
                        "required": [
                            "event",
                            "data"
                        ],
                        "type": "object",
                        "properties": {
                            "event": {
                                "enum": [
                                    "thread.run.step.expired"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "RunStepStreamEventExpired",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "thread.run.step.expired"
                                        }
                                    ]
                                }
                            },
                            "data": {
                                "$ref": "#/components/schemas/runStepObject"
                            }
                        },
                        "description": "Occurs when a run step expires."
                    }
                ]
            },
            "messageStreamEvent": {
                "oneOf": [
                    {
                        "required": [
                            "event",
                            "data"
                        ],
                        "type": "object",
                        "properties": {
                            "event": {
                                "enum": [
                                    "thread.message.created"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "MessageStreamEventCreated",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "thread.message.created"
                                        }
                                    ]
                                }
                            },
                            "data": {
                                "$ref": "#/components/schemas/messageObject"
                            }
                        },
                        "description": "Occurs when a message is created."
                    },
                    {
                        "required": [
                            "event",
                            "data"
                        ],
                        "type": "object",
                        "properties": {
                            "event": {
                                "enum": [
                                    "thread.message.in_progress"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "MessageStreamEventInProgress",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "thread.message.in_progress"
                                        }
                                    ]
                                }
                            },
                            "data": {
                                "$ref": "#/components/schemas/messageObject"
                            }
                        },
                        "description": "Occurs when a message moves to an `in_progress` state."
                    },
                    {
                        "required": [
                            "event",
                            "data"
                        ],
                        "type": "object",
                        "properties": {
                            "event": {
                                "enum": [
                                    "thread.message.delta"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "MessageStreamEventDelta",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "thread.message.delta"
                                        }
                                    ]
                                }
                            },
                            "data": {
                                "$ref": "#/components/schemas/messageDeltaObject"
                            }
                        },
                        "description": "Occurs when parts of a message are being streamed."
                    },
                    {
                        "required": [
                            "event",
                            "data"
                        ],
                        "type": "object",
                        "properties": {
                            "event": {
                                "enum": [
                                    "thread.message.completed"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "MessageStreamEventCompleted",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "thread.message.completed"
                                        }
                                    ]
                                }
                            },
                            "data": {
                                "$ref": "#/components/schemas/messageObject"
                            }
                        },
                        "description": "Occurs when a message is completed."
                    },
                    {
                        "required": [
                            "event",
                            "data"
                        ],
                        "type": "object",
                        "properties": {
                            "event": {
                                "enum": [
                                    "thread.message.incomplete"
                                ],
                                "type": "string",
                                "x-ms-enum": {
                                    "name": "MessageStreamEventIncomplete",
                                    "modelAsString": true,
                                    "values": [
                                        {
                                            "value": "thread.message.incomplete"
                                        }
                                    ]
                                }
                            },
                            "data": {
                                "$ref": "#/components/schemas/messageObject"
                            }
                        },
                        "description": "Occurs when a message ends before it is completed."
                    }
                ]
            },
            "Annotation": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/FileCitation"
                    },
                    {
                        "$ref": "#/components/schemas/UrlCitation"
                    },
                    {
                        "$ref": "#/components/schemas/FilePath"
                    }
                ]
            },
            "Click": {
                "title": "Click",
                "required": [
                    "type",
                    "button",
                    "x",
                    "y"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "click"
                        ],
                        "type": "string",
                        "description": "Specifies the event type. For a click action, this property is \nalways set to `click`.\n",
                        "default": "click",
                        "x-stainless-const": true
                    },
                    "button": {
                        "enum": [
                            "left",
                            "right",
                            "wheel",
                            "back",
                            "forward"
                        ],
                        "type": "string",
                        "description": "Indicates which mouse button was pressed during the click. One of `left`, `right`, `wheel`, `back`, or `forward`.\n"
                    },
                    "x": {
                        "type": "integer",
                        "description": "The x-coordinate where the click occurred.\n"
                    },
                    "y": {
                        "type": "integer",
                        "description": "The y-coordinate where the click occurred.\n"
                    }
                },
                "description": "A click action.\n"
            },
            "CodeInterpreterFileOutput": {
                "title": "Code interpreter file output",
                "required": [
                    "type",
                    "files"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "files"
                        ],
                        "type": "string",
                        "description": "The type of the code interpreter file output. Always `files`.\n",
                        "x-stainless-const": true
                    },
                    "files": {
                        "type": "array",
                        "items": {
                            "required": [
                                "mime_type",
                                "file_id"
                            ],
                            "type": "object",
                            "properties": {
                                "mime_type": {
                                    "type": "string",
                                    "description": "The MIME type of the file.\n"
                                },
                                "file_id": {
                                    "type": "string",
                                    "description": "The ID of the file.\n"
                                }
                            }
                        }
                    }
                },
                "description": "The output of a code interpreter tool call that is a file.\n"
            },
            "CodeInterpreterTextOutput": {
                "title": "Code interpreter text output",
                "required": [
                    "type",
                    "logs"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "logs"
                        ],
                        "type": "string",
                        "description": "The type of the code interpreter text output. Always `logs`.\n",
                        "x-stainless-const": true
                    },
                    "logs": {
                        "type": "string",
                        "description": "The logs of the code interpreter tool call.\n"
                    }
                },
                "description": "The output of a code interpreter tool call that is text.\n"
            },
            "CodeInterpreterTool": {
                "title": "Code interpreter",
                "required": [
                    "type",
                    "file_ids"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "code_interpreter"
                        ],
                        "type": "string",
                        "description": "The type of the code interpreter tool. Always `code_interpreter`.\n",
                        "x-stainless-const": true
                    },
                    "file_ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IDs of the files to run the code on.\n"
                    }
                },
                "description": "A tool that runs code.\n"
            },
            "CodeInterpreterToolCall": {
                "title": "Code interpreter tool call",
                "required": [
                    "id",
                    "type",
                    "code",
                    "status",
                    "results"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique ID of the code interpreter tool call.\n"
                    },
                    "type": {
                        "enum": [
                            "code_interpreter_call"
                        ],
                        "type": "string",
                        "description": "The type of the code interpreter tool call. Always `code_interpreter_call`.\n",
                        "x-stainless-const": true
                    },
                    "code": {
                        "type": "string",
                        "description": "The code to run.\n"
                    },
                    "status": {
                        "enum": [
                            "in_progress",
                            "interpreting",
                            "completed"
                        ],
                        "type": "string",
                        "description": "The status of the code interpreter tool call.\n"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/CodeInterpreterToolOutput"
                        },
                        "description": "The results of the code interpreter tool call.\n"
                    }
                },
                "description": "A tool call to run code.\n"
            },
            "CodeInterpreterToolOutput": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/CodeInterpreterTextOutput"
                    },
                    {
                        "$ref": "#/components/schemas/CodeInterpreterFileOutput"
                    }
                ]
            },
            "ComparisonFilter": {
                "title": "Comparison Filter",
                "required": [
                    "type",
                    "key",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "eq",
                            "ne",
                            "gt",
                            "gte",
                            "lt",
                            "lte"
                        ],
                        "type": "string",
                        "description": "Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`, `lt`, `lte`.\n- `eq`: equals\n- `ne`: not equal\n- `gt`: greater than\n- `gte`: greater than or equal\n- `lt`: less than\n- `lte`: less than or equal\n",
                        "default": "eq"
                    },
                    "key": {
                        "type": "string",
                        "description": "The key to compare against the value."
                    },
                    "value": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "number"
                            },
                            {
                                "type": "boolean"
                            }
                        ],
                        "description": "The value to compare against the attribute key; supports string, number, or boolean types."
                    }
                },
                "additionalProperties": false,
                "description": "A filter used to compare a specified attribute key to a given value using a defined comparison operation.\n",
                "x-oaiMeta": {
                    "name": "ComparisonFilter"
                }
            },
            "CompoundFilter": {
                "title": "Compound Filter",
                "required": [
                    "type",
                    "filters"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "and",
                            "or"
                        ],
                        "type": "string",
                        "description": "Type of operation: `and` or `or`."
                    },
                    "filters": {
                        "type": "array",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ComparisonFilter"
                                },
                                {
                                    "$ref": "#/components/schemas/CompoundFilter"
                                }
                            ]
                        },
                        "description": "Array of filters to combine. Items can be `ComparisonFilter` or `CompoundFilter`."
                    }
                },
                "additionalProperties": false,
                "description": "Combine multiple filters using `and` or `or`.",
                "x-oaiMeta": {
                    "name": "CompoundFilter"
                }
            },
            "ComputerAction": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/Click"
                    },
                    {
                        "$ref": "#/components/schemas/DoubleClick"
                    },
                    {
                        "$ref": "#/components/schemas/Drag"
                    },
                    {
                        "$ref": "#/components/schemas/KeyPress"
                    },
                    {
                        "$ref": "#/components/schemas/Move"
                    },
                    {
                        "$ref": "#/components/schemas/Screenshot"
                    },
                    {
                        "$ref": "#/components/schemas/Scroll"
                    },
                    {
                        "$ref": "#/components/schemas/Type"
                    },
                    {
                        "$ref": "#/components/schemas/Wait"
                    }
                ]
            },
            "ComputerScreenshotImage": {
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "computer_screenshot"
                        ],
                        "type": "string",
                        "description": "Specifies the event type. For a computer screenshot, this property is \nalways set to `computer_screenshot`.\n",
                        "default": "computer_screenshot",
                        "x-stainless-const": true
                    },
                    "image_url": {
                        "type": "string",
                        "description": "The URL of the screenshot image."
                    },
                    "file_id": {
                        "type": "string",
                        "description": "The identifier of an uploaded file that contains the screenshot."
                    }
                },
                "description": "A computer screenshot image used with the computer use tool.\n"
            },
            "ComputerTool": {
                "title": "Computer use",
                "required": [
                    "type",
                    "display_width",
                    "display_height",
                    "environment"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "computer-preview"
                        ],
                        "type": "string",
                        "description": "The type of the computer use tool. Always `computer_use_preview`.\n",
                        "x-stainless-const": true
                    },
                    "display_width": {
                        "type": "number",
                        "description": "The width of the computer display.\n"
                    },
                    "display_height": {
                        "type": "number",
                        "description": "The height of the computer display.\n"
                    },
                    "environment": {
                        "enum": [
                            "mac",
                            "windows",
                            "ubuntu",
                            "browser"
                        ],
                        "type": "string",
                        "description": "The type of computer environment to control.\n"
                    }
                },
                "description": "A tool that controls a virtual computer. Learn more about the \n[computer tool](/docs/guides/tools-computer-use).\n"
            },
            "ComputerToolCall": {
                "title": "Computer tool call",
                "required": [
                    "type",
                    "id",
                    "action",
                    "call_id",
                    "pending_safety_checks",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "computer_call"
                        ],
                        "type": "string",
                        "description": "The type of the computer call. Always `computer_call`.",
                        "default": "computer_call"
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique ID of the computer call."
                    },
                    "call_id": {
                        "type": "string",
                        "description": "An identifier used when responding to the tool call with output.\n"
                    },
                    "action": {
                        "$ref": "#/components/schemas/ComputerAction"
                    },
                    "pending_safety_checks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ComputerToolCallSafetyCheck"
                        },
                        "description": "The pending safety checks for the computer call.\n",
                        "x-oaiExpandable": true
                    },
                    "status": {
                        "enum": [
                            "in_progress",
                            "completed",
                            "incomplete"
                        ],
                        "type": "string",
                        "description": "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n"
                    }
                },
                "description": "A tool call to a computer use tool. See the \n[computer use guide](/docs/guides/tools-computer-use) for more information.\n"
            },
            "ComputerToolCallOutput": {
                "title": "Computer tool call output",
                "required": [
                    "type",
                    "call_id",
                    "output"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "computer_call_output"
                        ],
                        "type": "string",
                        "description": "The type of the computer tool call output. Always `computer_call_output`.\n",
                        "default": "computer_call_output",
                        "x-stainless-const": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of the computer tool call output.\n"
                    },
                    "call_id": {
                        "type": "string",
                        "description": "The ID of the computer tool call that produced the output.\n"
                    },
                    "acknowledged_safety_checks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ComputerToolCallSafetyCheck"
                        },
                        "description": "The safety checks reported by the API that have been acknowledged by the \ndeveloper.\n",
                        "x-oaiExpandable": true
                    },
                    "output": {
                        "$ref": "#/components/schemas/ComputerScreenshotImage"
                    },
                    "status": {
                        "enum": [
                            "in_progress",
                            "completed",
                            "incomplete"
                        ],
                        "type": "string",
                        "description": "The status of the message input. One of `in_progress`, `completed`, or\n`incomplete`. Populated when input items are returned via API.\n"
                    }
                },
                "description": "The output of a computer tool call.\n"
            },
            "ComputerToolCallOutputResource": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ComputerToolCallOutput"
                    },
                    {
                        "required": [
                            "id"
                        ],
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "The unique ID of the computer call tool output.\n"
                            }
                        }
                    }
                ]
            },
            "ComputerToolCallSafetyCheck": {
                "required": [
                    "id",
                    "code",
                    "message"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the pending safety check."
                    },
                    "code": {
                        "type": "string",
                        "description": "The type of the pending safety check."
                    },
                    "message": {
                        "type": "string",
                        "description": "Details about the pending safety check."
                    }
                },
                "description": "A pending safety check for the computer call.\n"
            },
            "Content": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/InputContent"
                    },
                    {
                        "$ref": "#/components/schemas/OutputContent"
                    }
                ],
                "description": "Multi-modal input and output contents.\n"
            },
            "Coordinate": {
                "title": "Coordinate",
                "required": [
                    "x",
                    "y"
                ],
                "type": "object",
                "properties": {
                    "x": {
                        "type": "integer",
                        "description": "The x-coordinate.\n"
                    },
                    "y": {
                        "type": "integer",
                        "description": "The y-coordinate.\n"
                    }
                },
                "description": "An x/y coordinate pair, e.g. `{ x: 100, y: 200 }`.\n"
            },
            "CreateModelResponseProperties": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ModelResponseProperties"
                    }
                ]
            },
            "createResponse": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/CreateModelResponseProperties"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseProperties"
                    },
                    {
                        "required": [
                            "model",
                            "input"
                        ],
                        "type": "object",
                        "properties": {
                            "input": {
                                "oneOf": [
                                    {
                                        "title": "Text input",
                                        "type": "string",
                                        "description": "A text input to the model, equivalent to a text input with the \n`user` role.\n"
                                    },
                                    {
                                        "title": "Input item list",
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/InputItem"
                                        },
                                        "description": "A list of one or many input items to the model, containing \ndifferent content types.\n"
                                    }
                                ],
                                "description": "Text, image, or file inputs to the model, used to generate a response.\n\nLearn more:\n- [Text inputs and outputs](/docs/guides/text)\n- [Image inputs](/docs/guides/images)\n- [File inputs](/docs/guides/pdf-files)\n- [Conversation state](/docs/guides/conversation-state)\n- [Function calling](/docs/guides/function-calling)\n",
                                "x-oaiExpandable": true
                            },
                            "include": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/includable"
                                },
                                "description": "Specify additional output data to include in the model response. Currently\nsupported values are:\n- `file_search_call.results`: Include the search results of\n  the file search tool call.\n- `message.input_image.image_url`: Include image urls from the input message.\n- `computer_call_output.output.image_url`: Include image urls from the computer call output.\n",
                                "nullable": true
                            },
                            "parallel_tool_calls": {
                                "type": "boolean",
                                "description": "Whether to allow the model to run tool calls in parallel.\n",
                                "default": true,
                                "nullable": true
                            },
                            "store": {
                                "type": "boolean",
                                "description": "Whether to store the generated model response for later retrieval via\nAPI.\n",
                                "default": true,
                                "nullable": true
                            },
                            "stream": {
                                "type": "boolean",
                                "description": "If set to true, the model response data will be streamed to the client\nas it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\nSee the [Streaming section below](/docs/api-reference/responses-streaming)\nfor more information.\n",
                                "default": false,
                                "nullable": true
                            }
                        }
                    }
                ]
            },
            "DoubleClick": {
                "title": "DoubleClick",
                "required": [
                    "type",
                    "x",
                    "y"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "double_click"
                        ],
                        "type": "string",
                        "description": "Specifies the event type. For a double click action, this property is \nalways set to `double_click`.\n",
                        "default": "double_click",
                        "x-stainless-const": true
                    },
                    "x": {
                        "type": "integer",
                        "description": "The x-coordinate where the double click occurred.\n"
                    },
                    "y": {
                        "type": "integer",
                        "description": "The y-coordinate where the double click occurred.\n"
                    }
                },
                "description": "A double click action.\n"
            },
            "Drag": {
                "title": "Drag",
                "required": [
                    "type",
                    "path"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "drag"
                        ],
                        "type": "string",
                        "description": "Specifies the event type. For a drag action, this property is \nalways set to `drag`.\n",
                        "default": "drag",
                        "x-stainless-const": true
                    },
                    "path": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Coordinate"
                        },
                        "description": "An array of coordinates representing the path of the drag action. Coordinates will appear as an array\nof objects, eg\n```\n[\n  { x: 100, y: 200 },\n  { x: 200, y: 300 }\n]\n```\n",
                        "x-oaiExpandable": true
                    }
                },
                "description": "A drag action.\n"
            },
            "EasyInputMessage": {
                "title": "Input message",
                "required": [
                    "role",
                    "content"
                ],
                "type": "object",
                "properties": {
                    "role": {
                        "enum": [
                            "user",
                            "assistant",
                            "system",
                            "developer"
                        ],
                        "type": "string",
                        "description": "The role of the message input. One of `user`, `assistant`, `system`, or\n`developer`.\n"
                    },
                    "content": {
                        "oneOf": [
                            {
                                "title": "Text input",
                                "type": "string",
                                "description": "A text input to the model.\n"
                            },
                            {
                                "$ref": "#/components/schemas/InputMessageContentList"
                            }
                        ],
                        "description": "Text, image, or audio input to the model, used to generate a response.\nCan also contain previous assistant responses.\n",
                        "x-oaiExpandable": true
                    },
                    "type": {
                        "enum": [
                            "message"
                        ],
                        "type": "string",
                        "description": "The type of the message input. Always `message`.\n",
                        "x-stainless-const": true
                    }
                },
                "description": "A message input to the model with a role indicating instruction following\nhierarchy. Instructions given with the `developer` or `system` role take\nprecedence over instructions given with the `user` role. Messages with the\n`assistant` role are presumed to have been generated by the model in previous\ninteractions.\n"
            },
            "FileCitation": {
                "title": "File citation",
                "required": [
                    "type",
                    "index",
                    "file_id"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "file_citation"
                        ],
                        "type": "string",
                        "description": "The type of the file citation. Always `file_citation`.\n",
                        "x-stainless-const": true
                    },
                    "index": {
                        "type": "integer",
                        "description": "The index of the file in the list of files.\n"
                    },
                    "file_id": {
                        "type": "string",
                        "description": "The ID of the file.\n"
                    }
                },
                "description": "A citation to a file.\n"
            },
            "FilePath": {
                "title": "File path",
                "required": [
                    "type",
                    "file_id",
                    "index"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "file_path"
                        ],
                        "type": "string",
                        "description": "The type of the file path. Always `file_path`.\n",
                        "x-stainless-const": true
                    },
                    "file_id": {
                        "type": "string",
                        "description": "The ID of the file.\n"
                    },
                    "index": {
                        "type": "integer",
                        "description": "The index of the file in the list of files.\n"
                    }
                },
                "description": "A path to a file.\n"
            },
            "FileSearchRanker": {
                "enum": [
                    "auto",
                    "default_2024_08_21"
                ],
                "type": "string",
                "description": "The ranker to use for the file search. If not specified will use the `auto` ranker."
            },
            "FileSearchTool": {
                "title": "File search",
                "required": [
                    "type",
                    "vector_store_ids"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "file_search"
                        ],
                        "type": "string",
                        "description": "The type of the file search tool. Always `file_search`.\n",
                        "x-stainless-const": true
                    },
                    "vector_store_ids": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The IDs of the vector stores to search.\n"
                    },
                    "max_num_results": {
                        "type": "integer",
                        "description": "The maximum number of results to return. This number should be between 1 \nand 50 inclusive.\n"
                    },
                    "filters": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ComparisonFilter"
                            },
                            {
                                "$ref": "#/components/schemas/CompoundFilter"
                            }
                        ],
                        "description": "A filter to apply based on file attributes.",
                        "x-oaiExpandable": true
                    },
                    "ranking_options": {
                        "type": "object",
                        "properties": {
                            "ranker": {
                                "enum": [
                                    "auto",
                                    "default-2024-11-15"
                                ],
                                "type": "string",
                                "description": "The ranker to use for the file search.",
                                "default": "auto"
                            },
                            "score_threshold": {
                                "maximum": 1,
                                "minimum": 0,
                                "type": "number",
                                "description": "The score threshold for the file search, a number between 0 and 1.\nNumbers closer to 1 will attempt to return only the most relevant\nresults, but may return fewer results.\n",
                                "default": 0
                            }
                        },
                        "additionalProperties": false,
                        "description": "Ranking options for search."
                    }
                },
                "description": "A tool that searches for relevant content from uploaded files.\nLearn more about the [file search tool](/docs/guides/tools-file-search).\n"
            },
            "FileSearchToolCall": {
                "title": "File search tool call",
                "required": [
                    "id",
                    "type",
                    "status",
                    "queries"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique ID of the file search tool call.\n"
                    },
                    "type": {
                        "enum": [
                            "file_search_call"
                        ],
                        "type": "string",
                        "description": "The type of the file search tool call. Always `file_search_call`.\n",
                        "x-stainless-const": true
                    },
                    "status": {
                        "enum": [
                            "in_progress",
                            "searching",
                            "completed",
                            "incomplete",
                            "failed"
                        ],
                        "type": "string",
                        "description": "The status of the file search tool call. One of `in_progress`, \n`searching`, `incomplete` or `failed`,\n"
                    },
                    "queries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The queries used to search for files.\n"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "file_id": {
                                    "type": "string",
                                    "description": "The unique ID of the file.\n"
                                },
                                "text": {
                                    "type": "string",
                                    "description": "The text that was retrieved from the file.\n"
                                },
                                "filename": {
                                    "type": "string",
                                    "description": "The name of the file.\n"
                                },
                                "attributes": {
                                    "$ref": "#/components/schemas/VectorStoreFileAttributes"
                                },
                                "score": {
                                    "type": "number",
                                    "description": "The relevance score of the file - a value between 0 and 1.\n",
                                    "format": "float"
                                }
                            }
                        },
                        "description": "The results of the file search tool call.\n",
                        "nullable": true
                    }
                },
                "description": "The results of a file search tool call. See the \n[file search guide](/docs/guides/tools-file-search) for more information.\n"
            },
            "FunctionTool": {
                "title": "Function",
                "required": [
                    "type",
                    "name",
                    "parameters",
                    "strict"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "function"
                        ],
                        "type": "string",
                        "description": "The type of the function tool. Always `function`.\n",
                        "x-stainless-const": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the function to call.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the function. Used by the model to determine whether\nor not to call the function.\n",
                        "nullable": true
                    },
                    "parameters": {
                        "type": "object",
                        "description": "A JSON schema object describing the parameters of the function.\n"
                    },
                    "strict": {
                        "type": "boolean",
                        "description": "Whether to enforce strict parameter validation. Default `true`.\n"
                    }
                },
                "description": "Defines a function in your own code the model can choose to call. Learn more\nabout [function calling](/docs/guides/function-calling).\n"
            },
            "FunctionToolCall": {
                "title": "Function tool call",
                "required": [
                    "id",
                    "type",
                    "call_id",
                    "name",
                    "arguments"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique ID of the function tool call.\n"
                    },
                    "type": {
                        "enum": [
                            "function_call"
                        ],
                        "type": "string",
                        "description": "The type of the function tool call. Always `function_call`.\n",
                        "x-stainless-const": true
                    },
                    "call_id": {
                        "type": "string",
                        "description": "The unique ID of the function tool call generated by the model.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the function to run.\n"
                    },
                    "arguments": {
                        "type": "string",
                        "description": "A JSON string of the arguments to pass to the function.\n"
                    },
                    "status": {
                        "enum": [
                            "in_progress",
                            "completed",
                            "incomplete"
                        ],
                        "type": "string",
                        "description": "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n"
                    }
                },
                "description": "A tool call to run a function. See the \n[function calling guide](/docs/guides/function-calling) for more information.\n"
            },
            "FunctionToolCallOutput": {
                "title": "Function tool call output",
                "required": [
                    "type",
                    "call_id",
                    "output"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique ID of the function tool call output. Populated when this item\nis returned via API.\n"
                    },
                    "type": {
                        "enum": [
                            "function_call_output"
                        ],
                        "type": "string",
                        "description": "The type of the function tool call output. Always `function_call_output`.\n",
                        "x-stainless-const": true
                    },
                    "call_id": {
                        "type": "string",
                        "description": "The unique ID of the function tool call generated by the model.\n"
                    },
                    "output": {
                        "type": "string",
                        "description": "A JSON string of the output of the function tool call.\n"
                    },
                    "status": {
                        "enum": [
                            "in_progress",
                            "completed",
                            "incomplete"
                        ],
                        "type": "string",
                        "description": "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n"
                    }
                },
                "description": "The output of a function tool call.\n"
            },
            "FunctionToolCallOutputResource": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/FunctionToolCallOutput"
                    },
                    {
                        "required": [
                            "id"
                        ],
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "The unique ID of the function call tool output.\n"
                            }
                        }
                    }
                ]
            },
            "includable": {
                "enum": [
                    "file_search_call.results",
                    "message.input_image.image_url",
                    "computer_call_output.output.image_url"
                ],
                "type": "string",
                "description": "Specify additional output data to include in the model response. Currently\nsupported values are:\n- `file_search_call.results`: Include the search results of\n  the file search tool call.\n- `message.input_image.image_url`: Include image urls from the input message.\n- `computer_call_output.output.image_url`: Include image urls from the computer call output.\n"
            },
            "InputAudio": {
                "title": "Audio input",
                "required": [
                    "type",
                    "data",
                    "format"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "input_audio"
                        ],
                        "type": "string",
                        "description": "The type of the input item. Always `input_audio`.\n",
                        "x-stainless-const": true
                    },
                    "data": {
                        "type": "string",
                        "description": "Base64-encoded audio data.\n"
                    },
                    "format": {
                        "enum": [
                            "mp3",
                            "wav"
                        ],
                        "type": "string",
                        "description": "The format of the audio data. Currently supported formats are `mp3` and\n`wav`.\n"
                    }
                },
                "description": "An audio input to the model.\n"
            },
            "InputContent": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/InputText"
                    },
                    {
                        "$ref": "#/components/schemas/InputImage"
                    },
                    {
                        "$ref": "#/components/schemas/InputFile"
                    }
                ],
                "x-oaiExpandable": true
            },
            "InputFile": {
                "title": "File input",
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "input_file"
                        ],
                        "type": "string",
                        "description": "The type of the input item. Always `input_file`.\n",
                        "x-stainless-const": true
                    },
                    "file_id": {
                        "type": "string",
                        "description": "The ID of the file to be sent to the model.\n"
                    },
                    "filename": {
                        "type": "string",
                        "description": "The name of the file to be sent to the model.\n"
                    },
                    "file_data": {
                        "type": "string",
                        "description": "The content of the file to be sent to the model.\n"
                    }
                },
                "description": "A file input to the model.\n"
            },
            "InputImage": {
                "title": "Image input",
                "required": [
                    "type",
                    "detail"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "input_image"
                        ],
                        "type": "string",
                        "description": "The type of the input item. Always `input_image`.\n",
                        "x-stainless-const": true
                    },
                    "image_url": {
                        "type": "string",
                        "description": "The URL of the image to be sent to the model. A fully qualified URL or\nbase64 encoded image in a data URL.\n",
                        "nullable": true
                    },
                    "file_id": {
                        "type": "string",
                        "description": "The ID of the file to be sent to the model.\n",
                        "nullable": true
                    },
                    "detail": {
                        "enum": [
                            "high",
                            "low",
                            "auto"
                        ],
                        "type": "string",
                        "description": "The detail level of the image to be sent to the model. One of `high`,\n`low`, or `auto`. Defaults to `auto`.\n",
                        "default": "auto"
                    }
                },
                "description": "An image input to the model. Learn about [image inputs](/docs/guides/vision).\n"
            },
            "InputItem": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/EasyInputMessage"
                    },
                    {
                        "$ref": "#/components/schemas/Item"
                    },
                    {
                        "$ref": "#/components/schemas/ItemReference"
                    }
                ],
                "discriminator": {
                    "propertyName": "type"
                }
            },
            "InputMessage": {
                "title": "Input message",
                "required": [
                    "role",
                    "content"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "message"
                        ],
                        "type": "string",
                        "description": "The type of the message input. Always set to `message`.\n",
                        "x-stainless-const": true
                    },
                    "role": {
                        "enum": [
                            "user",
                            "system",
                            "developer"
                        ],
                        "type": "string",
                        "description": "The role of the message input. One of `user`, `system`, or `developer`.\n"
                    },
                    "status": {
                        "enum": [
                            "in_progress",
                            "completed",
                            "incomplete"
                        ],
                        "type": "string",
                        "description": "The status of item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n"
                    },
                    "content": {
                        "$ref": "#/components/schemas/InputMessageContentList"
                    }
                },
                "description": "A message input to the model with a role indicating instruction following\nhierarchy. Instructions given with the `developer` or `system` role take\nprecedence over instructions given with the `user` role.\n"
            },
            "InputMessageContentList": {
                "title": "Input item content list",
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/InputContent"
                },
                "description": "A list of one or many input items to the model, containing different content \ntypes.\n",
                "x-oaiExpandable": true
            },
            "InputMessageResource": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/InputMessage"
                    },
                    {
                        "required": [
                            "id"
                        ],
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "The unique ID of the message input.\n"
                            }
                        }
                    }
                ]
            },
            "InputText": {
                "title": "Text input",
                "required": [
                    "type",
                    "text"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "input_text"
                        ],
                        "type": "string",
                        "description": "The type of the input item. Always `input_text`.\n",
                        "x-stainless-const": true
                    },
                    "text": {
                        "type": "string",
                        "description": "The text input to the model.\n"
                    }
                },
                "description": "A text input to the model.\n"
            },
            "Item": {
                "type": "object",
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/InputMessage"
                    },
                    {
                        "$ref": "#/components/schemas/OutputMessage"
                    },
                    {
                        "$ref": "#/components/schemas/FileSearchToolCall"
                    },
                    {
                        "$ref": "#/components/schemas/ComputerToolCall"
                    },
                    {
                        "$ref": "#/components/schemas/ComputerToolCallOutput"
                    },
                    {
                        "$ref": "#/components/schemas/FunctionToolCall"
                    },
                    {
                        "$ref": "#/components/schemas/FunctionToolCallOutput"
                    },
                    {
                        "$ref": "#/components/schemas/ReasoningItem"
                    }
                ],
                "description": "Content item used to generate a response.\n",
                "discriminator": {
                    "propertyName": "type"
                },
                "x-oaiExpandable": true
            },
            "ItemReference": {
                "title": "Item reference",
                "required": [
                    "id",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of the item to reference.\n"
                    },
                    "type": {
                        "enum": [
                            "item_reference"
                        ],
                        "type": "string",
                        "description": "The type of item to reference. Always `item_reference`.\n",
                        "x-stainless-const": true
                    }
                },
                "description": "An internal identifier for an item to reference.\n"
            },
            "ItemResource": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/InputMessageResource"
                    },
                    {
                        "$ref": "#/components/schemas/OutputMessage"
                    },
                    {
                        "$ref": "#/components/schemas/FileSearchToolCall"
                    },
                    {
                        "$ref": "#/components/schemas/ComputerToolCall"
                    },
                    {
                        "$ref": "#/components/schemas/ComputerToolCallOutputResource"
                    },
                    {
                        "$ref": "#/components/schemas/FunctionToolCall"
                    },
                    {
                        "$ref": "#/components/schemas/FunctionToolCallOutputResource"
                    }
                ],
                "description": "Content item used to generate a response.\n",
                "discriminator": {
                    "propertyName": "type"
                },
                "x-oaiExpandable": true
            },
            "KeyPress": {
                "title": "KeyPress",
                "required": [
                    "type",
                    "keys"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "keypress"
                        ],
                        "type": "string",
                        "description": "Specifies the event type. For a keypress action, this property is \nalways set to `keypress`.\n",
                        "default": "keypress",
                        "x-stainless-const": true
                    },
                    "keys": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "One of the keys the model is requesting to be pressed.\n"
                        },
                        "description": "The combination of keys the model is requesting to be pressed. This is an\narray of strings, each representing a key.\n"
                    }
                },
                "description": "A collection of keypresses the model would like to perform.\n"
            },
            "Metadata": {
                "type": "object",
                "additionalProperties": {
                    "type": "string"
                },
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n",
                "nullable": true,
                "x-oaiTypeLabel": "map"
            },
            "ModelResponseProperties": {
                "type": "object",
                "properties": {
                    "model": {
                        "type": "string",
                        "description": "Model used to generate the responses."
                    },
                    "metadata": {
                        "$ref": "#/components/schemas/Metadata"
                    },
                    "temperature": {
                        "maximum": 2,
                        "minimum": 0,
                        "type": "number",
                        "description": "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\nWe generally recommend altering this or `top_p` but not both.\n",
                        "default": 1,
                        "nullable": true,
                        "example": 1
                    },
                    "top_p": {
                        "maximum": 1,
                        "minimum": 0,
                        "type": "number",
                        "description": "An alternative to sampling with temperature, called nucleus sampling,\nwhere the model considers the results of the tokens with top_p probability\nmass. So 0.1 means only the tokens comprising the top 10% probability mass\nare considered.\n\nWe generally recommend altering this or `temperature` but not both.\n",
                        "default": 1,
                        "nullable": true,
                        "example": 1
                    },
                    "user": {
                        "type": "string",
                        "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n",
                        "example": "user-1234"
                    }
                }
            },
            "Move": {
                "title": "Move",
                "required": [
                    "type",
                    "x",
                    "y"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "move"
                        ],
                        "type": "string",
                        "description": "Specifies the event type. For a move action, this property is \nalways set to `move`.\n",
                        "default": "move",
                        "x-stainless-const": true
                    },
                    "x": {
                        "type": "integer",
                        "description": "The x-coordinate to move to.\n"
                    },
                    "y": {
                        "type": "integer",
                        "description": "The y-coordinate to move to.\n"
                    }
                },
                "description": "A mouse move action.\n"
            },
            "OutputAudio": {
                "title": "Output audio",
                "required": [
                    "type",
                    "data",
                    "transcript"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "output_audio"
                        ],
                        "type": "string",
                        "description": "The type of the output audio. Always `output_audio`.\n",
                        "x-stainless-const": true
                    },
                    "data": {
                        "type": "string",
                        "description": "Base64-encoded audio data from the model.\n"
                    },
                    "transcript": {
                        "type": "string",
                        "description": "The transcript of the audio data from the model.\n"
                    }
                },
                "description": "An audio output from the model.\n"
            },
            "OutputContent": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/OutputText"
                    },
                    {
                        "$ref": "#/components/schemas/Refusal"
                    }
                ]
            },
            "OutputItem": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/OutputMessage"
                    },
                    {
                        "$ref": "#/components/schemas/FileSearchToolCall"
                    },
                    {
                        "$ref": "#/components/schemas/FunctionToolCall"
                    },
                    {
                        "$ref": "#/components/schemas/ComputerToolCall"
                    },
                    {
                        "$ref": "#/components/schemas/ReasoningItem"
                    }
                ],
                "discriminator": {
                    "propertyName": "type"
                },
                "x-oaiExpandable": true
            },
            "OutputMessage": {
                "title": "Output message",
                "required": [
                    "id",
                    "type",
                    "role",
                    "content",
                    "status"
                ],
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The unique ID of the output message.\n"
                    },
                    "type": {
                        "enum": [
                            "message"
                        ],
                        "type": "string",
                        "description": "The type of the output message. Always `message`.\n",
                        "x-stainless-const": true
                    },
                    "role": {
                        "enum": [
                            "assistant"
                        ],
                        "type": "string",
                        "description": "The role of the output message. Always `assistant`.\n",
                        "x-stainless-const": true
                    },
                    "content": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OutputContent"
                        },
                        "description": "The content of the output message.\n",
                        "x-oaiExpandable": true
                    },
                    "status": {
                        "enum": [
                            "in_progress",
                            "completed",
                            "incomplete"
                        ],
                        "type": "string",
                        "description": "The status of the message input. One of `in_progress`, `completed`, or\n`incomplete`. Populated when input items are returned via API.\n"
                    }
                },
                "description": "An output message from the model.\n"
            },
            "OutputText": {
                "title": "Output text",
                "required": [
                    "type",
                    "text",
                    "annotations"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "output_text"
                        ],
                        "type": "string",
                        "description": "The type of the output text. Always `output_text`.\n",
                        "x-stainless-const": true
                    },
                    "text": {
                        "type": "string",
                        "description": "The text output from the model.\n"
                    },
                    "annotations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Annotation"
                        },
                        "description": "The annotations of the text output.\n"
                    }
                },
                "description": "A text output from the model.\n"
            },
            "RealtimeSessionCreateRequest": {
                "type": "object",
                "properties": {
                    "modalities": {
                        "items": {
                            "enum": [
                                "text",
                                "audio"
                            ],
                            "type": "string",
                            "default": [
                                "text",
                                "audio"
                            ]
                        },
                        "description": "The set of modalities the model can respond with. To disable audio,\nset this to [\"text\"].\n"
                    },
                    "model": {
                        "type": "string",
                        "description": "The name of the deployment used for this session.\n"
                    },
                    "instructions": {
                        "type": "string",
                        "description": "The default system instructions (i.e. system message) prepended to model calls. This field allows the client to guide the model on desired responses. The model can be instructed on response content and format, (e.g. \"be extremely succinct\", \"act friendly\", \"here are examples of good  responses\") and on audio behavior (e.g. \"talk quickly\", \"inject emotion into your voice\", \"laugh frequently\"). The instructions are not guaranteed to be followed by the model, but they provide guidance to the model on the desired behavior.\n\nNote that the server sets default instructions which will be used if this  field is not set and are visible in the `session.created` event at the  start of the session.\n"
                    },
                    "voice": {
                        "$ref": "#/components/schemas/VoiceIdsShared"
                    },
                    "input_audio_format": {
                        "enum": [
                            "pcm16",
                            "g711_ulaw",
                            "g711_alaw"
                        ],
                        "type": "string",
                        "description": "The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate,  single channel (mono), and little-endian byte order.\n",
                        "default": "pcm16"
                    },
                    "output_audio_format": {
                        "enum": [
                            "pcm16",
                            "g711_ulaw",
                            "g711_alaw"
                        ],
                        "type": "string",
                        "description": "The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, output audio is sampled at a rate of 24kHz.\n",
                        "default": "pcm16"
                    },
                    "input_audio_transcription": {
                        "type": "object",
                        "properties": {
                            "model": {
                                "type": "string",
                                "description": "The model to use for transcription, current options are `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`.\n"
                            },
                            "language": {
                                "type": "string",
                                "description": "The language of the input audio. Supplying the input language in\n[ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format will improve accuracy and latency.\n"
                            },
                            "prompt": {
                                "type": "string",
                                "description": "An optional text to guide the model's style or continue a previous audio segment.\nFor `whisper-1`, the [prompt is a list of keywords](/docs/guides/speech-to-text#prompting).\nFor `gpt-4o-transcribe` models, the prompt is a free text string, for example \"expect words related to technology\".\n"
                            }
                        },
                        "description": "Configuration for input audio transcription, defaults to off and can be set to `null` to turn off once on. Input audio transcription is not native to the model, since the model consumes audio directly. Transcription runs asynchronously through [the Transcriptions endpoint](https://learn.microsoft.com/en-us/azure/ai-services/openai/reference-preview#transcriptions---create) and should be treated as guidance of input audio content rather than precisely what the model heard. The client can optionally set the language and prompt for transcription, these offer additional guidance to the transcription service.\n"
                    },
                    "turn_detection": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "enum": [
                                    "server_vad",
                                    "semantic_vad"
                                ],
                                "type": "string",
                                "description": "Type of turn detection.\n",
                                "default": "server_vad"
                            },
                            "eagerness": {
                                "enum": [
                                    "low",
                                    "medium",
                                    "high",
                                    "auto"
                                ],
                                "type": "string",
                                "description": "Used only for `semantic_vad` mode. The eagerness of the model to respond. `low` will wait longer for the user to continue speaking, `high` will respond more quickly. `auto` is the default and is equivalent to `medium`.\n",
                                "default": "auto"
                            },
                            "threshold": {
                                "type": "number",
                                "description": "Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A higher threshold will require louder audio to activate the model, and thus might perform better in noisy environments.\n"
                            },
                            "prefix_padding_ms": {
                                "type": "integer",
                                "description": "Used only for `server_vad` mode. Amount of audio to include before the VAD detected speech (in \nmilliseconds). Defaults to 300ms.\n"
                            },
                            "silence_duration_ms": {
                                "type": "integer",
                                "description": "Used only for `server_vad` mode. Duration of silence to detect speech stop (in milliseconds). Defaults \nto 500ms. With shorter values the model will respond more quickly, \nbut may jump in on short pauses from the user.\n"
                            },
                            "create_response": {
                                "type": "boolean",
                                "description": "Whether or not to automatically generate a response when a VAD stop event occurs.\n",
                                "default": true
                            },
                            "interrupt_response": {
                                "type": "boolean",
                                "description": "Whether or not to automatically interrupt any ongoing response with output to the default\nconversation (i.e. `conversation` of `auto`) when a VAD start event occurs.\n",
                                "default": true
                            }
                        },
                        "description": "Configuration for turn detection, ether Server VAD or Semantic VAD. This can be set to `null` to turn off, in which case the client must manually trigger model response.\nServer VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech.\nSemantic VAD is more advanced and uses a turn detection model (in conjunction with VAD) to semantically estimate whether the user has finished speaking, then dynamically sets a timeout based on this probability. For example, if user audio trails off with \"uhhm\", the model will score a low probability of turn end and wait longer for the user to continue speaking. This can be useful for more natural conversations, but may have a higher latency.\n"
                    },
                    "input_audio_noise_reduction": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "enum": [
                                    "near_field",
                                    "far_field"
                                ],
                                "type": "string",
                                "description": "Type of noise reduction. `near_field` is for close-talking microphones such as headphones, `far_field` is for far-field microphones such as laptop or conference room microphones.\n"
                            }
                        },
                        "description": "Configuration for input audio noise reduction. This can be set to `null` to turn off.\nNoise reduction filters audio added to the input audio buffer before it is sent to VAD and the model.\nFiltering the audio can improve VAD and turn detection accuracy (reducing false positives) and model performance by improving perception of the input audio.\n",
                        "default": null
                    },
                    "tools": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "enum": [
                                        "function"
                                    ],
                                    "type": "string",
                                    "description": "The type of the tool, i.e. `function`.",
                                    "x-stainless-const": true
                                },
                                "name": {
                                    "type": "string",
                                    "description": "The name of the function."
                                },
                                "description": {
                                    "type": "string",
                                    "description": "The description of the function, including guidance on when and how \nto call it, and guidance about what to tell the user when calling \n(if anything).\n"
                                },
                                "parameters": {
                                    "type": "object",
                                    "description": "Parameters of the function in JSON Schema."
                                }
                            }
                        },
                        "description": "Tools (functions) available to the model."
                    },
                    "tool_choice": {
                        "type": "string",
                        "description": "How the model chooses tools. Options are `auto`, `none`, `required`, or \nspecify a function.\n",
                        "default": "auto"
                    },
                    "temperature": {
                        "type": "number",
                        "description": "Sampling temperature for the model, limited to [0.6, 1.2]. For audio models a temperature of 0.8 is highly recommended for best performance.\n",
                        "default": 0.8
                    },
                    "max_response_output_tokens": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "enum": [
                                    "inf"
                                ],
                                "type": "string",
                                "x-stainless-const": true
                            }
                        ],
                        "description": "Maximum number of output tokens for a single assistant response,\ninclusive of tool calls. Provide an integer between 1 and 4096 to\nlimit output tokens, or `inf` for the maximum available tokens for a\ngiven model. Defaults to `inf`.\n"
                    }
                },
                "description": "Realtime session object configuration."
            },
            "RealtimeSessionCreateResponse": {
                "required": [
                    "client_secret"
                ],
                "type": "object",
                "properties": {
                    "client_secret": {
                        "required": [
                            "value",
                            "expires_at"
                        ],
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "string",
                                "description": "Ephemeral key usable in client environments to authenticate connections to the Realtime API. Use this in client-side environments rather than a standard API token, which should only be used server-side.\n"
                            },
                            "expires_at": {
                                "type": "integer",
                                "description": "Timestamp for when the token expires. Currently, all tokens expire after one minute.\n"
                            }
                        },
                        "description": "Ephemeral key returned by the API."
                    },
                    "modalities": {
                        "items": {
                            "enum": [
                                "text",
                                "audio"
                            ],
                            "type": "string"
                        },
                        "description": "The set of modalities the model can respond with. To disable audio,\nset this to [\"text\"].\n"
                    },
                    "instructions": {
                        "type": "string",
                        "description": "The default system instructions (i.e. system message) prepended to model calls. This field allows the client to guide the model on desired  responses. The model can be instructed on response content and format, (e.g. \"be extremely succinct\", \"act friendly\", \"here are examples of good responses\") and on audio behavior (e.g. \"talk quickly\", \"inject emotion into your voice\", \"laugh frequently\"). The instructions are not guaranteed to be followed by the model, but they provide guidance to the model on the desired behavior.\nNote that the server sets default instructions which will be used if this field is not set and are visible in the `session.created` event at the start of the session.\n"
                    },
                    "voice": {
                        "$ref": "#/components/schemas/VoiceIdsShared"
                    },
                    "input_audio_format": {
                        "type": "string",
                        "description": "The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n"
                    },
                    "output_audio_format": {
                        "type": "string",
                        "description": "The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n"
                    },
                    "input_audio_transcription": {
                        "type": "object",
                        "properties": {
                            "model": {
                                "type": "string",
                                "description": "The model to use for transcription, `whisper-1` is the only currently supported model.\n"
                            }
                        },
                        "description": "Configuration for input audio transcription, defaults to off and can be set to `null` to turn off once on. Input audio transcription is not native to the model, since the model consumes audio directly. Transcription runs asynchronously through Whisper and should be treated as rough guidance rather than the representation understood by the model.\n"
                    },
                    "turn_detection": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Type of turn detection, only `server_vad` is currently supported.\n"
                            },
                            "threshold": {
                                "type": "number",
                                "description": "Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A higher threshold will require louder audio to activate the model, and thus might perform better in noisy environments.\n"
                            },
                            "prefix_padding_ms": {
                                "type": "integer",
                                "description": "Amount of audio to include before the VAD detected speech (in \nmilliseconds). Defaults to 300ms.\n"
                            },
                            "silence_duration_ms": {
                                "type": "integer",
                                "description": "Duration of silence to detect speech stop (in milliseconds). Defaults to 500ms. With shorter values the model will respond more quickly, but may jump in on short pauses from the user.\n"
                            }
                        },
                        "description": "Configuration for turn detection. Can be set to `null` to turn off. Server VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech.\n"
                    },
                    "tools": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "enum": [
                                        "function"
                                    ],
                                    "type": "string",
                                    "description": "The type of the tool, i.e. `function`.",
                                    "x-stainless-const": true
                                },
                                "name": {
                                    "type": "string",
                                    "description": "The name of the function."
                                },
                                "description": {
                                    "type": "string",
                                    "description": "The description of the function, including guidance on when and how to call it, and guidance about what to tell the user when calling (if anything).\n"
                                },
                                "parameters": {
                                    "type": "object",
                                    "description": "Parameters of the function in JSON Schema."
                                }
                            }
                        },
                        "description": "Tools (functions) available to the model."
                    },
                    "tool_choice": {
                        "type": "string",
                        "description": "How the model chooses tools. Options are `auto`, `none`, `required`, or specify a function.\n"
                    },
                    "temperature": {
                        "type": "number",
                        "description": "Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\n"
                    },
                    "max_response_output_tokens": {
                        "oneOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "enum": [
                                    "inf"
                                ],
                                "type": "string",
                                "x-stainless-const": true
                            }
                        ],
                        "description": "Maximum number of output tokens for a single assistant response,\ninclusive of tool calls. Provide an integer between 1 and 4096 to\nlimit output tokens, or `inf` for the maximum available tokens for a\ngiven model. Defaults to `inf`.\n"
                    }
                },
                "description": "A new Realtime session configuration, with an ephemeral key. Default TTL for keys is one minute.\n"
            },
            "RealtimeTranscriptionSessionCreateRequest": {
                "type": "object",
                "properties": {
                    "modalities": {
                        "items": {
                            "enum": [
                                "text",
                                "audio"
                            ],
                            "type": "string",
                            "default": [
                                "text",
                                "audio"
                            ]
                        },
                        "description": "The set of modalities the model can respond with. To disable audio,\nset this to [\"text\"].\n"
                    },
                    "input_audio_format": {
                        "enum": [
                            "pcm16",
                            "g711_ulaw",
                            "g711_alaw"
                        ],
                        "type": "string",
                        "description": "The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate,  single channel (mono), and little-endian byte order.\n",
                        "default": "pcm16"
                    },
                    "input_audio_transcription": {
                        "type": "object",
                        "properties": {
                            "model": {
                                "enum": [
                                    "gpt-4o-transcribe",
                                    "gpt-4o-mini-transcribe",
                                    "whisper-1"
                                ],
                                "type": "string",
                                "description": "The model to use for transcription, current options are `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, and `whisper-1`.\n"
                            },
                            "language": {
                                "type": "string",
                                "description": "The language of the input audio. Supplying the input language in\n[ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format will improve accuracy and latency.\n"
                            },
                            "prompt": {
                                "type": "string",
                                "description": "An optional text to guide the model's style or continue a previous audio segment.\nFor `whisper-1`, the prompt is a list of keywords.\nFor `gpt-4o-transcribe` models, the prompt is a free text string, for example \"expect words related to technology\".\n"
                            }
                        },
                        "description": "Configuration for input audio transcription. The client can optionally set the language and prompt for transcription, these offer additional guidance to the transcription service.\n"
                    },
                    "turn_detection": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "enum": [
                                    "server_vad",
                                    "semantic_vad"
                                ],
                                "type": "string",
                                "description": "Type of turn detection.\n",
                                "default": "server_vad"
                            },
                            "eagerness": {
                                "enum": [
                                    "low",
                                    "medium",
                                    "high",
                                    "auto"
                                ],
                                "type": "string",
                                "description": "Used only for `semantic_vad` mode. The eagerness of the model to respond. `low` will wait longer for the user to continue speaking, `high` will respond more quickly. `auto` is the default and is equivalent to `medium`.\n",
                                "default": "auto"
                            },
                            "threshold": {
                                "type": "number",
                                "description": "Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A \nhigher threshold will require louder audio to activate the model, and \nthus might perform better in noisy environments.\n"
                            },
                            "prefix_padding_ms": {
                                "type": "integer",
                                "description": "Used only for `server_vad` mode. Amount of audio to include before the VAD detected speech (in \nmilliseconds). Defaults to 300ms.\n"
                            },
                            "silence_duration_ms": {
                                "type": "integer",
                                "description": "Used only for `server_vad` mode. Duration of silence to detect speech stop (in milliseconds). Defaults to 500ms. With shorter values the model will respond more quickly,  but may jump in on short pauses from the user.\n"
                            },
                            "create_response": {
                                "type": "boolean",
                                "description": "Whether or not to automatically generate a response when a VAD stop event occurs. Not available for transcription sessions.\n",
                                "default": true
                            },
                            "interrupt_response": {
                                "type": "boolean",
                                "description": "Whether or not to automatically interrupt any ongoing response with output to the default conversation (i.e. `conversation` of `auto`) when a VAD start event occurs. Not available for transcription sessions.\n",
                                "default": true
                            }
                        },
                        "description": "Configuration for turn detection, ether Server VAD or Semantic VAD. This can be set to `null` to turn off, in which case the client must manually trigger model response.\nServer VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech.\nSemantic VAD is more advanced and uses a turn detection model (in conjunction with VAD) to semantically estimate whether the user has finished speaking, then dynamically sets a timeout based on this probability. For example, if user audio trails off with \"uhhm\", the model will score a low probability of turn end and wait longer for the user to continue speaking. This can be useful for more natural conversations, but may have a higher latency.\n"
                    },
                    "input_audio_noise_reduction": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "enum": [
                                    "near_field",
                                    "far_field"
                                ],
                                "type": "string",
                                "description": "Type of noise reduction. `near_field` is for close-talking microphones such as headphones, `far_field` is for far-field microphones such as laptop or conference room microphones.\n"
                            }
                        },
                        "description": "Configuration for input audio noise reduction. This can be set to `null` to turn off.\nNoise reduction filters audio added to the input audio buffer before it is sent to VAD and the model.\nFiltering the audio can improve VAD and turn detection accuracy (reducing false positives) and model performance by improving perception of the input audio.\n",
                        "default": null
                    },
                    "include": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The set of items to include in the transcription. Current available items are:\n- `item.input_audio_transcription.logprobs`\n"
                    }
                },
                "description": "Realtime transcription session object configuration."
            },
            "RealtimeTranscriptionSessionCreateResponse": {
                "required": [
                    "client_secret"
                ],
                "type": "object",
                "properties": {
                    "client_secret": {
                        "required": [
                            "value",
                            "expires_at"
                        ],
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "string",
                                "description": "Ephemeral key usable in client environments to authenticate connections to the Realtime API. Use this in client-side environments rather than a standard API token, which should only be used server-side.\n"
                            },
                            "expires_at": {
                                "type": "integer",
                                "description": "Timestamp for when the token expires. Currently, all tokens expire after one minute.\n"
                            }
                        },
                        "description": "Ephemeral key returned by the API. Only present when the session is\ncreated on the server via REST API.\n"
                    },
                    "modalities": {
                        "items": {
                            "enum": [
                                "text",
                                "audio"
                            ],
                            "type": "string"
                        },
                        "description": "The set of modalities the model can respond with. To disable audio,\nset this to [\"text\"].\n"
                    },
                    "input_audio_format": {
                        "type": "string",
                        "description": "The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n"
                    },
                    "input_audio_transcription": {
                        "type": "object",
                        "properties": {
                            "model": {
                                "enum": [
                                    "gpt-4o-transcribe",
                                    "gpt-4o-mini-transcribe",
                                    "whisper-1"
                                ],
                                "type": "string",
                                "description": "The model to use for transcription. Can be `gpt-4o-transcribe`, `gpt-4o-mini-transcribe`, or `whisper-1`.\n"
                            },
                            "language": {
                                "type": "string",
                                "description": "The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format will improve accuracy and latency.\n"
                            },
                            "prompt": {
                                "type": "string",
                                "description": "An optional text to guide the model's style or continue a previous audio segment. The prompt should match the audio language.\n"
                            }
                        },
                        "description": "Configuration of the transcription model.\n"
                    },
                    "turn_detection": {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "description": "Type of turn detection, only `server_vad` is currently supported.\n"
                            },
                            "threshold": {
                                "type": "number",
                                "description": "Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A higher threshold will require louder audio to activate the model, and thus might perform better in noisy environments.\n"
                            },
                            "prefix_padding_ms": {
                                "type": "integer",
                                "description": "Amount of audio to include before the VAD detected speech (in \nmilliseconds). Defaults to 300ms.\n"
                            },
                            "silence_duration_ms": {
                                "type": "integer",
                                "description": "Duration of silence to detect speech stop (in milliseconds). Defaults to 500ms. With shorter values the model will respond more quickly, but may jump in on short pauses from the user.\n"
                            }
                        },
                        "description": "Configuration for turn detection. Can be set to `null` to turn off. Server VAD means that the model will detect the start and end of speech based on audio volume and respond at the end of user speech.\n"
                    }
                },
                "description": "A new Realtime transcription session configuration.\n\nWhen a session is created on the server via REST API, the session object also contains an ephemeral key. Default TTL for keys is one minute. This property is not present when a session is updated via the WebSocket API.\n"
            },
            "Reasoning": {
                "title": "Reasoning",
                "required": [
                    "effort"
                ],
                "type": "object",
                "properties": {
                    "effort": {
                        "$ref": "#/components/schemas/ReasoningEffort"
                    },
                    "summary": {
                        "enum": [
                            "concise",
                            "detailed"
                        ],
                        "type": "string",
                        "description": "**o-series models only** \n\nA summary of the reasoning performed by the model. This can be\nuseful for debugging and understanding the model's reasoning process.\nOne of `concise` or `detailed`.\n",
                        "nullable": true
                    }
                },
                "description": "**o-series models only**\n\nConfiguration options for \n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\n",
                "x-oaiExpandable": true
            },
            "ReasoningItem": {
                "title": "Reasoning",
                "required": [
                    "id",
                    "content",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "reasoning"
                        ],
                        "type": "string",
                        "description": "The type of the object. Always `reasoning`.\n",
                        "x-stainless-const": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The unique identifier of the reasoning content.\n"
                    },
                    "content": {
                        "type": "array",
                        "items": {
                            "required": [
                                "type",
                                "text"
                            ],
                            "type": "object",
                            "properties": {
                                "type": {
                                    "enum": [
                                        "reasoning_summary"
                                    ],
                                    "type": "string",
                                    "description": "The type of the object. Always `text`.\n",
                                    "x-stainless-const": true
                                },
                                "text": {
                                    "type": "string",
                                    "description": "A short summary of the reasoning used by the model when generating\nthe response.\n"
                                }
                            }
                        },
                        "description": "Reasoning text contents.\n"
                    },
                    "status": {
                        "enum": [
                            "in_progress",
                            "completed",
                            "incomplete"
                        ],
                        "type": "string",
                        "description": "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n"
                    }
                },
                "description": "A description of the chain of thought used by a reasoning model while generating\na response.\n",
                "x-oaiExpandable": true
            },
            "Refusal": {
                "title": "Refusal",
                "required": [
                    "type",
                    "refusal"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "refusal"
                        ],
                        "type": "string",
                        "description": "The type of the refusal. Always `refusal`.\n",
                        "x-stainless-const": true
                    },
                    "refusal": {
                        "type": "string",
                        "description": "The refusal explanationfrom the model.\n"
                    }
                },
                "description": "A refusal from the model.\n"
            },
            "response": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ModelResponseProperties"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseProperties"
                    },
                    {
                        "required": [
                            "id",
                            "object",
                            "created_at",
                            "error",
                            "incomplete_details",
                            "instructions",
                            "model",
                            "tools",
                            "output",
                            "parallel_tool_calls",
                            "metadata",
                            "tool_choice",
                            "temperature",
                            "top_p"
                        ],
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "Unique identifier for this Response.\n"
                            },
                            "object": {
                                "enum": [
                                    "response"
                                ],
                                "type": "string",
                                "description": "The object type of this resource - always set to `response`.\n",
                                "x-stainless-const": true
                            },
                            "status": {
                                "enum": [
                                    "completed",
                                    "failed",
                                    "in_progress",
                                    "incomplete"
                                ],
                                "type": "string",
                                "description": "The status of the response generation. One of `completed`, `failed`, \n`in_progress`, or `incomplete`.\n"
                            },
                            "created_at": {
                                "type": "number",
                                "description": "Unix timestamp (in seconds) of when this Response was created.\n"
                            },
                            "error": {
                                "$ref": "#/components/schemas/ResponseError"
                            },
                            "incomplete_details": {
                                "type": "object",
                                "properties": {
                                    "reason": {
                                        "enum": [
                                            "max_output_tokens",
                                            "content_filter"
                                        ],
                                        "type": "string",
                                        "description": "The reason why the response is incomplete."
                                    }
                                },
                                "description": "Details about why the response is incomplete.\n",
                                "nullable": true
                            },
                            "output": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/OutputItem"
                                },
                                "description": "An array of content items generated by the model.\n\n- The length and order of items in the `output` array is dependent\n  on the model's response.\n- Rather than accessing the first item in the `output` array and \n  assuming it's an `assistant` message with the content generated by\n  the model, you might consider using the `output_text` property where\n  supported in SDKs.\n",
                                "x-oaiExpandable": true
                            },
                            "output_text": {
                                "type": "string",
                                "description": "SDK-only convenience property that contains the aggregated text output \nfrom all `output_text` items in the `output` array, if any are present. \nSupported in the Python and JavaScript SDKs.\n",
                                "nullable": true,
                                "x-oaiSupportedSDKs": [
                                    "python",
                                    "javascript"
                                ]
                            },
                            "usage": {
                                "$ref": "#/components/schemas/ResponseUsage"
                            },
                            "parallel_tool_calls": {
                                "type": "boolean",
                                "description": "Whether to allow the model to run tool calls in parallel.\n",
                                "default": true
                            }
                        },
                        "x-oaiMeta": {
                            "name": "The response object",
                            "group": "responses",
                            "example": "{\n  \"id\": \"resp_67ccd3a9da748190baa7f1570fe91ac604becb25c45c1d41\",\n  \"object\": \"response\",\n  \"created_at\": 1741476777,\n  \"status\": \"completed\",\n  \"error\": null,\n  \"incomplete_details\": null,\n  \"instructions\": null,\n  \"max_output_tokens\": null,\n  \"model\": \"gpt-4o-2024-08-06\",\n  \"output\": [\n    {\n      \"type\": \"message\",\n      \"id\": \"msg_67ccd3acc8d48190a77525dc6de64b4104becb25c45c1d41\",\n      \"status\": \"completed\",\n      \"role\": \"assistant\",\n      \"content\": [\n        {\n          \"type\": \"output_text\",\n          \"text\": \"The image depicts a scenic landscape with a wooden boardwalk or pathway leading through lush, green grass under a blue sky with some clouds. The setting suggests a peaceful natural area, possibly a park or nature reserve. There are trees and shrubs in the background.\",\n          \"annotations\": []\n        }\n      ]\n    }\n  ],\n  \"parallel_tool_calls\": true,\n  \"previous_response_id\": null,\n  \"reasoning\": {\n    \"effort\": null,\n    \"summary\": null\n  },\n  \"store\": true,\n  \"temperature\": 1.0,\n  \"text\": {\n    \"format\": {\n      \"type\": \"text\"\n    }\n  },\n  \"tool_choice\": \"auto\",\n  \"tools\": [],\n  \"top_p\": 1.0,\n  \"truncation\": \"disabled\",\n  \"usage\": {\n    \"input_tokens\": 328,\n    \"input_tokens_details\": {\n      \"cached_tokens\": 0\n    },\n    \"output_tokens\": 52,\n    \"output_tokens_details\": {\n      \"reasoning_tokens\": 0\n    },\n    \"total_tokens\": 380\n  },\n  \"user\": null,\n  \"metadata\": {}\n}\n"
                        }
                    }
                ]
            },
            "ResponseAudioDeltaEvent": {
                "required": [
                    "type",
                    "delta"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.audio.delta"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.audio.delta`.\n",
                        "x-stainless-const": true
                    },
                    "delta": {
                        "type": "string",
                        "description": "A chunk of Base64 encoded response audio bytes.\n"
                    }
                },
                "description": "Emitted when there is a partial audio response.",
                "x-oaiMeta": {
                    "name": "response.audio.delta",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.audio.delta\",\n  \"response_id\": \"resp_123\",\n  \"delta\": \"base64encoded...\"\n}\n"
                }
            },
            "ResponseAudioDoneEvent": {
                "required": [
                    "type",
                    "response_id"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.audio.done"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.audio.done`.\n",
                        "x-stainless-const": true
                    }
                },
                "description": "Emitted when the audio response is complete.",
                "x-oaiMeta": {
                    "name": "response.audio.done",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.audio.done\",\n  \"response_id\": \"resp-123\"\n}\n"
                }
            },
            "ResponseAudioTranscriptDeltaEvent": {
                "required": [
                    "type",
                    "response_id",
                    "delta"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.audio.transcript.delta"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.audio.transcript.delta`.\n",
                        "x-stainless-const": true
                    },
                    "delta": {
                        "type": "string",
                        "description": "The partial transcript of the audio response.\n"
                    }
                },
                "description": "Emitted when there is a partial transcript of audio.",
                "x-oaiMeta": {
                    "name": "response.audio.transcript.delta",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.audio.transcript.delta\",\n  \"response_id\": \"resp_123\",\n  \"delta\": \" ... partial transcript ... \"\n}\n"
                }
            },
            "ResponseAudioTranscriptDoneEvent": {
                "required": [
                    "type",
                    "response_id"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.audio.transcript.done"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.audio.transcript.done`.\n",
                        "x-stainless-const": true
                    }
                },
                "description": "Emitted when the full audio transcript is completed.",
                "x-oaiMeta": {
                    "name": "response.audio.transcript.done",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.audio.transcript.done\",\n  \"response_id\": \"resp_123\"\n}\n"
                }
            },
            "ResponseCodeInterpreterCallCodeDeltaEvent": {
                "required": [
                    "type",
                    "response_id",
                    "output_index",
                    "delta"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.code_interpreter_call.code.delta"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.code_interpreter_call.code.delta`.\n",
                        "x-stainless-const": true
                    },
                    "output_index": {
                        "type": "integer",
                        "description": "The index of the output item that the code interpreter call is in progress.\n"
                    },
                    "delta": {
                        "type": "string",
                        "description": "The partial code snippet added by the code interpreter.\n"
                    }
                },
                "description": "Emitted when a partial code snippet is added by the code interpreter.",
                "x-oaiMeta": {
                    "name": "response.code_interpreter_call.code.delta",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.code_interpreter_call.code.delta\",\n  \"response_id\": \"resp-123\",\n  \"output_index\": 0,\n  \"delta\": \"partial code\"\n}\n"
                }
            },
            "ResponseCodeInterpreterCallCodeDoneEvent": {
                "required": [
                    "type",
                    "response_id",
                    "output_index",
                    "code"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.code_interpreter_call.code.done"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.code_interpreter_call.code.done`.\n",
                        "x-stainless-const": true
                    },
                    "output_index": {
                        "type": "integer",
                        "description": "The index of the output item that the code interpreter call is in progress.\n"
                    },
                    "code": {
                        "type": "string",
                        "description": "The final code snippet output by the code interpreter.\n"
                    }
                },
                "description": "Emitted when code snippet output is finalized by the code interpreter.",
                "x-oaiMeta": {
                    "name": "response.code_interpreter_call.code.done",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.code_interpreter_call.code.done\",\n  \"response_id\": \"resp-123\",\n  \"output_index\": 3,\n  \"code\": \"console.log('done');\"\n}\n"
                }
            },
            "ResponseCodeInterpreterCallCompletedEvent": {
                "required": [
                    "type",
                    "response_id",
                    "output_index",
                    "code_interpreter_call"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.code_interpreter_call.completed"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.code_interpreter_call.completed`.\n",
                        "x-stainless-const": true
                    },
                    "output_index": {
                        "type": "integer",
                        "description": "The index of the output item that the code interpreter call is in progress.\n"
                    },
                    "code_interpreter_call": {
                        "$ref": "#/components/schemas/CodeInterpreterToolCall"
                    }
                },
                "description": "Emitted when the code interpreter call is completed.",
                "x-oaiMeta": {
                    "name": "response.code_interpreter_call.completed",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.code_interpreter_call.completed\",\n  \"response_id\": \"resp-123\",\n  \"output_index\": 5,\n  \"code_interpreter_call\": {}\n}\n"
                }
            },
            "ResponseCodeInterpreterCallInProgressEvent": {
                "required": [
                    "type",
                    "response_id",
                    "output_index",
                    "code_interpreter_call"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.code_interpreter_call.in_progress"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.code_interpreter_call.in_progress`.\n",
                        "x-stainless-const": true
                    },
                    "output_index": {
                        "type": "integer",
                        "description": "The index of the output item that the code interpreter call is in progress.\n"
                    },
                    "code_interpreter_call": {
                        "$ref": "#/components/schemas/CodeInterpreterToolCall"
                    }
                },
                "description": "Emitted when a code interpreter call is in progress.",
                "x-oaiMeta": {
                    "name": "response.code_interpreter_call.in_progress",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.code_interpreter_call.in.progress\",\n  \"response_id\": \"resp-123\",\n  \"output_index\": 0,\n  \"code_interpreter_call\": {}\n}\n"
                }
            },
            "ResponseCodeInterpreterCallInterpretingEvent": {
                "required": [
                    "type",
                    "response_id",
                    "output_index",
                    "code_interpreter_call"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.code_interpreter_call.interpreting"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.code_interpreter_call.interpreting`.\n",
                        "x-stainless-const": true
                    },
                    "output_index": {
                        "type": "integer",
                        "description": "The index of the output item that the code interpreter call is in progress.\n"
                    },
                    "code_interpreter_call": {
                        "$ref": "#/components/schemas/CodeInterpreterToolCall"
                    }
                },
                "description": "Emitted when the code interpreter is actively interpreting the code snippet.",
                "x-oaiMeta": {
                    "name": "response.code_interpreter_call.interpreting",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.code_interpreter_call.interpreting\",\n  \"response_id\": \"resp-123\",\n  \"output_index\": 4,\n  \"code_interpreter_call\": {}\n}\n"
                }
            },
            "ResponseCompletedEvent": {
                "required": [
                    "type",
                    "response"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.completed"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.completed`.\n",
                        "x-stainless-const": true
                    },
                    "response": {
                        "$ref": "#/components/schemas/response"
                    }
                },
                "description": "Emitted when the model response is complete.",
                "x-oaiMeta": {
                    "name": "response.completed",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.completed\",\n  \"response\": {\n    \"id\": \"resp_123\",\n    \"object\": \"response\",\n    \"created_at\": 1740855869,\n    \"status\": \"completed\",\n    \"error\": null,\n    \"incomplete_details\": null,\n    \"input\": [],\n    \"instructions\": null,\n    \"max_output_tokens\": null,\n    \"model\": \"gpt-4o-mini-2024-07-18\",\n    \"output\": [\n      {\n        \"id\": \"msg_123\",\n        \"type\": \"message\",\n        \"role\": \"assistant\",\n        \"content\": [\n          {\n            \"type\": \"output_text\",\n            \"text\": \"In a shimmering forest under a sky full of stars, a lonely unicorn named Lila discovered a hidden pond that glowed with moonlight. Every night, she would leave sparkling, magical flowers by the water's edge, hoping to share her beauty with others. One enchanting evening, she woke to find a group of friendly animals gathered around, eager to be friends and share in her magic.\",\n            \"annotations\": []\n          }\n        ]\n      }\n    ],\n    \"previous_response_id\": null,\n    \"reasoning_effort\": null,\n    \"store\": false,\n    \"temperature\": 1,\n    \"text\": {\n      \"format\": {\n        \"type\": \"text\"\n      }\n    },\n    \"tool_choice\": \"auto\",\n    \"tools\": [],\n    \"top_p\": 1,\n    \"truncation\": \"disabled\",\n    \"usage\": {\n      \"input_tokens\": 0,\n      \"output_tokens\": 0,\n      \"output_tokens_details\": {\n        \"reasoning_tokens\": 0\n      },\n      \"total_tokens\": 0\n    },\n    \"user\": null,\n    \"metadata\": {}\n  }\n}\n"
                }
            },
            "ResponseContentPartAddedEvent": {
                "required": [
                    "type",
                    "item_id",
                    "output_index",
                    "content_index",
                    "part"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.content_part.added"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.content_part.added`.\n",
                        "x-stainless-const": true
                    },
                    "item_id": {
                        "type": "string",
                        "description": "The ID of the output item that the content part was added to.\n"
                    },
                    "output_index": {
                        "type": "integer",
                        "description": "The index of the output item that the content part was added to.\n"
                    },
                    "content_index": {
                        "type": "integer",
                        "description": "The index of the content part that was added.\n"
                    },
                    "part": {
                        "$ref": "#/components/schemas/OutputContent"
                    }
                },
                "description": "Emitted when a new content part is added.",
                "x-oaiMeta": {
                    "name": "response.content_part.added",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.content_part.added\",\n  \"item_id\": \"msg_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"part\": {\n    \"type\": \"output_text\",\n    \"text\": \"\",\n    \"annotations\": []\n  }\n}\n"
                }
            },
            "ResponseContentPartDoneEvent": {
                "required": [
                    "type",
                    "item_id",
                    "output_index",
                    "content_index",
                    "part"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.content_part.done"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.content_part.done`.\n",
                        "x-stainless-const": true
                    },
                    "item_id": {
                        "type": "string",
                        "description": "The ID of the output item that the content part was added to.\n"
                    },
                    "output_index": {
                        "type": "integer",
                        "description": "The index of the output item that the content part was added to.\n"
                    },
                    "content_index": {
                        "type": "integer",
                        "description": "The index of the content part that is done.\n"
                    },
                    "part": {
                        "$ref": "#/components/schemas/OutputContent"
                    }
                },
                "description": "Emitted when a content part is done.",
                "x-oaiMeta": {
                    "name": "response.content_part.done",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.content_part.done\",\n  \"item_id\": \"msg_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"part\": {\n    \"type\": \"output_text\",\n    \"text\": \"In a shimmering forest under a sky full of stars, a lonely unicorn named Lila discovered a hidden pond that glowed with moonlight. Every night, she would leave sparkling, magical flowers by the water's edge, hoping to share her beauty with others. One enchanting evening, she woke to find a group of friendly animals gathered around, eager to be friends and share in her magic.\",\n    \"annotations\": []\n  }\n}\n"
                }
            },
            "ResponseCreatedEvent": {
                "required": [
                    "type",
                    "response"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.created"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.created`.\n",
                        "x-stainless-const": true
                    },
                    "response": {
                        "$ref": "#/components/schemas/response"
                    }
                },
                "description": "An event that is emitted when a response is created.\n",
                "x-oaiMeta": {
                    "name": "response.created",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.created\",\n  \"response\": {\n    \"id\": \"resp_67ccfcdd16748190a91872c75d38539e09e4d4aac714747c\",\n    \"object\": \"response\",\n    \"created_at\": 1741487325,\n    \"status\": \"in_progress\",\n    \"error\": null,\n    \"incomplete_details\": null,\n    \"instructions\": null,\n    \"max_output_tokens\": null,\n    \"model\": \"gpt-4o-2024-08-06\",\n    \"output\": [],\n    \"parallel_tool_calls\": true,\n    \"previous_response_id\": null,\n    \"reasoning\": {\n      \"effort\": null,\n      \"summary\": null\n    },\n    \"store\": true,\n    \"temperature\": 1,\n    \"text\": {\n      \"format\": {\n        \"type\": \"text\"\n      }\n    },\n    \"tool_choice\": \"auto\",\n    \"tools\": [],\n    \"top_p\": 1,\n    \"truncation\": \"disabled\",\n    \"usage\": null,\n    \"user\": null,\n    \"metadata\": {}\n  }\n}\n"
                }
            },
            "ResponseError": {
                "required": [
                    "code",
                    "message"
                ],
                "type": "object",
                "properties": {
                    "code": {
                        "$ref": "#/components/schemas/ResponseErrorCode"
                    },
                    "message": {
                        "type": "string",
                        "description": "A human-readable description of the error.\n"
                    }
                },
                "description": "An error object returned when the model fails to generate a Response.\n",
                "nullable": true
            },
            "ResponseErrorCode": {
                "enum": [
                    "server_error",
                    "rate_limit_exceeded",
                    "invalid_prompt",
                    "vector_store_timeout",
                    "invalid_image",
                    "invalid_image_format",
                    "invalid_base64_image",
                    "invalid_image_url",
                    "image_too_large",
                    "image_too_small",
                    "image_parse_error",
                    "image_content_policy_violation",
                    "invalid_image_mode",
                    "image_file_too_large",
                    "unsupported_image_media_type",
                    "empty_image_file",
                    "failed_to_download_image",
                    "image_file_not_found"
                ],
                "type": "string",
                "description": "The error code for the response.\n"
            },
            "ResponseErrorEvent": {
                "required": [
                    "type",
                    "code",
                    "message",
                    "param"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "error"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `error`.\n",
                        "x-stainless-const": true
                    },
                    "code": {
                        "type": "string",
                        "description": "The error code.\n",
                        "nullable": true
                    },
                    "message": {
                        "type": "string",
                        "description": "The error message.\n"
                    },
                    "param": {
                        "type": "string",
                        "description": "The error parameter.\n",
                        "nullable": true
                    }
                },
                "description": "Emitted when an error occurs.",
                "x-oaiMeta": {
                    "name": "error",
                    "group": "responses",
                    "example": "{\n  \"type\": \"error\",\n  \"code\": \"ERR_SOMETHING\",\n  \"message\": \"Something went wrong\",\n  \"param\": null\n}\n"
                }
            },
            "ResponseFailedEvent": {
                "required": [
                    "type",
                    "response"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.failed"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.failed`.\n",
                        "x-stainless-const": true
                    },
                    "response": {
                        "$ref": "#/components/schemas/response"
                    }
                },
                "description": "An event that is emitted when a response fails.\n",
                "x-oaiMeta": {
                    "name": "response.failed",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.failed\",\n  \"response\": {\n    \"id\": \"resp_123\",\n    \"object\": \"response\",\n    \"created_at\": 1740855869,\n    \"status\": \"failed\",\n    \"error\": {\n      \"code\": \"server_error\",\n      \"message\": \"The model failed to generate a response.\"\n    },\n    \"incomplete_details\": null,\n    \"instructions\": null,\n    \"max_output_tokens\": null,\n    \"model\": \"gpt-4o-mini-2024-07-18\",\n    \"output\": [],\n    \"previous_response_id\": null,\n    \"reasoning_effort\": null,\n    \"store\": false,\n    \"temperature\": 1,\n    \"text\": {\n      \"format\": {\n        \"type\": \"text\"\n      }\n    },\n    \"tool_choice\": \"auto\",\n    \"tools\": [],\n    \"top_p\": 1,\n    \"truncation\": \"disabled\",\n    \"usage\": null,\n    \"user\": null,\n    \"metadata\": {}\n  }\n}\n"
                }
            },
            "ResponseFileSearchCallCompletedEvent": {
                "required": [
                    "type",
                    "output_index",
                    "item_id"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.file_search_call.completed"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.file_search_call.completed`.\n",
                        "x-stainless-const": true
                    },
                    "output_index": {
                        "type": "integer",
                        "description": "The index of the output item that the file search call is initiated.\n"
                    },
                    "item_id": {
                        "type": "string",
                        "description": "The ID of the output item that the file search call is initiated.\n"
                    }
                },
                "description": "Emitted when a file search call is completed (results found).",
                "x-oaiMeta": {
                    "name": "response.file_search_call.completed",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.file_search_call.completed\",\n  \"output_index\": 0,\n  \"item_id\": \"fs_123\",\n}\n"
                }
            },
            "ResponseFileSearchCallInProgressEvent": {
                "required": [
                    "type",
                    "output_index",
                    "item_id"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.file_search_call.in_progress"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.file_search_call.in_progress`.\n",
                        "x-stainless-const": true
                    },
                    "output_index": {
                        "type": "integer",
                        "description": "The index of the output item that the file search call is initiated.\n"
                    },
                    "item_id": {
                        "type": "string",
                        "description": "The ID of the output item that the file search call is initiated.\n"
                    }
                },
                "description": "Emitted when a file search call is initiated.",
                "x-oaiMeta": {
                    "name": "response.file_search_call.in_progress",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.file_search_call.in_progress\",\n  \"output_index\": 0,\n  \"item_id\": \"fs_123\",\n}\n"
                }
            },
            "ResponseFileSearchCallSearchingEvent": {
                "required": [
                    "type",
                    "output_index",
                    "item_id"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.file_search_call.searching"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.file_search_call.searching`.\n",
                        "x-stainless-const": true
                    },
                    "output_index": {
                        "type": "integer",
                        "description": "The index of the output item that the file search call is searching.\n"
                    },
                    "item_id": {
                        "type": "string",
                        "description": "The ID of the output item that the file search call is initiated.\n"
                    }
                },
                "description": "Emitted when a file search is currently searching.",
                "x-oaiMeta": {
                    "name": "response.file_search_call.searching",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.file_search_call.searching\",\n  \"output_index\": 0,\n  \"item_id\": \"fs_123\",\n}\n"
                }
            },
            "ResponseFunctionCallArgumentsDeltaEvent": {
                "required": [
                    "type",
                    "item_id",
                    "output_index",
                    "delta"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.function_call_arguments.delta"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.function_call_arguments.delta`.\n",
                        "x-stainless-const": true
                    },
                    "item_id": {
                        "type": "string",
                        "description": "The ID of the output item that the function-call arguments delta is added to.\n"
                    },
                    "output_index": {
                        "type": "integer",
                        "description": "The index of the output item that the function-call arguments delta is added to.\n"
                    },
                    "delta": {
                        "type": "string",
                        "description": "The function-call arguments delta that is added.\n"
                    }
                },
                "description": "Emitted when there is a partial function-call arguments delta.",
                "x-oaiMeta": {
                    "name": "response.function_call_arguments.delta",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.function_call_arguments.delta\",\n  \"item_id\": \"item-abc\",\n  \"output_index\": 0,\n  \"delta\": \"{ \\\"arg\\\":\"\n}\n"
                }
            },
            "ResponseFunctionCallArgumentsDoneEvent": {
                "required": [
                    "type",
                    "item_id",
                    "output_index",
                    "arguments"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.function_call_arguments.done"
                        ],
                        "type": "string",
                        "x-stainless-const": true
                    },
                    "item_id": {
                        "type": "string",
                        "description": "The ID of the item."
                    },
                    "output_index": {
                        "type": "integer",
                        "description": "The index of the output item."
                    },
                    "arguments": {
                        "type": "string",
                        "description": "The function-call arguments."
                    }
                },
                "description": "Emitted when function-call arguments are finalized.",
                "x-oaiMeta": {
                    "name": "response.function_call_arguments.done",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.function_call_arguments.done\",\n  \"item_id\": \"item-abc\",\n  \"output_index\": 1,\n  \"arguments\": \"{ \\\"arg\\\": 123 }\"\n}\n"
                }
            },
            "ResponseInProgressEvent": {
                "required": [
                    "type",
                    "response"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.in_progress"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.in_progress`.\n",
                        "x-stainless-const": true
                    },
                    "response": {
                        "$ref": "#/components/schemas/response"
                    }
                },
                "description": "Emitted when the response is in progress.",
                "x-oaiMeta": {
                    "name": "response.in_progress",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.in_progress\",\n  \"response\": {\n    \"id\": \"resp_67ccfcdd16748190a91872c75d38539e09e4d4aac714747c\",\n    \"object\": \"response\",\n    \"created_at\": 1741487325,\n    \"status\": \"in_progress\",\n    \"error\": null,\n    \"incomplete_details\": null,\n    \"instructions\": null,\n    \"max_output_tokens\": null,\n    \"model\": \"gpt-4o-2024-08-06\",\n    \"output\": [],\n    \"parallel_tool_calls\": true,\n    \"previous_response_id\": null,\n    \"reasoning\": {\n      \"effort\": null,\n      \"summary\": null\n    },\n    \"store\": true,\n    \"temperature\": 1,\n    \"text\": {\n      \"format\": {\n        \"type\": \"text\"\n      }\n    },\n    \"tool_choice\": \"auto\",\n    \"tools\": [],\n    \"top_p\": 1,\n    \"truncation\": \"disabled\",\n    \"usage\": null,\n    \"user\": null,\n    \"metadata\": {}\n  }\n}\n"
                }
            },
            "ResponseIncompleteEvent": {
                "required": [
                    "type",
                    "response"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.incomplete"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.incomplete`.\n",
                        "x-stainless-const": true
                    },
                    "response": {
                        "$ref": "#/components/schemas/response"
                    }
                },
                "description": "An event that is emitted when a response finishes as incomplete.\n",
                "x-oaiMeta": {
                    "name": "response.incomplete",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.incomplete\",\n  \"response\": {\n    \"id\": \"resp_123\",\n    \"object\": \"response\",\n    \"created_at\": 1740855869,\n    \"status\": \"incomplete\",\n    \"error\": null, \n    \"incomplete_details\": {\n      \"reason\": \"max_tokens\"\n    },\n    \"instructions\": null,\n    \"max_output_tokens\": null,\n    \"model\": \"gpt-4o-mini-2024-07-18\",\n    \"output\": [],\n    \"previous_response_id\": null,\n    \"reasoning_effort\": null,\n    \"store\": false,\n    \"temperature\": 1,\n    \"text\": {\n      \"format\": {\n        \"type\": \"text\"\n      }\n    },\n    \"tool_choice\": \"auto\",\n    \"tools\": [],\n    \"top_p\": 1,\n    \"truncation\": \"disabled\",\n    \"usage\": null,\n    \"user\": null,\n    \"metadata\": {}\n  }\n}\n"
                }
            },
            "responseItemList": {
                "required": [
                    "object",
                    "data",
                    "has_more",
                    "first_id",
                    "last_id"
                ],
                "type": "object",
                "properties": {
                    "object": {
                        "enum": [
                            "list"
                        ],
                        "type": "string",
                        "description": "The type of object returned, must be `list`.",
                        "x-stainless-const": true
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ItemResource"
                        },
                        "description": "A list of items used to generate this response."
                    },
                    "has_more": {
                        "type": "boolean",
                        "description": "Whether there are more items available."
                    },
                    "first_id": {
                        "type": "string",
                        "description": "The ID of the first item in the list."
                    },
                    "last_id": {
                        "type": "string",
                        "description": "The ID of the last item in the list."
                    }
                },
                "description": "A list of Response items.",
                "x-oaiExpandable": true,
                "x-oaiMeta": {
                    "name": "The input item list",
                    "group": "responses",
                    "example": "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"msg_abc123\",\n      \"type\": \"message\",\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n          \"text\": \"Tell me a three sentence bedtime story about a unicorn.\"\n        }\n      ]\n    }\n  ],\n  \"first_id\": \"msg_abc123\",\n  \"last_id\": \"msg_abc123\",\n  \"has_more\": false\n}\n"
                }
            },
            "ResponseModalities": {
                "type": "array",
                "items": {
                    "enum": [
                        "text",
                        "audio"
                    ],
                    "type": "string"
                },
                "description": "Output types that you would like the model to generate.\nMost models are capable of generating text, which is the default:\n\n`[\"text\"]`\n\nThe `gpt-4o-audio-preview` model can also be used to \n[generate audio](/docs/guides/audio). To request that this model generate \nboth text and audio responses, you can use:\n\n`[\"text\", \"audio\"]`\n",
                "nullable": true
            },
            "ResponseModalitiesTextOnly": {
                "type": "array",
                "items": {
                    "enum": [
                        "text"
                    ],
                    "type": "string"
                },
                "description": "Output types that you would like the model to generate.\nMost models are capable of generating text, which is the default:\n\n`[\"text\"]`\n\nThis API will soon support other output modalities, including audio and images.\n",
                "nullable": true
            },
            "ResponseOutputItemAddedEvent": {
                "required": [
                    "type",
                    "output_index",
                    "item"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.output_item.added"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.output_item.added`.\n",
                        "x-stainless-const": true
                    },
                    "output_index": {
                        "type": "integer",
                        "description": "The index of the output item that was added.\n"
                    },
                    "item": {
                        "$ref": "#/components/schemas/OutputItem"
                    }
                },
                "description": "Emitted when a new output item is added.",
                "x-oaiMeta": {
                    "name": "response.output_item.added",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.output_item.added\",\n  \"output_index\": 0,\n  \"item\": {\n    \"id\": \"msg_123\",\n    \"status\": \"in_progress\",\n    \"type\": \"message\",\n    \"role\": \"assistant\",\n    \"content\": []\n  }\n}\n"
                }
            },
            "ResponseOutputItemDoneEvent": {
                "required": [
                    "type",
                    "output_index",
                    "item"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.output_item.done"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.output_item.done`.\n",
                        "x-stainless-const": true
                    },
                    "output_index": {
                        "type": "integer",
                        "description": "The index of the output item that was marked done.\n"
                    },
                    "item": {
                        "$ref": "#/components/schemas/OutputItem"
                    }
                },
                "description": "Emitted when an output item is marked done.",
                "x-oaiMeta": {
                    "name": "response.output_item.done",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.output_item.done\",\n  \"output_index\": 0,\n  \"item\": {\n    \"id\": \"msg_123\",\n    \"status\": \"completed\",\n    \"type\": \"message\",\n    \"role\": \"assistant\",\n    \"content\": [\n      {\n        \"type\": \"output_text\",\n        \"text\": \"In a shimmering forest under a sky full of stars, a lonely unicorn named Lila discovered a hidden pond that glowed with moonlight. Every night, she would leave sparkling, magical flowers by the water's edge, hoping to share her beauty with others. One enchanting evening, she woke to find a group of friendly animals gathered around, eager to be friends and share in her magic.\",\n        \"annotations\": []\n      }\n    ]\n  }\n}\n"
                }
            },
            "ResponseProperties": {
                "type": "object",
                "properties": {
                    "previous_response_id": {
                        "type": "string",
                        "description": "The unique ID of the previous response to the model. Use this to\ncreate multi-turn conversations. Learn more about \n[conversation state](/docs/guides/conversation-state).\n",
                        "nullable": true
                    },
                    "reasoning": {
                        "$ref": "#/components/schemas/Reasoning"
                    },
                    "max_output_tokens": {
                        "type": "integer",
                        "description": "An upper bound for the number of tokens that can be generated for a response, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).\n",
                        "nullable": true
                    },
                    "instructions": {
                        "type": "string",
                        "description": "Inserts a system (or developer) message as the first item in the model's context.\n\nWhen using along with `previous_response_id`, the instructions from a previous\nresponse will be not be carried over to the next response. This makes it simple\nto swap out system (or developer) messages in new responses.\n",
                        "nullable": true
                    },
                    "text": {
                        "type": "object",
                        "properties": {
                            "format": {
                                "$ref": "#/components/schemas/TextResponseFormatConfiguration"
                            }
                        },
                        "description": "Configuration options for a text response from the model. Can be plain\ntext or structured JSON data. Learn more:\n- [Text inputs and outputs](/docs/guides/text)\n- [Structured Outputs](/docs/guides/structured-outputs)\n"
                    },
                    "tools": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Tool"
                        },
                        "description": "An array of tools the model may call while generating a response. You \ncan specify which tool to use by setting the `tool_choice` parameter.\n\nThe two categories of tools you can provide the model are:\n\n- **Built-in tools**: Tools that are provided by OpenAI that extend the\n  model's capabilities, like [web search](/docs/guides/tools-web-search)\n  or [file search](/docs/guides/tools-file-search). Learn more about\n  [built-in tools](/docs/guides/tools).\n- **Function calls (custom tools)**: Functions that are defined by you,\n  enabling the model to call your own code. Learn more about\n  [function calling](/docs/guides/function-calling).\n"
                    },
                    "tool_choice": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ToolChoiceOptions"
                            },
                            {
                                "$ref": "#/components/schemas/ToolChoiceTypes"
                            },
                            {
                                "$ref": "#/components/schemas/ToolChoiceFunction"
                            }
                        ],
                        "description": "How the model should select which tool (or tools) to use when generating\na response. See the `tools` parameter to see how to specify which tools\nthe model can call.\n",
                        "x-oaiExpandable": true
                    },
                    "truncation": {
                        "enum": [
                            "auto",
                            "disabled"
                        ],
                        "type": "string",
                        "description": "The truncation strategy to use for the model response.\n- `auto`: If the context of this response and previous ones exceeds\n  the model's context window size, the model will truncate the \n  response to fit the context window by dropping input items in the\n  middle of the conversation. \n- `disabled` (default): If a model response will exceed the context window \n  size for a model, the request will fail with a 400 error.\n",
                        "default": "disabled",
                        "nullable": true
                    }
                }
            },
            "ResponseRefusalDeltaEvent": {
                "required": [
                    "type",
                    "item_id",
                    "output_index",
                    "content_index",
                    "delta"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.refusal.delta"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.refusal.delta`.\n",
                        "x-stainless-const": true
                    },
                    "item_id": {
                        "type": "string",
                        "description": "The ID of the output item that the refusal text is added to.\n"
                    },
                    "output_index": {
                        "type": "integer",
                        "description": "The index of the output item that the refusal text is added to.\n"
                    },
                    "content_index": {
                        "type": "integer",
                        "description": "The index of the content part that the refusal text is added to.\n"
                    },
                    "delta": {
                        "type": "string",
                        "description": "The refusal text that is added.\n"
                    }
                },
                "description": "Emitted when there is a partial refusal text.",
                "x-oaiMeta": {
                    "name": "response.refusal.delta",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.refusal.delta\",\n  \"item_id\": \"msg_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"delta\": \"refusal text so far\"\n}\n"
                }
            },
            "ResponseRefusalDoneEvent": {
                "required": [
                    "type",
                    "item_id",
                    "output_index",
                    "content_index",
                    "refusal"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.refusal.done"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.refusal.done`.\n",
                        "x-stainless-const": true
                    },
                    "item_id": {
                        "type": "string",
                        "description": "The ID of the output item that the refusal text is finalized.\n"
                    },
                    "output_index": {
                        "type": "integer",
                        "description": "The index of the output item that the refusal text is finalized.\n"
                    },
                    "content_index": {
                        "type": "integer",
                        "description": "The index of the content part that the refusal text is finalized.\n"
                    },
                    "refusal": {
                        "type": "string",
                        "description": "The refusal text that is finalized.\n"
                    }
                },
                "description": "Emitted when refusal text is finalized.",
                "x-oaiMeta": {
                    "name": "response.refusal.done",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.refusal.done\",\n  \"item_id\": \"item-abc\",\n  \"output_index\": 1,\n  \"content_index\": 2,\n  \"refusal\": \"final refusal text\"\n}\n"
                }
            },
            "responseStreamEvent": {
                "anyOf": [
                    {
                        "$ref": "#/components/schemas/ResponseAudioDeltaEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseAudioDoneEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseAudioTranscriptDeltaEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseAudioTranscriptDoneEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseCodeInterpreterCallCodeDeltaEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseCodeInterpreterCallCodeDoneEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseCodeInterpreterCallCompletedEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseCodeInterpreterCallInProgressEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseCodeInterpreterCallInterpretingEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseCompletedEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseContentPartAddedEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseContentPartDoneEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseCreatedEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseErrorEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseFileSearchCallCompletedEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseFileSearchCallInProgressEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseFileSearchCallSearchingEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseFunctionCallArgumentsDeltaEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseFunctionCallArgumentsDoneEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseInProgressEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseFailedEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseIncompleteEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseOutputItemAddedEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseOutputItemDoneEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseRefusalDeltaEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseRefusalDoneEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseTextAnnotationDeltaEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseTextDeltaEvent"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseTextDoneEvent"
                    }
                ],
                "discriminator": {
                    "propertyName": "type"
                }
            },
            "ResponseTextAnnotationDeltaEvent": {
                "required": [
                    "type",
                    "item_id",
                    "output_index",
                    "content_index",
                    "annotation_index",
                    "annotation"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.output_text.annotation.added"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.output_text.annotation.added`.\n",
                        "x-stainless-const": true
                    },
                    "item_id": {
                        "type": "string",
                        "description": "The ID of the output item that the text annotation was added to.\n"
                    },
                    "output_index": {
                        "type": "integer",
                        "description": "The index of the output item that the text annotation was added to.\n"
                    },
                    "content_index": {
                        "type": "integer",
                        "description": "The index of the content part that the text annotation was added to.\n"
                    },
                    "annotation_index": {
                        "type": "integer",
                        "description": "The index of the annotation that was added.\n"
                    },
                    "annotation": {
                        "$ref": "#/components/schemas/Annotation"
                    }
                },
                "description": "Emitted when a text annotation is added.",
                "x-oaiMeta": {
                    "name": "response.output_text.annotation.added",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.output_text.annotation.added\",\n  \"item_id\": \"msg_abc123\",\n  \"output_index\": 1,\n  \"content_index\": 0,\n  \"annotation_index\": 0,\n  \"annotation\": {\n    \"type\": \"file_citation\",\n    \"index\": 390,\n    \"file_id\": \"file-4wDz5b167pAf72nx1h9eiN\",\n    \"filename\": \"dragons.pdf\"\n  }\n}\n"
                }
            },
            "ResponseTextDeltaEvent": {
                "required": [
                    "type",
                    "item_id",
                    "output_index",
                    "content_index",
                    "delta"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.output_text.delta"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.output_text.delta`.\n",
                        "x-stainless-const": true
                    },
                    "item_id": {
                        "type": "string",
                        "description": "The ID of the output item that the text delta was added to.\n"
                    },
                    "output_index": {
                        "type": "integer",
                        "description": "The index of the output item that the text delta was added to.\n"
                    },
                    "content_index": {
                        "type": "integer",
                        "description": "The index of the content part that the text delta was added to.\n"
                    },
                    "delta": {
                        "type": "string",
                        "description": "The text delta that was added.\n"
                    }
                },
                "description": "Emitted when there is an additional text delta.",
                "x-oaiMeta": {
                    "name": "response.output_text.delta",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.output_text.delta\",\n  \"item_id\": \"msg_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"delta\": \"In\"\n}\n"
                }
            },
            "ResponseTextDoneEvent": {
                "required": [
                    "type",
                    "item_id",
                    "output_index",
                    "content_index",
                    "text"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "response.output_text.done"
                        ],
                        "type": "string",
                        "description": "The type of the event. Always `response.output_text.done`.\n",
                        "x-stainless-const": true
                    },
                    "item_id": {
                        "type": "string",
                        "description": "The ID of the output item that the text content is finalized.\n"
                    },
                    "output_index": {
                        "type": "integer",
                        "description": "The index of the output item that the text content is finalized.\n"
                    },
                    "content_index": {
                        "type": "integer",
                        "description": "The index of the content part that the text content is finalized.\n"
                    },
                    "text": {
                        "type": "string",
                        "description": "The text content that is finalized.\n"
                    }
                },
                "description": "Emitted when text content is finalized.",
                "x-oaiMeta": {
                    "name": "response.output_text.done",
                    "group": "responses",
                    "example": "{\n  \"type\": \"response.output_text.done\",\n  \"item_id\": \"msg_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"text\": \"In a shimmering forest under a sky full of stars, a lonely unicorn named Lila discovered a hidden pond that glowed with moonlight. Every night, she would leave sparkling, magical flowers by the water's edge, hoping to share her beauty with others. One enchanting evening, she woke to find a group of friendly animals gathered around, eager to be friends and share in her magic.\"\n}\n"
                }
            },
            "ResponseUsage": {
                "required": [
                    "input_tokens",
                    "output_tokens",
                    "output_tokens_details",
                    "total_tokens"
                ],
                "type": "object",
                "properties": {
                    "input_tokens": {
                        "type": "integer",
                        "description": "The number of input tokens."
                    },
                    "output_tokens": {
                        "type": "integer",
                        "description": "The number of output tokens."
                    },
                    "output_tokens_details": {
                        "required": [
                            "reasoning_tokens"
                        ],
                        "type": "object",
                        "properties": {
                            "reasoning_tokens": {
                                "type": "integer",
                                "description": "The number of reasoning tokens."
                            }
                        },
                        "description": "A detailed breakdown of the output tokens."
                    },
                    "total_tokens": {
                        "type": "integer",
                        "description": "The total number of tokens used."
                    }
                },
                "description": "Represents token usage details including input tokens, output tokens,\na breakdown of output tokens, and the total tokens used.\n"
            },
            "Screenshot": {
                "title": "Screenshot",
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "screenshot"
                        ],
                        "type": "string",
                        "description": "Specifies the event type. For a screenshot action, this property is \nalways set to `screenshot`.\n",
                        "default": "screenshot",
                        "x-stainless-const": true
                    }
                },
                "description": "A screenshot action.\n"
            },
            "Scroll": {
                "title": "Scroll",
                "required": [
                    "type",
                    "x",
                    "y",
                    "scroll_x",
                    "scroll_y"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "scroll"
                        ],
                        "type": "string",
                        "description": "Specifies the event type. For a scroll action, this property is \nalways set to `scroll`.\n",
                        "default": "scroll",
                        "x-stainless-const": true
                    },
                    "x": {
                        "type": "integer",
                        "description": "The x-coordinate where the scroll occurred.\n"
                    },
                    "y": {
                        "type": "integer",
                        "description": "The y-coordinate where the scroll occurred.\n"
                    },
                    "scroll_x": {
                        "type": "integer",
                        "description": "The horizontal scroll distance.\n"
                    },
                    "scroll_y": {
                        "type": "integer",
                        "description": "The vertical scroll distance.\n"
                    }
                },
                "description": "A scroll action.\n"
            },
            "StopConfiguration": {
                "oneOf": [
                    {
                        "type": "string",
                        "default": "<|endoftext|>",
                        "nullable": true,
                        "example": "\n"
                    },
                    {
                        "maxItems": 4,
                        "minItems": 1,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "example": "[\"\\n\"]"
                        }
                    }
                ],
                "description": "Up to 4 sequences where the API will stop generating further tokens. The\nreturned text will not contain the stop sequence.\n",
                "default": null,
                "nullable": true
            },
            "TextResponseFormatConfiguration": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/ResponseFormatText"
                    },
                    {
                        "$ref": "#/components/schemas/TextResponseFormatJsonSchema"
                    },
                    {
                        "$ref": "#/components/schemas/ResponseFormatJsonObject"
                    }
                ],
                "description": "An object specifying the format that the model must output.\n\nConfiguring `{ \"type\": \"json_schema\" }` enables Structured Outputs, \nwhich ensures the model will match your supplied JSON schema. Learn more in the \n[Structured Outputs guide](/docs/guides/structured-outputs).\n\nThe default format is `{ \"type\": \"text\" }` with no additional options.\n\n**Not recommended for gpt-4o and newer models:**\n\nSetting to `{ \"type\": \"json_object\" }` enables the older JSON mode, which\nensures the message the model generates is valid JSON. Using `json_schema`\nis preferred for models that support it.\n",
                "x-oaiExpandable": true
            },
            "TextResponseFormatJsonSchema": {
                "title": "JSON schema",
                "required": [
                    "type",
                    "schema"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "json_schema"
                        ],
                        "type": "string",
                        "description": "The type of response format being defined. Always `json_schema`.",
                        "x-stainless-const": true
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n"
                    },
                    "schema": {
                        "$ref": "#/components/schemas/ResponseFormatJsonSchemaSchema"
                    },
                    "strict": {
                        "type": "boolean",
                        "description": "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n",
                        "default": false,
                        "nullable": true
                    }
                },
                "description": "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs).\n"
            },
            "Tool": {
                "oneOf": [
                    {
                        "$ref": "#/components/schemas/FileSearchTool"
                    },
                    {
                        "$ref": "#/components/schemas/FunctionTool"
                    },
                    {
                        "$ref": "#/components/schemas/ComputerTool"
                    }
                ],
                "x-oaiExpandable": true
            },
            "ToolChoiceFunction": {
                "title": "Function tool",
                "required": [
                    "type",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "function"
                        ],
                        "type": "string",
                        "description": "For function calling, the type is always `function`.",
                        "x-stainless-const": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the function to call."
                    }
                },
                "description": "Use this option to force the model to call a specific function.\n"
            },
            "ToolChoiceOptions": {
                "title": "Tool choice mode",
                "enum": [
                    "none",
                    "auto",
                    "required"
                ],
                "type": "string",
                "description": "Controls which (if any) tool is called by the model.\n\n`none` means the model will not call any tool and instead generates a message.\n\n`auto` means the model can pick between generating a message or calling one or\nmore tools.\n\n`required` means the model must call one or more tools.\n"
            },
            "ToolChoiceTypes": {
                "title": "Hosted tool",
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "file_search",
                            "computer_use_preview"
                        ],
                        "type": "string",
                        "description": "The type of hosted tool the model should to use. Learn more about\n[built-in tools](/docs/guides/tools).\n\nAllowed values are:\n- `file_search`\n- `computer_use_preview`\n"
                    }
                },
                "description": "Indicates that the model should use a built-in tool to generate a response.\n[Learn more about built-in tools](/docs/guides/tools).\n"
            },
            "Type": {
                "title": "Type",
                "required": [
                    "type",
                    "text"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "type"
                        ],
                        "type": "string",
                        "description": "Specifies the event type. For a type action, this property is \nalways set to `type`.\n",
                        "default": "type",
                        "x-stainless-const": true
                    },
                    "text": {
                        "type": "string",
                        "description": "The text to type.\n"
                    }
                },
                "description": "An action to type in text.\n"
            },
            "UpdateVectorStoreFileAttributesRequest": {
                "required": [
                    "attributes"
                ],
                "type": "object",
                "properties": {
                    "attributes": {
                        "$ref": "#/components/schemas/VectorStoreFileAttributes"
                    }
                },
                "additionalProperties": false,
                "x-oaiMeta": {
                    "name": "Update vector store file attributes request"
                }
            },
            "UrlCitation": {
                "title": "URL citation",
                "required": [
                    "url",
                    "title",
                    "type",
                    "start_index",
                    "end_index"
                ],
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "description": "The URL of the web resource.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the web resource.\n"
                    },
                    "type": {
                        "enum": [
                            "url_citation"
                        ],
                        "type": "string",
                        "description": "The type of the URL citation. Always `url_citation`.\n",
                        "x-stainless-const": true
                    },
                    "start_index": {
                        "type": "integer",
                        "description": "The index of the first character of the URL citation in the message.\n"
                    },
                    "end_index": {
                        "type": "integer",
                        "description": "The index of the last character of the URL citation in the message.\n"
                    }
                },
                "description": "A citation for a web resource used to generate a model response.\n"
            },
            "VectorStoreFileAttributes": {
                "maxProperties": 16,
                "type": "object",
                "additionalProperties": {
                    "oneOf": [
                        {
                            "maxLength": 512,
                            "type": "string"
                        },
                        {
                            "type": "number"
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                },
                "description": "Set of 16 key-value pairs that can be attached to an object. This can be \nuseful for storing additional information about the object in a structured \nformat, and querying for objects via API or the dashboard. Keys are strings \nwith a maximum length of 64 characters. Values are strings with a maximum \nlength of 512 characters, booleans, or numbers.\n",
                "nullable": true,
                "x-oaiTypeLabel": "map"
            },
            "VectorStoreFileContentResponse": {
                "required": [
                    "object",
                    "data",
                    "has_more",
                    "next_page"
                ],
                "type": "object",
                "properties": {
                    "object": {
                        "enum": [
                            "vector_store.file_content.page"
                        ],
                        "type": "string",
                        "description": "The object type, which is always `vector_store.file_content.page`",
                        "x-stainless-const": true
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "The content type (currently only `\"text\"`)"
                                },
                                "text": {
                                    "type": "string",
                                    "description": "The text content"
                                }
                            }
                        },
                        "description": "Parsed content of the file."
                    },
                    "has_more": {
                        "type": "boolean",
                        "description": "Indicates if there are more content pages to fetch."
                    },
                    "next_page": {
                        "type": "string",
                        "description": "The token for the next page, if any.",
                        "nullable": true
                    }
                },
                "description": "Represents the parsed content of a vector store file."
            },
            "VectorStoreSearchRequest": {
                "required": [
                    "query"
                ],
                "type": "object",
                "properties": {
                    "query": {
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "array",
                                "items": {
                                    "minItems": 1,
                                    "type": "string",
                                    "description": "A list of queries to search for."
                                }
                            }
                        ],
                        "description": "A query string for a search"
                    },
                    "rewrite_query": {
                        "type": "boolean",
                        "description": "Whether to rewrite the natural language query for vector search.",
                        "default": false
                    },
                    "max_num_results": {
                        "maximum": 50,
                        "minimum": 1,
                        "type": "integer",
                        "description": "The maximum number of results to return. This number should be between 1 and 50 inclusive.",
                        "default": 10
                    },
                    "filters": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/ComparisonFilter"
                            },
                            {
                                "$ref": "#/components/schemas/CompoundFilter"
                            }
                        ],
                        "description": "A filter to apply based on file attributes.",
                        "x-oaiExpandable": true
                    },
                    "ranking_options": {
                        "type": "object",
                        "properties": {
                            "ranker": {
                                "enum": [
                                    "auto",
                                    "default-2024-11-15"
                                ],
                                "type": "string",
                                "default": "auto"
                            },
                            "score_threshold": {
                                "maximum": 1,
                                "minimum": 0,
                                "type": "number",
                                "default": 0
                            }
                        },
                        "additionalProperties": false,
                        "description": "Ranking options for search."
                    }
                },
                "additionalProperties": false,
                "x-oaiMeta": {
                    "name": "Vector store search request"
                }
            },
            "VectorStoreSearchResultContentObject": {
                "required": [
                    "type",
                    "text"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "text"
                        ],
                        "type": "string",
                        "description": "The type of content."
                    },
                    "text": {
                        "type": "string",
                        "description": "The text content returned from search."
                    }
                },
                "additionalProperties": false,
                "x-oaiMeta": {
                    "name": "Vector store search result content object"
                }
            },
            "VectorStoreSearchResultItem": {
                "required": [
                    "file_id",
                    "filename",
                    "score",
                    "attributes",
                    "content"
                ],
                "type": "object",
                "properties": {
                    "file_id": {
                        "type": "string",
                        "description": "The ID of the vector store file."
                    },
                    "filename": {
                        "type": "string",
                        "description": "The name of the vector store file."
                    },
                    "score": {
                        "maximum": 1,
                        "minimum": 0,
                        "type": "number",
                        "description": "The similarity score for the result."
                    },
                    "attributes": {
                        "$ref": "#/components/schemas/VectorStoreFileAttributes"
                    },
                    "content": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VectorStoreSearchResultContentObject"
                        },
                        "description": "Content chunks from the file."
                    }
                },
                "additionalProperties": false,
                "x-oaiMeta": {
                    "name": "Vector store search result item"
                }
            },
            "VectorStoreSearchResultsPage": {
                "required": [
                    "object",
                    "search_query",
                    "data",
                    "has_more",
                    "next_page"
                ],
                "type": "object",
                "properties": {
                    "object": {
                        "enum": [
                            "vector_store.search_results.page"
                        ],
                        "type": "string",
                        "description": "The object type, which is always `vector_store.search_results.page`",
                        "x-stainless-const": true
                    },
                    "search_query": {
                        "type": "array",
                        "items": {
                            "minItems": 1,
                            "type": "string",
                            "description": "The query used for this search."
                        }
                    },
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/VectorStoreSearchResultItem"
                        },
                        "description": "The list of search result items."
                    },
                    "has_more": {
                        "type": "boolean",
                        "description": "Indicates if there are more results to fetch."
                    },
                    "next_page": {
                        "type": "string",
                        "description": "The token for the next page, if any.",
                        "nullable": true
                    }
                },
                "additionalProperties": false,
                "x-oaiMeta": {
                    "name": "Vector store search results page"
                }
            },
            "VoiceIdsShared": {
                "anyOf": [
                    {
                        "type": "string"
                    },
                    {
                        "enum": [
                            "alloy",
                            "ash",
                            "ballad",
                            "coral",
                            "echo",
                            "fable",
                            "onyx",
                            "nova",
                            "sage",
                            "shimmer",
                            "verse"
                        ],
                        "type": "string"
                    }
                ],
                "example": "ash"
            },
            "Wait": {
                "title": "Wait",
                "required": [
                    "type"
                ],
                "type": "object",
                "properties": {
                    "type": {
                        "enum": [
                            "wait"
                        ],
                        "type": "string",
                        "description": "Specifies the event type. For a wait action, this property is \nalways set to `wait`.\n",
                        "default": "wait",
                        "x-stainless-const": true
                    }
                },
                "description": "A wait action.\n"
            },
            "ReasoningEffort": {
                "enum": [
                    "low",
                    "medium",
                    "high"
                ],
                "type": "string",
                "description": "**o-series models only** \n\nConstrains effort on reasoning for \n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\nCurrently supported values are `low`, `medium`, and `high`. Reducing\nreasoning effort can result in faster responses and fewer tokens used\non reasoning in a response.\n",
                "default": "medium",
                "nullable": true
            },
            "errorEvent": {
                "required": [
                    "event",
                    "data"
                ],
                "type": "object",
                "properties": {
                    "event": {
                        "enum": [
                            "error"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                            "name": "ErrorEventEnum",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "error"
                                }
                            ]
                        }
                    },
                    "data": {
                        "$ref": "#/components/schemas/error"
                    }
                },
                "description": "Occurs when an error occurs. This can happen due to an internal server error or a timeout."
            },
            "doneEvent": {
                "required": [
                    "event",
                    "data"
                ],
                "type": "object",
                "properties": {
                    "event": {
                        "enum": [
                            "done"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                            "name": "DoneEventEnum",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "done"
                                }
                            ]
                        }
                    },
                    "data": {
                        "enum": [
                            "[DONE]"
                        ],
                        "type": "string",
                        "x-ms-enum": {
                            "name": "DoneEventDataEnum",
                            "modelAsString": true,
                            "values": [
                                {
                                    "value": "[DONE]"
                                }
                            ]
                        }
                    }
                },
                "description": "Occurs when a stream ends."
            }
        },
        "securitySchemes": {
            "apiKeyHeader": {
                "type": "apiKey",
                "name": "api-key",
                "in": "header"
            },
            "apiKeyQuery": {
                "type": "apiKey",
                "name": "subscription-key",
                "in": "query"
            }
        }
    },
    "security": [
        {
            "apiKeyHeader": []
        },
        {
            "apiKeyQuery": []
        }
    ]
}
